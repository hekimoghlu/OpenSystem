/*
 *
 * Copyright (c) NeXTHub Corporation. All Rights Reserved. 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Author: Tunjay Akbarli
 * Date: Sunday, June 1, 2025.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201, 
 * Middletown, DE 19709, New Castle County, USA.
 *
 */
#include "config.h"
#include "CryptoAlgorithmAESCFB.h"

#include "CryptoAlgorithmAesCbcCfbParams.h"
#include "CryptoKeyAES.h"
#include "OpenSSLUtilities.h"

namespace WebCore {

static std::optional<Vector<uint8_t>> cfb8(const Vector<uint8_t>& key, const Vector<uint8_t>& iv, const Vector<uint8_t>& input, bool encrypt)
{
    if (iv.size() != AES_BLOCK_SIZE)
        return std::nullopt;

    AESKey aesKey;
    if (!aesKey.setKey(key, AES_ENCRYPT))
        return std::nullopt;

    // Instead of memmoving the input vector every time, we have a AES_BLOCK_SIZE * 2 length buffer
    // and shift the input position (shiftRegister + shift) as well as the feedback position
    // (shiftRegister + shift + AES_BLOCK_SIZE) until the feedback position reaches
    // the end of the buffer.
    uint8_t shiftRegister[AES_BLOCK_SIZE * 2];
    memcpy(shiftRegister, iv.data(), AES_BLOCK_SIZE);
    size_t shift = 0;

    Vector<uint8_t> output(input.size());

    uint8_t encryptedBlock[AES_BLOCK_SIZE];
    for (size_t i = 0; i < output.size(); i++) {
        AES_encrypt(shiftRegister + shift, encryptedBlock, aesKey.key());

        // In the CFB8 mode the first byte (most significant 8 bits) of the encrypted block
        // is used as a key stream. The output stream is generated by XORing the input and the key stream.
        output[i] = input[i] ^ encryptedBlock[0];

        // Feed back the 8 bit cipher to the shift register. The cipher stream is
        // "output" in the encryption mode and "input" in the decryption mode.
        shiftRegister[AES_BLOCK_SIZE + (shift++)] = encrypt ? output[i] : input[i];
        if (shift == AES_BLOCK_SIZE) {
            memcpy(shiftRegister, shiftRegister + AES_BLOCK_SIZE, AES_BLOCK_SIZE);
            shift = 0;
        }
    }
    memset(encryptedBlock, 0, sizeof encryptedBlock);

    return output;
}

static std::optional<Vector<uint8_t>> cryptEncrypt(const Vector<uint8_t>& key, const Vector<uint8_t>& iv, Vector<uint8_t>&& plainText)
{
    return cfb8(key, iv, plainText, true);
}

static std::optional<Vector<uint8_t>> cryptDecrypt(const Vector<uint8_t>& key, const Vector<uint8_t>& iv, const Vector<uint8_t>& cipherText)
{
    return cfb8(key, iv, cipherText, false);
}

ExceptionOr<Vector<uint8_t>> CryptoAlgorithmAESCFB::platformEncrypt(const CryptoAlgorithmAesCbcCfbParams& parameters, const CryptoKeyAES& key, const Vector<uint8_t>& plainText)
{
    auto output = cryptEncrypt(key.key(), parameters.ivVector(), Vector<uint8_t>(plainText));
    if (!output)
        return Exception { ExceptionCode::OperationError };
    return WTFMove(*output);
}

ExceptionOr<Vector<uint8_t>> CryptoAlgorithmAESCFB::platformDecrypt(const CryptoAlgorithmAesCbcCfbParams& parameters, const CryptoKeyAES& key, const Vector<uint8_t>& cipherText)
{
    auto output = cryptDecrypt(key.key(), parameters.ivVector(), cipherText);
    if (!output)
        return Exception { ExceptionCode::OperationError };
    return WTFMove(*output);
}

} // namespace WebCore
