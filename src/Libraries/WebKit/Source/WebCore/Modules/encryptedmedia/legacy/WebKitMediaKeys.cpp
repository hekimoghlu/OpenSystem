/*
 *
 * Copyright (c) NeXTHub Corporation. All Rights Reserved. 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Author: Tunjay Akbarli
 * Date: Wednesday, January 1, 2025.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201, 
 * Middletown, DE 19709, New Castle County, USA.
 *
 */
#include "config.h"
#include "WebKitMediaKeys.h"

#if ENABLE(LEGACY_ENCRYPTED_MEDIA)

#include "HTMLMediaElement.h"
#include "WebKitMediaKeySession.h"
#include <JavaScriptCore/Uint8Array.h>

namespace WebCore {

ExceptionOr<Ref<WebKitMediaKeys>> WebKitMediaKeys::create(const String& keySystem)
{
    // From <http://dvcs.w3.org/hg/html-media/raw-file/tip/encrypted-media/encrypted-media.html#dom-media-keys-constructor>:
    // The MediaKeys(keySystem) constructor must run the following steps:

    // 1. If keySystem is null or an empty string, throw an InvalidAccessError exception and abort these steps.
    if (keySystem.isEmpty())
        return Exception { ExceptionCode::InvalidAccessError };

    // 2. If keySystem is not one of the user agent's supported Key Systems, throw a NotSupportedError and abort these steps.
    if (!LegacyCDM::supportsKeySystem(keySystem))
        return Exception { ExceptionCode::NotSupportedError };

    // 3. Let cdm be the content decryption module corresponding to keySystem.
    // 4. Load cdm if necessary.
    Ref cdm = LegacyCDM::create(keySystem).releaseNonNull();

    // 5. Create a new MediaKeys object.
    // 5.1 Let the keySystem attribute be keySystem.
    // 6. Return the new object to the caller.
    return adoptRef(*new WebKitMediaKeys(keySystem, WTFMove(cdm)));
}

WebKitMediaKeys::WebKitMediaKeys(const String& keySystem, Ref<LegacyCDM>&& cdm)
    : m_keySystem(keySystem)
    , m_cdm(WTFMove(cdm))
{
    m_cdm->setClient(this);
}

WebKitMediaKeys::~WebKitMediaKeys()
{
    // From <http://dvcs.w3.org/hg/html-media/raw-file/tip/encrypted-media/encrypted-media.html#dom-media-keys-constructor>:
    // When destroying a MediaKeys object, follow the steps in close().
    for (auto& session : m_sessions) {
        session->close();
        session->detachKeys();
    }

    m_cdm->setClient(nullptr);
}

ExceptionOr<Ref<WebKitMediaKeySession>> WebKitMediaKeys::createSession(Document& document, const String& type, Ref<Uint8Array>&& initData)
{
    // From <http://www.w3.org/TR/2014/WD-encrypted-media-20140218/#dom-createsession>:
    // The createSession(type, initData) method must run the following steps:
    // Note: The contents of initData are container-specific Initialization Data.

    // 1. If contentType is null or an empty string, throw an InvalidAccessError exception and abort these steps.
    if (type.isEmpty())
        return Exception { ExceptionCode::InvalidAccessError };

    // 2. If initData is an empty array, throw an InvalidAccessError exception and abort these steps.
    if (!initData->length())
        return Exception { ExceptionCode::InvalidAccessError };

    // 3. If type contains a MIME type that is not supported or is not supported by the keySystem, throw
    // a NotSupportedError exception and abort these steps.
    if (!m_cdm->supportsMIMEType(type))
        return Exception { ExceptionCode::NotSupportedError };

    // 4. Create a new MediaKeySession object.
    // 4.1 Let the keySystem attribute be keySystem.
    // 4.2 Let the sessionId attribute be a unique Session ID string. It may be generated by cdm.
    auto session = WebKitMediaKeySession::create(document, *this, m_keySystem);

    m_sessions.append(session.copyRef());

    // 5. Schedule a task to initialize the session, providing contentType, initData, and the new object.
    session->generateKeyRequest(type, WTFMove(initData));

    // 6. Return the new object to the caller.
    return WTFMove(session);
}

bool WebKitMediaKeys::isTypeSupported(const String& keySystem, const String& mimeType)
{
    // 1. If keySystem contains an unrecognized or unsupported Key System, return false and abort these steps.
    // Key system string comparison is case-sensitive.
    if (keySystem.isEmpty() || !LegacyCDM::supportsKeySystem(keySystem))
        return false;

    // 2. If type is null or an empty string, return true and abort these steps.
    if (mimeType.isEmpty())
        return true;

    // 3. If the Key System specified by keySystem does not support decrypting the container and/or codec
    // specified by type, return false and abort these steps.
    if (!LegacyCDM::keySystemSupportsMimeType(keySystem, mimeType))
        return false;

    // 4. Return true;
    return true;
}

void WebKitMediaKeys::setMediaElement(HTMLMediaElement* element)
{
    if (RefPtr player = m_mediaElement? m_mediaElement->player() : nullptr) {
        player->setCDMSession(nullptr);
        player->setCDM(nullptr);
    }

    m_mediaElement = element;

    if (RefPtr player = m_mediaElement? m_mediaElement->player() : nullptr) {
        player->setCDM(m_cdm.ptr());
        if (!m_sessions.isEmpty())
            player->setCDMSession(m_sessions.last()->session());
    }
}

RefPtr<MediaPlayer> WebKitMediaKeys::cdmMediaPlayer(const LegacyCDM*) const
{
    if (!m_mediaElement)
        return nullptr;
    return m_mediaElement->player();
}

void WebKitMediaKeys::keyAdded()
{
    if (m_mediaElement)
        m_mediaElement->keyAdded();
}

RefPtr<ArrayBuffer> WebKitMediaKeys::cachedKeyForKeyId(const String& keyId) const
{
    for (auto& session : m_sessions) {
        if (auto key = session->cachedKeyForKeyId(keyId))
            return key;
    }
    return nullptr;
}

}

#endif
