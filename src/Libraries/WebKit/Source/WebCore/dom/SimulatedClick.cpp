/*
 *
 * Copyright (c) NeXTHub Corporation. All Rights Reserved. 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Author: Tunjay Akbarli
 * Date: Wednesday, April 26, 2023.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201, 
 * Middletown, DE 19709, New Castle County, USA.
 *
 */
#include "config.h"
#include "SimulatedClick.h"

#include "DOMRect.h"
#include "DataTransfer.h"
#include "Document.h"
#include "Element.h"
#include "EventNames.h"
#include "MouseEvent.h"
#include "PlatformMouseEvent.h"
#include "PointerEvent.h"
#include "PointerID.h"
#include <wtf/NeverDestroyed.h>
#include <wtf/TZoneMallocInlines.h>

namespace WebCore {

class SimulatedMouseEvent : public MouseEvent {
    WTF_MAKE_TZONE_OR_ISO_ALLOCATED(SimulatedMouseEvent);
public:
    static Ref<SimulatedMouseEvent> create(const AtomString& eventType, RefPtr<WindowProxy>&& view, RefPtr<Event>&& underlyingEvent, Element& target, SimulatedClickSource source)
    {
        return adoptRef(*new SimulatedMouseEvent(eventType, WTFMove(view), WTFMove(underlyingEvent), target, source));
    }

private:
    SimulatedMouseEvent(const AtomString& eventType, RefPtr<WindowProxy>&& view, RefPtr<Event>&& underlyingEvent, Element& target, SimulatedClickSource source)
        : MouseEvent(EventInterfaceType::MouseEvent, eventType, CanBubble::Yes, IsCancelable::Yes, IsComposed::Yes,
            underlyingEvent ? underlyingEvent->timeStamp() : MonotonicTime::now(), WTFMove(view), /* detail */ 0,
            { }, { }, 0, 0, modifiersFromUnderlyingEvent(underlyingEvent), MouseButton::Left, 0, nullptr, 0, SyntheticClickType::NoTap, { }, { }, IsSimulated::Yes,
            source == SimulatedClickSource::UserAgent ? IsTrusted::Yes : IsTrusted::No)
    {
        setUnderlyingEvent(underlyingEvent.get());

        if (auto* mouseEvent = dynamicDowncast<MouseEvent>(this->underlyingEvent())) {
            m_screenLocation = mouseEvent->screenLocation();
            initCoordinates(mouseEvent->clientLocation());
        } else if (source == SimulatedClickSource::UserAgent) {
            // If there is no underlying event, we only populate the coordinates for events coming
            // from the user agent (e.g. accessibility). For those coming from JavaScript (e.g.
            // (element.click()), the coordinates will be 0, similarly to Firefox and Chrome.
            // Note that the call to screenRect() causes a synchronous IPC with the UI process.
            m_screenLocation = target.screenRect().center();
            initCoordinates(LayoutPoint(target.boundingClientRect().center()));
        }
    }

    static OptionSet<Modifier> modifiersFromUnderlyingEvent(const RefPtr<Event>& underlyingEvent)
    {
        UIEventWithKeyState* keyStateEvent = findEventWithKeyState(underlyingEvent.get());
        if (!keyStateEvent)
            return { };
        return keyStateEvent->modifierKeys();
    }
};

WTF_MAKE_TZONE_OR_ISO_ALLOCATED_IMPL(SimulatedMouseEvent);

// https://www.w3.org/TR/pointerevents3/#pointerevent-interface
class SimulatedPointerEvent final : public PointerEvent {
    WTF_MAKE_TZONE_OR_ISO_ALLOCATED(SimulatedPointerEvent);
public:
    static Ref<SimulatedPointerEvent> create(const AtomString& type, const SimulatedMouseEvent& event, RefPtr<Event>&& underlyingEvent, Element& target, SimulatedClickSource source)
    {
        return adoptRef(*new SimulatedPointerEvent(type, event, WTFMove(underlyingEvent), target, source));
    }

private:
    // If the device type cannot be detected by the user agent, then the value MUST be an empty string.
    static constexpr auto pointerType = ASCIILiteral { ""_s };

    // The pointerId value of -1 MUST be reserved and used to indicate events that were generated by something other than a pointing device.
    static constexpr auto pointerID = static_cast<PointerID>(-1);

    SimulatedPointerEvent(const AtomString& type, const SimulatedMouseEvent& event, RefPtr<Event>&& underlyingEvent, Element& target, SimulatedClickSource source)
        : PointerEvent(type, MouseButton::Left, event, pointerID, pointerType, PointerEvent::typeCanBubble(type), PointerEvent::typeIsCancelable(type), PointerEvent::typeIsComposed(type))
    {
        setUnderlyingEvent(underlyingEvent.get());

        if (RefPtr pointerEvent = dynamicDowncast<PointerEvent>(this->underlyingEvent())) {
            m_screenLocation = pointerEvent->screenLocation();
            initCoordinates(pointerEvent->clientLocation());
        } else if (source == SimulatedClickSource::UserAgent) {
            // If there is no underlying event, we only populate the coordinates for events coming
            // from the user agent (e.g. accessibility). For those coming from JavaScript (e.g.
            // (element.click()), the coordinates will be 0, similarly to Firefox and Chrome.
            // Note that the call to screenRect() causes a synchronous IPC with the UI process.
            m_screenLocation = target.screenRect().center();
            initCoordinates(LayoutPoint(target.boundingClientRect().center()));
        }
    }
};

WTF_MAKE_TZONE_OR_ISO_ALLOCATED_IMPL(SimulatedPointerEvent);

static void simulateMouseEvent(const AtomString& eventType, Element& element, Event* underlyingEvent, SimulatedClickSource source)
{
    element.dispatchEvent(SimulatedMouseEvent::create(eventType, element.document().protectedWindowProxy().get(), underlyingEvent, element, source));
}

static void simulatePointerEvent(const AtomString& eventType, Element& element, Event* underlyingEvent, SimulatedClickSource source)
{
    Ref mouseEvent = SimulatedMouseEvent::create(eventType, element.document().protectedWindowProxy().get(), underlyingEvent, element, source);
    Ref pointerEvent = SimulatedPointerEvent::create(eventType, mouseEvent.get(), underlyingEvent, element, source);

    element.dispatchEvent(pointerEvent.get());
}

bool simulateClick(Element& element, Event* underlyingEvent, SimulatedClickMouseEventOptions mouseEventOptions, SimulatedClickVisualOptions visualOptions, SimulatedClickSource creationOptions)
{
    if (element.isDisabledFormControl())
        return false;

    static MainThreadNeverDestroyed<UncheckedKeyHashSet<Ref<Element>>> elementsDispatchingSimulatedClicks;
    if (!elementsDispatchingSimulatedClicks.get().add(element).isNewEntry)
        return false;

    auto& eventNames = WebCore::eventNames();
    if (mouseEventOptions != SendNoEvents)
        simulateMouseEvent(eventNames.mousedownEvent, element, underlyingEvent, creationOptions);
    if (mouseEventOptions != SendNoEvents || visualOptions == ShowPressedLook)
        element.setActive(true);
    if (mouseEventOptions != SendNoEvents)
        simulateMouseEvent(eventNames.mouseupEvent, element, underlyingEvent, creationOptions);
    element.setActive(false);

    simulatePointerEvent(eventNames.clickEvent, element, underlyingEvent, creationOptions);

    elementsDispatchingSimulatedClicks.get().remove(element);
    return true;
}

} // namespace WebCore
