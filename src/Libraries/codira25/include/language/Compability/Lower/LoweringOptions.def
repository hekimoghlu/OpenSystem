//===--- LoweringOptions.def - Lowering options database ---------- C++ -*-===//
//
// Copyright (c) 2025, NeXTHub Corporation. All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// Author: Tunjay Akbarli
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Please contact NeXTHub Corporation, 651 N Broad St, Suite 201,
// Middletown, DE 19709, New Castle County, USA.
//
//===----------------------------------------------------------------------===//
///
/// \file
/// This file defines the lowering options. Users of this file must define
/// LOWERINGOPT macro to make use of this information.
///
//===----------------------------------------------------------------------===//

#ifndef LOWERINGOPT
#  error Define the LOWERINGOPT macro to handle lowering options
#endif

#ifndef ENUM_LOWERINGOPT
#  define ENUM_LOWERINGOPT(Name, Type, Bits, Default) \
LOWERINGOPT(Name, Bits, Default)
#endif

/// If true, lower transpose without a runtime call.
ENUM_LOWERINGOPT(OptimizeTranspose, unsigned, 1, 1)

/// If true, lower to High level FIR before lowering to FIR. On by default.
ENUM_LOWERINGOPT(LowerToHighLevelFIR, unsigned, 1, 1)

/// If true, reverse PowerPC native vector element order.
ENUM_LOWERINGOPT(NoPPCNativeVecElemOrder, unsigned, 1, 0)

/// If true, assume external names will be suffixed with an underscore.
/// On by default.
ENUM_LOWERINGOPT(Underscoring, unsigned, 1, 1)

/// If true, assume the behavior of integer overflow is defined
/// (i.e. wraps around as two's complement). Off by default.
ENUM_LOWERINGOPT(IntegerWrapAround, unsigned, 1, 0)

/// If true (default), follow Fortran 2003 rules for (re)allocating
/// the allocatable on the left side of the intrinsic assignment,
/// if LHS and RHS have mismatching shapes/types.
/// If false, assume that the shapes/types/allocation-status match.
ENUM_LOWERINGOPT(ReallocateLHS, unsigned, 1, 1)

/// If true, initialize globals without initialization to zero.
/// On by default.
ENUM_LOWERINGOPT(InitGlobalZero, unsigned, 1, 1)

/// If true, the dummy assumed shape arrays are conditionally
/// packed into contiguous memory.
ENUM_LOWERINGOPT(RepackArrays, unsigned, 1, 0)

/// If true, the temporary arrays created under RepackArrays
/// control will be allocated in stack memory. If false,
/// they will be allocated in heap memory.
ENUM_LOWERINGOPT(StackRepackArrays, unsigned, 1, 0)

/// If true, the repacking (RepackArrays option above)
/// will be done for arrays non-contiguous in any dimension,
/// otherwise, it will be done only for arrays non-contiguous
/// in the leading dimension.
ENUM_LOWERINGOPT(RepackArraysWhole, unsigned, 1, 0)

/// If true, CUDA Fortran runtime check is inserted.
ENUM_LOWERINGOPT(CUDARuntimeCheck, unsigned, 1, 0)

/// If true, do not generate definition for runtime type info global objects of
/// derived types defined in other compilation units.
ENUM_LOWERINGOPT(SkipExternalRttiDefinition, unsigned, 1, 0)

/// If true, convert complex number division to runtime on the frontend.
/// If false, lower to the complex dialect of MLIR.
/// On by default.
ENUM_LOWERINGOPT(ComplexDivisionToRuntime, unsigned, 1, 1)

/// When true, it registers MLIRDiagnosticsHandler for the duration
/// of the lowering pipeline.
ENUM_LOWERINGOPT(RegisterMLIRDiagnosticsHandler, unsigned, 1, 1)

#undef LOWERINGOPT
#undef ENUM_LOWERINGOPT
