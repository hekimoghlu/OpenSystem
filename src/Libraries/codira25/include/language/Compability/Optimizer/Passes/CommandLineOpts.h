/*
 *
 * Copyright (c) NeXTHub Corporation. All Rights Reserved. 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Author: Tunjay Akbarli
 * Date: Tuesday, January 23, 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201, 
 * Middletown, DE 19709, New Castle County, USA.
 *
 */

//===-- CommandLineOpts.h -- shared command line options --------*- C++ -*-===//
//
// Copyright (c) 2025, NeXTHub Corporation. All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// Author: Tunjay Akbarli
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Please contact NeXTHub Corporation, 651 N Broad St, Suite 201,
// Middletown, DE 19709, New Castle County, USA.
//
//===----------------------------------------------------------------------===//

/// This file declares some shared command-line options that can be used when
/// debugging the test tools.

#ifndef LANGUAGE_COMPABILITY_OPTIMIZER_PASSES_COMMANDLINEOPTS_H
#define LANGUAGE_COMPABILITY_OPTIMIZER_PASSES_COMMANDLINEOPTS_H

#include "toolchain/Frontend/Debug/Options.h"
#include "toolchain/Passes/OptimizationLevel.h"
#include "toolchain/Support/CommandLine.h"

/// Shared option in tools to control whether dynamically sized array
/// allocations should always be on the heap.
extern toolchain::cl::opt<bool> dynamicArrayStackToHeapAllocation;

/// Shared option in tools to set a maximum value for the number of elements in
/// a compile-time sized array that can be allocated on the stack.
extern toolchain::cl::opt<std::size_t> arrayStackAllocationThreshold;

/// Shared option in tools to ignore missing runtime type descriptor objects
/// when translating FIR to LLVM. The resulting program will crash if the
/// runtime needs the derived type descriptors, this is only a debug option to
/// allow compiling manually written FIR programs involving derived types
/// without having to write the derived type descriptors which are normally
/// generated by the frontend.
extern toolchain::cl::opt<bool> ignoreMissingTypeDescriptors;

/// Shared option in tools to only generate rtti static object definitions for
/// derived types defined in the current compilation unit. Derived type
/// descriptor object for types defined in other objects will only be declared
/// as external. This also changes the linkage of rtti objects defined in the
/// current compilation unit from linkonce_odr to external so that unused rtti
/// objects are retained and can be accessed from other compilation units. This
/// is an experimental option to explore compilation speed improvements and is
/// an ABI breaking change because of the linkage change.
/// It will also require linking against module file objects of modules defining
/// only types (even for trivial types without type bound procedures, which
/// differs from most compilers).
extern toolchain::cl::opt<bool> skipExternalRttiDefinition;

/// Default optimization level used to create Flang pass pipeline is O0.
extern toolchain::OptimizationLevel defaultOptLevel;

extern toolchain::codegenoptions::DebugInfoKind noDebugInfo;

/// Optimizer Passes
extern toolchain::cl::opt<bool> disableCfgConversion;
extern toolchain::cl::opt<bool> disableFirAvc;
extern toolchain::cl::opt<bool> disableFirMao;

extern toolchain::cl::opt<bool> disableFirAliasTags;
extern toolchain::cl::opt<bool> useOldAliasTags;

/// CodeGen Passes
extern toolchain::cl::opt<bool> disableCodeGenRewrite;
extern toolchain::cl::opt<bool> disableTargetRewrite;
extern toolchain::cl::opt<bool> disableDebugInfo;
extern toolchain::cl::opt<bool> disableFirToLlvmIr;
extern toolchain::cl::opt<bool> disableLlvmIrToLlvm;
extern toolchain::cl::opt<bool> disableBoxedProcedureRewrite;

extern toolchain::cl::opt<bool> disableExternalNameConversion;
extern toolchain::cl::opt<bool> enableConstantArgumentGlobalisation;
extern toolchain::cl::opt<bool> disableCompilerGeneratedNamesConversion;

#endif // FORTRAN_OPTIMIZER_PASSES_COMMANDLINE_OPTS_H
