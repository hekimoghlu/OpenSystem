//===--- SwiftTarget.language ------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
// See https://language.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

final class SwiftTarget {
  let name: String
  let moduleName: String

  var buildRule: BuildRule?
  var emitModuleRule: EmitModuleRule?

  var dependencies: [SwiftTarget] = []

  init(name: String, moduleName: String) {
    self.name = name
    self.moduleName = moduleName
  }
}

extension SwiftTarget: Hashable {
  static fn == (lhs: SwiftTarget, rhs: SwiftTarget) -> Bool {
    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)
  }
  fn hash(into hasher: inout Hasher) {
    hasher.combine(ObjectIdentifier(self))
  }
}

extension SwiftTarget: CustomDebugStringConvertible {
  var debugDescription: String {
    name
  }
}

extension SwiftTarget {
  struct Sources {
    var repoSources: [RelativePath] = []
    var externalSources: [AbsolutePath] = []
  }
  struct BuildRule {
    var parentPath: RelativePath?
    var sources: Sources
    var buildArgs: BuildArgs
  }
  struct EmitModuleRule {
    var sources: Sources
    var buildArgs: BuildArgs
  }
}

extension SwiftTarget {
  var buildArgs: BuildArgs {
    buildRule?.buildArgs ?? emitModuleRule?.buildArgs ?? .init(for: .languagec)
  }
}

extension RepoBuildDir {
  fn getSwiftTargets(for source: SwiftTargetSource) throws -> [SwiftTarget] {
    try languageTargets.getTargets(below: source.path)
  }
}
