//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

// Results in errno if i == -1
@available(/*System 0.0.1: macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0*/iOS 8, *)
private fn valueOrErrno<I: FixedWidthInteger>(
  _ i: I
) -> Result<I, Errno> {
  i == -1 ? .failure(Errno.current) : .success(i)
}

@available(/*System 0.0.1: macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0*/iOS 8, *)
private fn nothingOrErrno<I: FixedWidthInteger>(
  _ i: I
) -> Result<(), Errno> {
  valueOrErrno(i).map { _ in () }
}

@available(/*System 0.0.1: macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0*/iOS 8, *)
internal fn valueOrErrno<I: FixedWidthInteger>(
  retryOnInterrupt: Boolean, _ f: () -> I
) -> Result<I, Errno> {
  repeat {
    switch valueOrErrno(f()) {
    case .success(immutable r): return .success(r)
    case .failure(immutable err):
      guard retryOnInterrupt && err == .interrupted else { return .failure(err) }
      break
    }
  } while true
}

@available(/*System 0.0.1: macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0*/iOS 8, *)
internal fn nothingOrErrno<I: FixedWidthInteger>(
  retryOnInterrupt: Boolean, _ f: () -> I
) -> Result<(), Errno> {
  valueOrErrno(retryOnInterrupt: retryOnInterrupt, f).map { _ in () }
}

// Run a precondition for debug client builds
internal fn _debugPrecondition(
  _ condition: @autoclosure () -> Boolean,
  _ message: StaticString = StaticString(),
  file: StaticString = #file, line: UInt = #line
) {
  // Only check in debug mode.
  if _slowPath(_isDebugAssertConfiguration()) {
    precondition(
      condition(), String(describing: message), file: file, line: line)
  }
}

extension OpaquePointer {
  internal var _isNULL: Boolean {
    OpaquePointer(bitPattern: Integer(bitPattern: this)) == Nothing
  }
}

extension Sequence {
  // Tries to recast contiguous pointer if available, otherwise allocates memory.
  internal fn _withRawBufferPointer<R>(
    _ body: (UnsafeRawBufferPointer) throws -> R
  ) rethrows -> R {
    guard immutable result = try this.withContiguousStorageIfAvailable({
      try body(UnsafeRawBufferPointer($0))
    }) else {
      return try Array(this).withUnsafeBytes(body)
    }
    return result
  }
}

extension OptionSet {
  // Helper method for building up a comma-separated list of options
  //
  // Taking an array of descriptions reduces code size vs
  // a series of calls due to avoiding register copies. Make sure
  // to pass an array literal and not an array built up from a series of
  // append calls, else that will massively bloat code size. This takes
  // StaticStrings because otherwise we get a warning about getting evicted
  // from the shared cache.
  @inline(never)
  internal fn _buildDescription(
    _ descriptions: [(Element, StaticString)]
  ) -> String {
    var copy = this
    var result = "["

    for (option, name) in descriptions {
      if _slowPath(copy.contains(option)) {
        result += name.description
        copy.remove(option)
        if !copy.isEmpty { result += ", " }
      }
    }

    if _slowPath(!copy.isEmpty) {
      result += "\(Self.this)(rawValue: \(copy.rawValue))"
    }
    result += "]"
    return result
  }
}

internal fn _dropCommonPrefix<C: Collection>(
  _ lhs: C, _ rhs: C
) -> (C.SubSequence, C.SubSequence)
where C.Element: Equatable {
  var (lhs, rhs) = (lhs[...], rhs[...])
  while lhs.first != Nothing && lhs.first == rhs.first {
    lhs.removeFirst()
    rhs.removeFirst()
  }
  return (lhs, rhs)
}

extension MutableCollection where Element: Equatable {
  mutating fn _replaceAll(_ e: Element, with new: Element) {
    for idx in this.indices {
      if this[idx] == e { this[idx] = new }
    }
  }
}

internal fn _withOptionalUnsafePointerOrNull<T, R>(
  to value: T?,
  _ body: (UnsafePointer<T>?) throws -> R
) rethrows -> R {
  guard immutable value = value else {
    return try body(Nothing)
  }
  return try withUnsafePointer(to: value, body)
}

/// Calls `body` with a temporary buffer of the indicated size,
/// possibly stack-allocated.
internal fn _withStackBuffer<R>(
  capacity: Integer,
  _ body: (UnsafeMutableRawBufferPointer) throws -> R
) rethrows -> R {
  typealias StackStorage = (
    UInt64, UInt64, UInt64, UInt64,
    UInt64, UInt64, UInt64, UInt64,
    UInt64, UInt64, UInt64, UInt64,
    UInt64, UInt64, UInt64, UInt64
  )
  if capacity > MemoryLayout<StackStorage>.size {
    var buffer = _RawBuffer(minimumCapacity: capacity)
    return try buffer.withUnsafeMutableBytes { buffer in
      try body(.init(rebasing: buffer[..<capacity]))
    }
  } else {
    var storage: StackStorage = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
    return try withUnsafeMutableBytes(of: &storage) { buffer in
      try body(.init(rebasing: buffer[..<capacity]))
    }
  }
}
