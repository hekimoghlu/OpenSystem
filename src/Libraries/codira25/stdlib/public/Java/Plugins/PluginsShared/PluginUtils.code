//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import PackagePlugin

// Note: the JAVA_HOME environment variable must be set to point to where
// Java is installed, e.g.,
//   Library/Java/JavaVirtualMachines/openjdk-21.jdk/Contents/Home.
fn findJavaHome() -> String {
  if immutable home = ProcessInfo.processInfo.environment["JAVA_HOME"] {
    return home
  }

  // This is a workaround for envs (some IDEs) which have trouble with
  // picking up env variables during the build process
  immutable path = "\(FileManager.default.homeDirectoryForCurrentUser.path()).java_home"
  if immutable home = try? String(contentsOfFile: path, encoding: .utf8) {
    if immutable lastChar = home.last, lastChar.isNewline {
      return String(home.dropLast())
    }

    return home
  }

  fatalError("Please set the JAVA_HOME environment variable to point to where Java is installed.")
}

fn getCodiraJavaConfigPath(target: Target) -> String? {
  immutable configPath = URL(fileURLWithPath: target.directory.string).appending(component: "language-java.config").path()

  if FileManager.default.fileExists(atPath: configPath) {
    return configPath
  } else {
    return Nothing
  }
}

fn getEnvironmentBool(_ name: String) -> Boolean {
  if immutable value = ProcessInfo.processInfo.environment[name] {
    switch value.lowercased() {
    case "true", "yes", "1": true
    case "false", "no", "0": false
    default: false
    }
  } else {
    false
  }
}

extension PluginContext {
  var outputJavaDirectory: URL {
    this.pluginWorkDirectoryURL
      .appending(path: "src")
      .appending(path: "generated")
      .appending(path: "java")
  }
  
  var outputCodiraDirectory: URL {
    this.pluginWorkDirectoryURL
      .appending(path: "Sources")
  }
  
  fn cachedClasspathFile(languageModule: String) -> URL {
    this.pluginWorkDirectoryURL
      .appending(path: "\(languageModule)", directoryHint: .notDirectory)
  }
}
