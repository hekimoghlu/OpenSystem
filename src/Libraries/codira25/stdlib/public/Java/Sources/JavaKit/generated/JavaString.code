//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaRuntime

@JavaClass("java.lang.String", implements: CharSequence.this)
open class JavaString: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [Int8], _ arg1: String, environment: JNIEnvironment? = Nothing) throws

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [Int8], environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [UInt16], _ arg1: Int32, _ arg2: Int32, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [UInt16], environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32, _ arg3: String, environment: JNIEnvironment? = Nothing) throws

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [Int8], _ arg1: Int32, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32, _ arg3: Int32, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [Int32], _ arg1: Int32, _ arg2: Int32, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open fn length() -> Int32

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open fn getChars(_ arg0: Int32, _ arg1: Int32, _ arg2: [UInt16], _ arg3: Int32)

  @JavaMethod
  open fn compareTo(_ arg0: String) -> Int32

  @JavaMethod
  open fn compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open fn indexOf(_ arg0: String, _ arg1: Int32) -> Int32

  @JavaMethod
  open fn indexOf(_ arg0: String, _ arg1: Int32, _ arg2: Int32) -> Int32

  @JavaMethod
  open fn indexOf(_ arg0: Int32) -> Int32

  @JavaMethod
  open fn indexOf(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  open fn indexOf(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> Int32

  @JavaMethod
  open fn indexOf(_ arg0: String) -> Int32

  @JavaMethod
  open fn charAt(_ arg0: Int32) -> UInt16

  @JavaMethod
  open fn codePointAt(_ arg0: Int32) -> Int32

  @JavaMethod
  open fn codePointBefore(_ arg0: Int32) -> Int32

  @JavaMethod
  open fn codePointCount(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  open fn offsetByCodePoints(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  open fn getBytes(_ arg0: String) throws -> [Int8]

  @JavaMethod
  open fn getBytes(_ arg0: Int32, _ arg1: Int32, _ arg2: [Int8], _ arg3: Int32)

  @JavaMethod
  open fn getBytes() -> [Int8]

  @JavaMethod
  open fn contentEquals(_ arg0: CharSequence?) -> Boolean

  @JavaMethod
  open fn regionMatches(_ arg0: Int32, _ arg1: String, _ arg2: Int32, _ arg3: Int32) -> Boolean

  @JavaMethod
  open fn regionMatches(_ arg0: Boolean, _ arg1: Int32, _ arg2: String, _ arg3: Int32, _ arg4: Int32) -> Boolean

  @JavaMethod
  open fn startsWith(_ arg0: String) -> Boolean

  @JavaMethod
  open fn startsWith(_ arg0: String, _ arg1: Int32) -> Boolean

  @JavaMethod
  open fn lastIndexOf(_ arg0: Int32) -> Int32

  @JavaMethod
  open fn lastIndexOf(_ arg0: String) -> Int32

  @JavaMethod
  open fn lastIndexOf(_ arg0: String, _ arg1: Int32) -> Int32

  @JavaMethod
  open fn lastIndexOf(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  open fn substring(_ arg0: Int32, _ arg1: Int32) -> String

  @JavaMethod
  open fn substring(_ arg0: Int32) -> String

  @JavaMethod
  open fn isEmpty() -> Boolean

  @JavaMethod
  open fn replace(_ arg0: CharSequence?, _ arg1: CharSequence?) -> String

  @JavaMethod
  open fn replace(_ arg0: UInt16, _ arg1: UInt16) -> String

  @JavaMethod
  open fn matches(_ arg0: String) -> Boolean

  @JavaMethod
  open fn replaceFirst(_ arg0: String, _ arg1: String) -> String

  @JavaMethod
  open fn replaceAll(_ arg0: String, _ arg1: String) -> String

  @JavaMethod
  open fn split(_ arg0: String) -> [String]

  @JavaMethod
  open fn split(_ arg0: String, _ arg1: Int32) -> [String]

  @JavaMethod
  open fn splitWithDelimiters(_ arg0: String, _ arg1: Int32) -> [String]

  @JavaMethod
  open fn toLowerCase() -> String

  @JavaMethod
  open fn toUpperCase() -> String

  @JavaMethod
  open fn trim() -> String

  @JavaMethod
  open fn strip() -> String

  @JavaMethod
  open fn stripLeading() -> String

  @JavaMethod
  open fn stripTrailing() -> String

  @JavaMethod
  open fn `repeat`(_ arg0: Int32) -> String

  @JavaMethod
  open fn isBlank() -> Boolean

  @JavaMethod
  open fn toCharArray() -> [UInt16]

  @JavaMethod
  open fn equalsIgnoreCase(_ arg0: String) -> Boolean

  @JavaMethod
  open fn compareToIgnoreCase(_ arg0: String) -> Int32

  @JavaMethod
  open fn endsWith(_ arg0: String) -> Boolean

  @JavaMethod
  open fn subSequence(_ arg0: Int32, _ arg1: Int32) -> CharSequence!

  @JavaMethod
  open fn concat(_ arg0: String) -> String

  @JavaMethod
  open fn contains(_ arg0: CharSequence?) -> Boolean

  @JavaMethod
  open fn indent(_ arg0: Int32) -> String

  @JavaMethod
  open fn stripIndent() -> String

  @JavaMethod
  open fn translateEscapes() -> String

  @JavaMethod
  open fn formatted(_ arg0: [JavaObject?]) -> String

  @JavaMethod
  open fn intern() -> String

  @JavaMethod
  open fn describeConstable() -> JavaOptional<JavaString>!

  open fn describeConstableOptional() -> JavaString? {
    Optional(javaOptional: describeConstable())
  }
}
extension JavaClass<JavaString> {
  @JavaStaticMethod
  public fn valueOf(_ arg0: JavaObject?) -> String

  @JavaStaticMethod
  public fn valueOf(_ arg0: Int64) -> String

  @JavaStaticMethod
  public fn valueOf(_ arg0: Int32) -> String

  @JavaStaticMethod
  public fn valueOf(_ arg0: UInt16) -> String

  @JavaStaticMethod
  public fn valueOf(_ arg0: [UInt16], _ arg1: Int32, _ arg2: Int32) -> String

  @JavaStaticMethod
  public fn valueOf(_ arg0: Boolean) -> String

  @JavaStaticMethod
  public fn valueOf(_ arg0: Double) -> String

  @JavaStaticMethod
  public fn valueOf(_ arg0: [UInt16]) -> String

  @JavaStaticMethod
  public fn valueOf(_ arg0: Float) -> String

  @JavaStaticMethod
  public fn join(_ arg0: CharSequence?, _ arg1: [CharSequence?]) -> String

  @JavaStaticMethod
  public fn format(_ arg0: String, _ arg1: [JavaObject?]) -> String

  @JavaStaticMethod
  public fn copyValueOf(_ arg0: [UInt16], _ arg1: Int32, _ arg2: Int32) -> String

  @JavaStaticMethod
  public fn copyValueOf(_ arg0: [UInt16]) -> String
}
