//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaRuntime

@JavaClass("java.lang.Boolean")
open class JavaBoolean: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Boolean, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open fn compareTo(_ arg0: JavaBoolean?) -> Int32

  @JavaMethod
  open fn compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open fn booleanValue() -> Boolean
}
extension JavaClass<JavaBoolean> {
  @JavaStaticField(isFinal: true)
  public var TRUE: JavaBoolean!

  @JavaStaticField(isFinal: true)
  public var FALSE: JavaBoolean!

  @JavaStaticField(isFinal: true)
  public var TYPE: JavaClass<JavaBoolean>!

  @JavaStaticMethod
  public fn toString(_ arg0: Boolean) -> String

  @JavaStaticMethod
  public fn hashCode(_ arg0: Boolean) -> Int32

  @JavaStaticMethod
  public fn getBoolean(_ arg0: String) -> Boolean

  @JavaStaticMethod
  public fn compare(_ arg0: Boolean, _ arg1: Boolean) -> Int32

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> JavaBoolean!

  @JavaStaticMethod
  public fn valueOf(_ arg0: Boolean) -> JavaBoolean!

  @JavaStaticMethod
  public fn parseBoolean(_ arg0: String) -> Boolean

  @JavaStaticMethod
  public fn logicalAnd(_ arg0: Boolean, _ arg1: Boolean) -> Boolean

  @JavaStaticMethod
  public fn logicalOr(_ arg0: Boolean, _ arg1: Boolean) -> Boolean

  @JavaStaticMethod
  public fn logicalXor(_ arg0: Boolean, _ arg1: Boolean) -> Boolean
}
