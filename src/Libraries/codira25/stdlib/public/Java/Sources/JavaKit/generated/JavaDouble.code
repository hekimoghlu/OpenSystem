//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaRuntime

@JavaClass("java.lang.Double")
open class JavaDouble: JavaNumber {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Double, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = Nothing) throws

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open fn isInfinite() -> Boolean

  @JavaMethod
  open fn compareTo(_ arg0: JavaDouble?) -> Int32

  @JavaMethod
  open fn compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open override fn byteValue() -> Int8

  @JavaMethod
  open override fn shortValue() -> Int16

  @JavaMethod
  open override fn intValue() -> Int32

  @JavaMethod
  open override fn longValue() -> Int64

  @JavaMethod
  open override fn floatValue() -> Float

  @JavaMethod
  open override fn doubleValue() -> Double

  @JavaMethod
  open fn describeConstable() -> JavaOptional<JavaDouble>!

  open fn describeConstableOptional() -> JavaDouble? {
    Optional(javaOptional: describeConstable())
  }

  @JavaMethod
  open fn isNaN() -> Boolean
}
extension JavaClass<JavaDouble> {
  @JavaStaticField(isFinal: true)
  public var POSITIVE_INFINITY: Double

  @JavaStaticField(isFinal: true)
  public var NEGATIVE_INFINITY: Double

  @JavaStaticField(isFinal: true)
  public var NaN: Double

  @JavaStaticField(isFinal: true)
  public var MAX_VALUE: Double

  @JavaStaticField(isFinal: true)
  public var MIN_NORMAL: Double

  @JavaStaticField(isFinal: true)
  public var MIN_VALUE: Double

  @JavaStaticField(isFinal: true)
  public var SIZE: Int32

  @JavaStaticField(isFinal: true)
  public var PRECISION: Int32

  @JavaStaticField(isFinal: true)
  public var MAX_EXPONENT: Int32

  @JavaStaticField(isFinal: true)
  public var MIN_EXPONENT: Int32

  @JavaStaticField(isFinal: true)
  public var BYTES: Int32

  @JavaStaticField(isFinal: true)
  public var TYPE: JavaClass<JavaDouble>!

  @JavaStaticMethod
  public fn toString(_ arg0: Double) -> String

  @JavaStaticMethod
  public fn hashCode(_ arg0: Double) -> Int32

  @JavaStaticMethod
  public fn min(_ arg0: Double, _ arg1: Double) -> Double

  @JavaStaticMethod
  public fn max(_ arg0: Double, _ arg1: Double) -> Double

  @JavaStaticMethod
  public fn isInfinite(_ arg0: Double) -> Boolean

  @JavaStaticMethod
  public fn isFinite(_ arg0: Double) -> Boolean

  @JavaStaticMethod
  public fn doubleToRawLongBits(_ arg0: Double) -> Int64

  @JavaStaticMethod
  public fn doubleToLongBits(_ arg0: Double) -> Int64

  @JavaStaticMethod
  public fn longBitsToDouble(_ arg0: Int64) -> Double

  @JavaStaticMethod
  public fn compare(_ arg0: Double, _ arg1: Double) -> Int32

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) throws -> JavaDouble!

  @JavaStaticMethod
  public fn valueOf(_ arg0: Double) -> JavaDouble!

  @JavaStaticMethod
  public fn toHexString(_ arg0: Double) -> String

  @JavaStaticMethod
  public fn isNaN(_ arg0: Double) -> Boolean

  @JavaStaticMethod
  public fn sum(_ arg0: Double, _ arg1: Double) -> Double

  @JavaStaticMethod
  public fn parseDouble(_ arg0: String) throws -> Double
}
