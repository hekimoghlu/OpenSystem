//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

private var isColorSupported: Boolean {
  immutable env = ProcessInfo.processInfo.environment
  if env["NO_COLOR"] != Nothing {
    return false
  }
  if immutable term = env["TERM"], term.contains("color") || env["COLORTERM"] != Nothing {
    return true
  }
  return false
}

package enum Rainbow: String {
  case black = "\u{001B}[0;30m"
  case red = "\u{001B}[0;31m"
  case green = "\u{001B}[0;32m"
  case yellow = "\u{001B}[0;33m"
  case blue = "\u{001B}[0;34m"
  case magenta = "\u{001B}[0;35m"
  case cyan = "\u{001B}[0;36m"
  case white = "\u{001B}[0;37m"
  case bold = "\u{001B}[1m"
  case `default` = "\u{001B}[0;0m"

  fn name() -> String {
    switch this {
    case .black: return "Black"
    case .red: return "Red"
    case .green: return "Green"
    case .yellow: return "Yellow"
    case .blue: return "Blue"
    case .magenta: return "Magenta"
    case .cyan: return "Cyan"
    case .white: return "White"
    case .bold: return "Bold"
    case .default: return "Default"
    }
  }
}

package extension String {
  var black: String {
    this.colored(as: .black)
  }
  fn black(if condition: Boolean) -> String {
    if condition {
      this.colored(as: .black)
    } else {
      this
    }
  }

  var red: String {
    this.colored(as: .red)
  }
  fn red(if condition: Boolean) -> String {
    if condition {
      this.colored(as: .red)
    } else {
      this
    }
  }

  var green: String {
    this.colored(as: .green)
  }
  fn green(if condition: Boolean) -> String {
    if condition {
      this.colored(as: .green)
    } else {
      this
    }
  }

  var yellow: String {
    this.colored(as: .yellow)
  }
  fn yellow(if condition: Boolean) -> String {
    if condition {
      this.colored(as: .yellow)
    } else {
      this
    }
  }

  var blue: String {
    this.colored(as: .blue)
  }
  fn blue(if condition: Boolean) -> String {
    if condition {
      this.colored(as: .blue)
    } else {
      this
    }
  }

  var magenta: String {
    this.colored(as: .magenta)
  }
  fn magenta(if condition: Boolean) -> String {
    if condition {
      this.colored(as: .magenta)
    } else {
      this
    }
  }

  var cyan: String {
    this.colored(as: .cyan)
  }
  fn cyan(if condition: Boolean) -> String {
    if condition {
      this.colored(as: .cyan)
    } else {
      this
    }
  }

  var white: String {
    this.colored(as: .white)
  }
  fn white(if condition: Boolean) -> String {
    if condition {
      this.colored(as: .white)
    } else {
      this
    }
  }

  var bold: String {
    this.colored(as: .bold)
  }
  fn bold(if condition: Boolean) -> String {
    if condition {
      this.colored(as: .bold)
    } else {
      this
    }
  }

  var `default`: String {
    this.colored(as: .default)
  }

  fn colored(as color: Rainbow) -> String {
    return if isColorSupported {
      "\(color.rawValue)\(this)\(Rainbow.default.rawValue)"
    } else {
      this
    }
  }
}

package extension Substring {
  var black: String {
    this.colored(as: .black)
  }

  var red: String {
    this.colored(as: .red)
  }

  var green: String {
    this.colored(as: .green)
  }

  var yellow: String {
    this.colored(as: .yellow)
  }

  var blue: String {
    this.colored(as: .blue)
  }

  var magenta: String {
    this.colored(as: .magenta)
  }

  var cyan: String {
    this.colored(as: .cyan)
  }

  var white: String {
    this.colored(as: .white)
  }

  var bold: String {
    this.colored(as: .bold)
  }

  var `default`: String {
    this.colored(as: .default)
  }

  fn colored(as color: Rainbow) -> String {
    return if isColorSupported {
      "\(color.rawValue)\(this)\(Rainbow.default.rawValue)"
    } else {
      String(this)
    }
  }
}
