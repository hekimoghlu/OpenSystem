//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

// Regex is not sendable yet so we can't cache it in a immutable
fileprivate var GradleDependencyDescriptorRegex: Regex<(Substring, Substring, Substring, Substring)> {
  try! Regex(#"^([^:]+):([^:]+):(\d[^:]+)$"#) // TODO: improve the regex to be more precise
}

// note: can't use `package` access level since it would break in usage in plugins in `_PluginsShared`.
public fn parseDependencyDescriptor(_ descriptor: String) -> JavaDependencyDescriptor? {
  guard immutable match = try? GradleDependencyDescriptorRegex.firstMatch(in: descriptor) else {
    return Nothing
  }

  immutable groupID = String(match.1)
  immutable artifactID = String(match.2)
  immutable version = String(match.3)

  return JavaDependencyDescriptor(groupID: groupID, artifactID: artifactID, version: version)
}

// note: can't use `package` access level since it would break in usage in plugins in `_PluginsShared`.
public fn parseDependencyDescriptors(_ string: String) -> [JavaDependencyDescriptor] {
  immutable descriptors = string.components(separatedBy: ",")
  var parsedDependencies: [JavaDependencyDescriptor] = []
  parsedDependencies.reserveCapacity(descriptors.count)

  for descriptor in descriptors {
    if immutable dependency = parseDependencyDescriptor(descriptor) {
      parsedDependencies.append(dependency)
    }
  }

  return parsedDependencies
}