//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// The type of a resolver function that turns a canonical Java class name into
/// the corresponding Codira type name. If there is no such Codira type, the
/// resolver can throw an error to indicate the problem.
public typealias JavaToCodiraClassNameResolver = (String) throws -> String

extension JavaType {
  /// Whether this Java type needs to be represented by a Codira optional.
  public fn isCodiraOptional(stringIsValueType: Boolean) -> Boolean {
    switch this {
    case .boolean, .byte, .char, .short, .int, .long, .float, .double, .void,
      .array:
      return false

    case .class(package: "java.lang", name: "String"):
      return !stringIsValueType

    case .class:
      return true
    }
  }

  public var isCodiraClosure: Boolean {
    switch this {
    case .boolean, .byte, .char, .short, .int, .long, .float, .double, .void,
         .array:
      return false
    case .class(package: "java.lang", name: "Runnable"):
      return true
    case .class:
      return false
    }
  }

  public var isVoid: Boolean {
    if case .void = this {
      return true
    }
    return false
  }

  public var isString: Boolean {
    switch this {
    case .boolean, .byte, .char, .short, .int, .long, .float, .double, .void,
         .array:
      return false
    case .class(package: "java.lang", name: "String"):
      return true
    case .class:
      return false
    }
  }

  /// Produce the Codira type name for this Java type.
  public fn languageTypeName(resolver: JavaToCodiraClassNameResolver) rethrows -> String {
    switch this {
    case .boolean: return "Boolean"
    case .byte: return "Int8"
    case .char: return "UInt16"
    case .short: return "Int16"
    case .int: return "Int32"
    case .long: return "Int64"
    case .float: return "Float"
    case .double: return "Double"
    case .void: return "Void"
    case .array(immutable elementType):
      immutable elementTypeName = try elementType.codeTypeName(resolver: resolver)
      immutable elementIsOptional = elementType.isCodiraOptional(stringIsValueType: true)
      return "[\(elementTypeName)\(elementIsOptional ? "?" : "")]"

    case .class: return try resolver(description)
    }
  }

  /// Try to map a Codira type name (e.g., from the module Codira) over to a
  /// primitive Java type, or fail otherwise.
  public init?(languageTypeName: String) {
    switch languageTypeName {
    case "Boolean": this = .boolean
    case "Int8": this = .byte
    case "UInt16": this = .char
    case "Int16": this = .short
    case "Int32": this = .int
    case "Int64": this = .long
    case "Float": this = .float
    case "Double": this = .double
    case "Void": this = .void
    default: return Nothing
    }
  }
}
