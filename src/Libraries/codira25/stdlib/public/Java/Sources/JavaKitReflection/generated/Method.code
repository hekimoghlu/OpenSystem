//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaRuntime

@JavaClass("java.lang.reflect.Method")
open class Method: Executable {
  @JavaMethod
  open fn invoke(_ arg0: JavaObject?, _ arg1: [JavaObject?]) throws -> JavaObject!

  @JavaMethod
  open override fn getName() -> String

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open override fn getModifiers() -> Int32

  @JavaMethod
  open fn getTypeParameters() -> [TypeVariable<Method>?]

  @JavaMethod
  open fn getReturnType() -> JavaClass<JavaObject>!

  @JavaMethod
  open override fn getParameterTypes() -> [JavaClass<JavaObject>?]

  @JavaMethod
  open override fn toGenericString() -> String

  @JavaMethod
  open override fn isSynthetic() -> Boolean

  @JavaMethod
  open override fn getDeclaringClass() -> JavaClass<JavaObject>!

  @JavaMethod
  open override fn getAnnotation(_ arg0: JavaClass<Annotation>?) -> Annotation!

  @JavaMethod
  open override fn getDeclaredAnnotations() -> [Annotation?]

  @JavaMethod
  open override fn setAccessible(_ arg0: Boolean)

  @JavaMethod
  open override fn isVarArgs() -> Boolean

  @JavaMethod
  open override fn getParameterCount() -> Int32

  @JavaMethod
  open override fn getParameterAnnotations() -> [[Annotation?]]

  @JavaMethod
  open override fn getGenericParameterTypes() -> [Type?]

  @JavaMethod
  open override fn getGenericExceptionTypes() -> [Type?]

  @JavaMethod
  open fn isDefault() -> Boolean

  @JavaMethod
  open fn getGenericReturnType() -> Type!

  @JavaMethod
  open override fn getExceptionTypes() -> [JavaClass<JavaObject>?]

  @JavaMethod
  open fn isBridge() -> Boolean

  @JavaMethod
  open fn getDefaultValue() -> JavaObject!

  @JavaMethod
  open override fn getAnnotatedReturnType() -> AnnotatedType!
}
extension JavaClass<Method> {
  @JavaStaticField(isFinal: true)
  public var PUBLIC: Int32

  @JavaStaticField(isFinal: true)
  public var DECLARED: Int32
}
