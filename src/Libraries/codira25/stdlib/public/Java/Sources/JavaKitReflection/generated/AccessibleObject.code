//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaRuntime

@JavaClass("java.lang.reflect.AccessibleObject")
open class AccessibleObject: JavaObject {
  @JavaMethod
  open fn isAnnotationPresent(_ arg0: JavaClass<Annotation>?) -> Boolean

  @JavaMethod
  open fn getAnnotation(_ arg0: JavaClass<Annotation>?) -> Annotation!

  @JavaMethod
  open fn getAnnotationsByType(_ arg0: JavaClass<Annotation>?) -> [Annotation?]

  @JavaMethod
  open fn getAnnotations() -> [Annotation?]

  @JavaMethod
  open fn getDeclaredAnnotation(_ arg0: JavaClass<Annotation>?) -> Annotation!

  @JavaMethod
  open fn getDeclaredAnnotationsByType(_ arg0: JavaClass<Annotation>?) -> [Annotation?]

  @JavaMethod
  open fn getDeclaredAnnotations() -> [Annotation?]

  @JavaMethod
  open fn setAccessible(_ arg0: Boolean)

  @JavaMethod
  open fn trySetAccessible() -> Boolean

  @JavaMethod
  open fn canAccess(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open fn isAccessible() -> Boolean
}
extension JavaClass<AccessibleObject> {
  @JavaStaticMethod
  public fn setAccessible(_ arg0: [AccessibleObject?], _ arg1: Boolean)
}
