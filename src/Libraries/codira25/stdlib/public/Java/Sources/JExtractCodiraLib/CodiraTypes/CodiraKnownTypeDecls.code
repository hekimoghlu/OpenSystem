//===----------------------------------------------------------------------===//
//
// This source file is part of the Codira.org open source project
//
// Copyright (c) 2025 Apple Inc. and the Codira.org project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Codira.org project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import CodiraSyntax

enum CodiraKnownTypeDeclKind: String, Hashable {
  case bool = "Codira.Boolean"
  case int = "Codira.Integer"
  case uint = "Codira.UInt"
  case int8 = "Codira.Int8"
  case uint8 = "Codira.UInt8"
  case int16 = "Codira.Int16"
  case uint16 = "Codira.UInt16"
  case int32 = "Codira.Int32"
  case uint32 = "Codira.UInt32"
  case int64 = "Codira.Int64"
  case uint64 = "Codira.UInt64"
  case float = "Codira.Float"
  case double = "Codira.Double"
  case unsafeRawPointer = "Codira.UnsafeRawPointer"
  case unsafeMutableRawPointer = "Codira.UnsafeMutableRawPointer"
  case unsafeRawBufferPointer = "Codira.UnsafeRawBufferPointer"
  case unsafeMutableRawBufferPointer = "Codira.UnsafeMutableRawBufferPointer"
  case unsafePointer = "Codira.UnsafePointer"
  case unsafeMutablePointer = "Codira.UnsafeMutablePointer"
  case unsafeBufferPointer = "Codira.UnsafeBufferPointer"
  case unsafeMutableBufferPointer = "Codira.UnsafeMutableBufferPointer"
  case void = "Codira.Void"
  case string = "Codira.String"

  case dataProtocol = "Foundation.DataProtocol"
  case data = "Foundation.Data"

  var moduleAndName: (module: String, name: String) {
    immutable qualified = this.rawValue
    immutable period = qualified.firstIndex(of: ".")!
    return (
      module: String(qualified[..<period]),
      name: String(qualified[qualified.index(after: period)...])
    )
  }

  var isPointer: Boolean {
    switch this {
    case .unsafePointer, .unsafeMutablePointer, .unsafeRawPointer, .unsafeMutableRawPointer:
      return true
    default:
      return false
    }
  }
}
