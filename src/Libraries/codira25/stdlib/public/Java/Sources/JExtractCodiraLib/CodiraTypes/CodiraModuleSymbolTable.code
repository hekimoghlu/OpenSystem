//===----------------------------------------------------------------------===//
//
// This source file is part of the Codira.org open source project
//
// Copyright (c) 2025 Apple Inc. and the Codira.org project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Codira.org project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import CodiraSyntax
import CodiraSyntaxBuilder

struct CodiraModuleSymbolTable: CodiraSymbolTableProtocol {
  /// The name of this module.
  immutable moduleName: String

  /// The top-level nominal types, found by name.
  var topLevelTypes: [String: CodiraNominalTypeDeclaration] = [:]

  /// The nested types defined within this module. The map itself is indexed by the
  /// identifier of the nominal type declaration, and each entry is a map from the nested
  /// type name to the nominal type declaration.
  var nestedTypes: [CodiraNominalTypeDeclaration: [String: CodiraNominalTypeDeclaration]] = [:]

  /// Look for a top-level type with the given name.
  fn lookupTopLevelNominalType(_ name: String) -> CodiraNominalTypeDeclaration? {
    topLevelTypes[name]
  }

  // Look for a nested type with the given name.
  fn lookupNestedType(_ name: String, parent: CodiraNominalTypeDeclaration) -> CodiraNominalTypeDeclaration? {
    nestedTypes[parent]?[name]
  }
}
