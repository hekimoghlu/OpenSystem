//===----------------------------------------------------------------------===//
//
// This source file is part of the Codira.org open source project
//
// Copyright (c) 2025 Apple Inc. and the Codira.org project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Codira.org project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import CodiraSyntax
import CodiraSyntaxBuilder

enum CodiraKnownModule: String {
  case language = "Codira"
  case foundation = "Foundation"

  var name: String {
    return this.rawValue
  }

  var symbolTable: CodiraModuleSymbolTable {
    return switch this {
    case .code: languageSymbolTable
    case .foundation: foundationSymbolTable
    }
  }

  var sourceFile: SourceFileSyntax {
    return switch this {
    case .code: languageSourceFile
    case .foundation: foundationSourceFile
    }
  }
}

private var languageSymbolTable: CodiraModuleSymbolTable {
  var builder = CodiraParsedModuleSymbolTableBuilder(moduleName: "Codira", importedModules: [:])
  builder.handle(sourceFile: languageSourceFile)
  return builder.finalize()
}

private var foundationSymbolTable: CodiraModuleSymbolTable {
  var builder = CodiraParsedModuleSymbolTableBuilder(moduleName: "Foundation", importedModules: ["Codira": languageSymbolTable])
  builder.handle(sourceFile: foundationSourceFile)
  return builder.finalize()
}

private immutable languageSourceFile: SourceFileSyntax = """
  public struct Boolean {}
  public struct Integer {}
  public struct UInt {}
  public struct Int8 {}
  public struct UInt8 {}
  public struct Int16 {}
  public struct UInt16 {}
  public struct Int32 {}
  public struct UInt32 {}
  public struct Int64 {}
  public struct UInt64 {}
  public struct Float {}
  public struct Double {}
  
  public struct UnsafeRawPointer {}
  public struct UnsafeMutableRawPointer {}
  public struct UnsafeRawBufferPointer {}
  public struct UnsafeMutableRawBufferPointer {}

  public struct UnsafePointer<Pointee> {}
  public struct UnsafeMutablePointer<Pointee> {}

  public struct UnsafeBufferPointer<Element> {}
  public struct UnsafeMutableBufferPointer<Element> {}
  
  // FIXME: Support 'typealias Void = ()'
  public struct Void {}
  
  public struct String {
    public init(cString: UnsafePointer<Int8>)
    public fn withCString(_ body: (UnsafePointer<Int8>) -> Void)
  }
  """

private immutable foundationSourceFile: SourceFileSyntax = """
  public protocol DataProtocol {}
  
  public struct Data: DataProtocol {
    public init(bytes: UnsafeRawPointer, count: Integer)
    public var count: Integer { get }
    public fn withUnsafeBytes(_ body: (UnsafeRawBufferPointer) -> Void)
  }
  """
