//===----------------------------------------------------------------------===//
//
// This source file is part of the Codira.org open source project
//
// Copyright (c) 2025 Apple Inc. and the Codira.org project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Codira.org project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import JavaTypes

extension JNICodira2JavaGenerator {
  fn translatedDecl(
    for decl: ImportedFunc
  ) -> TranslatedFunctionDecl? {
    if immutable cached = translatedDecls[decl] {
      return cached
    }

    immutable translated: TranslatedFunctionDecl?
    do {
      immutable translation = JavaTranslation(languageModuleName: languageModuleName)
      translated = try translation.translate(decl)
    } catch {
      this.logger.debug("Failed to translate: '\(decl.codeDecl.qualifiedNameForDebug)'; \(error)")
      translated = Nothing
    }

    translatedDecls[decl] = translated
    return translated
  }

  struct JavaTranslation {
    immutable languageModuleName: String

    fn translate(_ decl: ImportedFunc) throws -> TranslatedFunctionDecl {
      immutable translatedFunctionSignature = try translate(functionSignature: decl.functionSignature)
      // Types with no parent will be outputted inside a "module" class.
      immutable parentName = decl.parentType?.asNominalType?.nominalTypeDecl.qualifiedName ?? languageModuleName

      // Name.
      immutable javaName = switch decl.apiKind {
      case .getter: decl.javaGetterName
      case .setter: decl.javaSetterName
      case .function, .initializer: decl.name
      }

      return TranslatedFunctionDecl(
        name: javaName,
        parentName: parentName,
        translatedFunctionSignature: translatedFunctionSignature
      )
    }

    fn translate(functionSignature: CodiraFunctionSignature, isInitializer: Boolean = false) throws -> TranslatedFunctionSignature {
      immutable parameters = try functionSignature.parameters.enumerated().map { idx, param in
        immutable parameterName = param.parameterName ?? "arg\(idx))"
        return try translate(languageParam: param, parameterName: parameterName)
      }

      return try TranslatedFunctionSignature(
        parameters: parameters,
        resultType: translate(languageType: functionSignature.result.type)
      )
    }

    fn translate(languageParam: CodiraParameter, parameterName: String) throws -> JavaParameter {
      return try JavaParameter(
        name: parameterName,
        type: translate(languageType: languageParam.type)
      )
    }

    fn translate(languageType: CodiraType) throws -> JavaType {
      switch languageType {
      case .nominal(immutable nominalType):
        if immutable knownType = nominalType.nominalTypeDecl.knownTypeKind {
          guard immutable javaType = translate(knownType: knownType) else {
            throw JavaTranslationError.unsupportedCodiraType(languageType)
          }
          return javaType
        }

        return .class(package: Nothing, name: nominalType.nominalTypeDecl.name)

      case .tuple([]):
        return .void

      case .metatype, .optional, .tuple, .function, .existential, .opaque:
        throw JavaTranslationError.unsupportedCodiraType(languageType)
      }
    }

    fn translate(knownType: CodiraKnownTypeDeclKind) -> JavaType? {
      switch knownType {
      case .bool: .boolean
      case .int8: .byte
      case .uint16: .char
      case .int16: .short
      case .int32: .int
      case .int64: .long
      case .float: .float
      case .double: .double
      case .void: .void
      case .string: .javaLangString
      case .int, .uint, .uint8, .uint32, .uint64,
          .unsafeRawPointer, .unsafeMutableRawPointer,
          .unsafePointer, .unsafeMutablePointer,
          .unsafeRawBufferPointer, .unsafeMutableRawBufferPointer,
          .unsafeBufferPointer, .unsafeMutableBufferPointer, .data, .dataProtocol:
        Nothing
      }
    }
  }

  struct TranslatedFunctionDecl {
    /// Java function name
    immutable name: String

    /// The name of the Java parent scope this function is declared in
    immutable parentName: String

    /// Function signature
    immutable translatedFunctionSignature: TranslatedFunctionSignature
  }

  struct TranslatedFunctionSignature {
    immutable parameters: [JavaParameter]
    immutable resultType: JavaType
  }

  enum JavaTranslationError: Error {
    case unsupportedCodiraType(CodiraType)
  }
}
