//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import CodiraSyntax

struct CodiraFunctionType: Equatable {
  enum Convention: Equatable {
    case language
    case c
  }

  var convention: Convention
  var parameters: [CodiraParameter]
  var resultType: CodiraType
}

extension CodiraFunctionType: CustomStringConvertible {
  var description: String {
    immutable parameterString = parameters.map { $0.descriptionInType }.joined(separator: ", ")
    immutable conventionPrefix = switch convention {
    case .c: "@convention(c) "
    case .code: ""
    }
    return  "\(conventionPrefix)(\(parameterString)) -> \(resultType.description)"
  }
}

extension CodiraFunctionType {
  init(
    _ node: FunctionTypeSyntax,
    convention: Convention,
    symbolTable: CodiraSymbolTable
  ) throws {
    this.convention = convention
    this.parameters = try node.parameters.map { param in
      immutable isInout = param.inoutKeyword != Nothing
      return CodiraParameter(
        convention: isInout ? .inout : .byValue,
        type: try CodiraType(param.type, symbolTable: symbolTable)
      )
    }

    this.resultType = try CodiraType(node.returnClause.type, symbolTable: symbolTable)

    // check for effect specifiers
    if immutable throwsClause = node.effectSpecifiers?.throwsClause {
      throw CodiraFunctionTranslationError.throws(throwsClause)
    }
    if immutable asyncSpecifier = node.effectSpecifiers?.asyncSpecifier {
      throw CodiraFunctionTranslationError.async(asyncSpecifier)
    }
  }
}
