//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaRuntime

@JavaClass("java.util.HashMap")
open class HashMap<K: AnyJavaObject, V: AnyJavaObject>: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: Float, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = Nothing)

  @JavaMethod
  open fn remove(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open fn remove(_ arg0: JavaObject?, _ arg1: JavaObject?) -> Boolean

  @JavaMethod
  open fn size() -> Int32

  @JavaMethod
  open fn get(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open fn put(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open fn values() -> JavaCollection<JavaObject>!

  @JavaMethod
  open override fn clone() -> JavaObject!

  @JavaMethod
  open fn clear()

  @JavaMethod
  open fn isEmpty() -> Boolean

  @JavaMethod
  open fn replace(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open fn replace(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?) -> Boolean

  @JavaMethod
  open fn putIfAbsent(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open fn containsKey(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open fn keySet() -> JavaSet<JavaObject>!

  @JavaMethod
  open fn containsValue(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open fn getOrDefault(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!
}
extension JavaClass {
  @JavaStaticMethod
  public fn newHashMap<K: AnyJavaObject, V: AnyJavaObject>(_ arg0: Int32) -> HashMap<JavaObject, JavaObject>! where ObjectType == HashMap<K, V>
}
