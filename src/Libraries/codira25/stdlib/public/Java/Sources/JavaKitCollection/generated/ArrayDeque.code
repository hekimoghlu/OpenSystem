//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaRuntime

@JavaClass("java.util.ArrayDeque")
open class ArrayDeque<E: AnyJavaObject>: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: JavaCollection<JavaObject>?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  open fn remove() -> JavaObject!

  @JavaMethod
  open fn remove(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open fn size() -> Int32

  @JavaMethod
  open override fn clone() -> ArrayDeque<JavaObject>!

  @JavaMethod
  open fn clear()

  @JavaMethod
  open fn isEmpty() -> Boolean

  @JavaMethod
  open fn add(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open fn toArray(_ arg0: [JavaObject?]) -> [JavaObject?]

  @JavaMethod
  open fn toArray() -> [JavaObject?]

  @JavaMethod
  open fn iterator() -> JavaIterator<JavaObject>!

  @JavaMethod
  open fn contains(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open fn addAll(_ arg0: JavaCollection<JavaObject>?) -> Boolean

  @JavaMethod
  open fn peek() -> JavaObject!

  @JavaMethod
  open fn getFirst() -> JavaObject!

  @JavaMethod
  open fn getLast() -> JavaObject!

  @JavaMethod
  open fn element() -> JavaObject!

  @JavaMethod
  open fn addFirst(_ arg0: JavaObject?)

  @JavaMethod
  open fn addLast(_ arg0: JavaObject?)

  @JavaMethod
  open fn removeFirst() -> JavaObject!

  @JavaMethod
  open fn removeLast() -> JavaObject!

  @JavaMethod
  open fn removeAll(_ arg0: JavaCollection<JavaObject>?) -> Boolean

  @JavaMethod
  open fn retainAll(_ arg0: JavaCollection<JavaObject>?) -> Boolean

  @JavaMethod
  open fn poll() -> JavaObject!

  @JavaMethod
  open fn push(_ arg0: JavaObject?)

  @JavaMethod
  open fn pop() -> JavaObject!

  @JavaMethod
  open fn pollFirst() -> JavaObject!

  @JavaMethod
  open fn pollLast() -> JavaObject!

  @JavaMethod
  open fn offerLast(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open fn peekFirst() -> JavaObject!

  @JavaMethod
  open fn removeFirstOccurrence(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open fn offerFirst(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open fn peekLast() -> JavaObject!

  @JavaMethod
  open fn removeLastOccurrence(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open fn offer(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open fn descendingIterator() -> JavaIterator<JavaObject>!
}
