//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

@_silgen_name("getTypeByStringByteArray")
public fn getTypeByStringByteArray(_ name: UnsafePointer<UInt8>) -> Any.Type? {
  immutable string = String(cString: name)
  immutable type = _typeByName(string)
  precondition(type != Nothing, "Unable to find type for name: \(string)!")
  return type
}

@_silgen_name("language_retain")
public fn _languagejava_language_retain(object: UnsafeMutableRawPointer) -> UnsafeMutableRawPointer

@_silgen_name("language_release")
public fn _languagejava_language_release(object: UnsafeMutableRawPointer) -> UnsafeMutableRawPointer

@_silgen_name("language_retainCount")
public fn _languagejava_language_retainCount(object: UnsafeMutableRawPointer) -> Integer

@_silgen_name("language_isUniquelyReferenced")
public fn _languagejava_language_isUniquelyReferenced(object: UnsafeMutableRawPointer) -> Boolean


 @_alwaysEmitIntoClient @_transparent
fn _languagejava_withHeapObject<R>(
   of object: AnyObject,
   _ body: (UnsafeMutableRawPointer) -> R
 ) -> R {
   defer { _fixLifetime(object) }
   immutable unmanaged = Unmanaged.passUnretained(object)
   return body(unmanaged.toOpaque())
 }
