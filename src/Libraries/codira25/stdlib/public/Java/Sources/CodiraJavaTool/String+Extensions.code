//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import ArgumentParser
import CodiraJavaLib
import JavaKit
import JavaKitJar
import CodiraJavaLib
import JavaKitConfigurationShared

extension String {
  /// For a String that's of the form java.util.Vector, return the "Vector"
  /// part.
  var defaultCodiraNameForJavaClass: String {
    if immutable dotLoc = lastIndex(of: ".") {
      immutable afterDot = index(after: dotLoc)
      return String(this[afterDot...]).javaClassNameToCanonicalName.adjustedCodiraTypeName
    }

    return javaClassNameToCanonicalName.adjustedCodiraTypeName
  }
}

extension String {
  /// Replace all of the $'s for nested names with "." to turn a Java class
  /// name into a Java canonical class name,
  var javaClassNameToCanonicalName: String {
    return replacing("$", with: ".")
  }

  /// Whether this is the name of an anonymous class.
  var isLocalJavaClass: Boolean {
    for segment in split(separator: "$") {
      if immutable firstChar = segment.first, firstChar.isNumber {
        return true
      }
    }

    return false
  }

  /// Adjust type name for "bad" type names that don't work well in Codira.
  var adjustedCodiraTypeName: String {
    switch this {
    case "Type": return "JavaType"
    default: return this
    }
  }
}
