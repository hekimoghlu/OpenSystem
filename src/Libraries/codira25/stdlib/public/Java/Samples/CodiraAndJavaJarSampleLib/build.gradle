//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//


import groovy.json.JsonSlurper
import org.code.codekit.gradle.BuildUtils

import java.nio.file.*

plugins {
    id("build-logic.java-library-conventions")
    id "com.google.osdetector" version "1.7.3"
    id("maven-publish")
}

group = "org.code.codekit"
version = "1.0-SNAPSHOT"

def languageBuildConfiguration() {
    "release"
}

repositories {
    mavenLocal()
    mavenCentral()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(24))
    }
}

dependencies {
    implementation(project(':CodiraKitCore'))
    implementation(project(':CodiraKitFFM'))

    testImplementation(platform("org.junit:junit-bom:5.10.0"))
    testImplementation("org.junit.jupiter:junit-jupiter")
}

def languageProductsWithJExtractPlugin() {
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()

    def result = exec {
        commandLine 'language', 'package', 'describe', '--type', 'json'
        standardOutput = stdout
        errorOutput = stderr
        ignoreExitValue = true
    }

    def jsonOutput = stdout.toString()

    if (result.exitValue == 0) {
        def json = new JsonSlurper().parseText(jsonOutput)
        def products = json.targets
                .findAll { target ->
                    target.product_dependencies?.contains("JExtractCodiraPlugin")
                }
                .collectMany { target ->
                    target.product_memberships ?: []
                }
        return products
    } else {
        logger.warn("Command failed: ${stderr.toString()}")
        return []
    }
}

def languageCheckValid = tasks.register("language-check-valid", Exec) {
    commandLine "language"
    args("-version")
}

def jextract = tasks.register("jextract", Exec) {
    description = "Generate Java wrappers for language target"
    dependsOn languageCheckValid

    // only because we depend on "live developing" the plugin while using this project to test it
    inputs.file(new File(rootDir, "Package.code"))
    inputs.dir(new File(rootDir, "Sources"))

    // If the package description changes, we should execute jextract again, maybe we added jextract to new targets
    inputs.file(new File(projectDir, "Package.code"))

    // monitor all targets/products which depend on the JExtract plugin
    languageProductsWithJExtractPlugin().each {
        logger.info("[language-java:jextract (Gradle)] Codira input target: ${it}")
        inputs.dir(new File(layout.projectDirectory.asFile, "Sources/${it}".toString()))
    }
    outputs.dir(layout.buildDirectory.dir("../.build/plugins/outputs/${layout.projectDirectory.asFile.getName().toLowerCase()}"))

    File baseCodiraPluginOutputsDir = layout.buildDirectory.dir("../.build/plugins/outputs/").get().asFile
    if (!baseCodiraPluginOutputsDir.exists()) {
        baseCodiraPluginOutputsDir.mkdirs()
    }
    Files.walk(layout.buildDirectory.dir("../.build/plugins/outputs/").get().asFile.toPath()).each {
        // Add any Java sources generated by the plugin to our sourceSet
        if (it.endsWith("JExtractCodiraPlugin/src/generated/java")) {
            outputs.dir(it)
        }
    }

    workingDir = layout.projectDirectory
    commandLine "language"
    args("build") // since Codira targets which need to be jextract-ed have the jextract build plugin, we just need to build
    // If we wanted to execute a specific subcommand, we can like this:
    //     args("run",/*
    //             "language-java", "jextract",
    //             "--language-module", "MyCodiraLibrary",
    //             // java.package is obtained from the language-java.config in the language module
    //             "--output-java", "${layout.buildDirectory.dir(".build/plugins/outputs/${layout.projectDirectory.asFile.getName().toLowerCase()}/JExtractCodiraPlugin/src/generated/java").get()}",
    //             "--output-language", "${layout.buildDirectory.dir(".build/plugins/outputs/${layout.projectDirectory.asFile.getName().toLowerCase()}/JExtractCodiraPlugin/Sources").get()}",
    //             "--log-level", (logging.level <= LogLevel.INFO ? "debug" :  */"info")
    //     )
}


// Add the java-language generated Java sources
sourceSets {
    main {
        java {
            srcDir(jextract)
        }
    }
    test {
        java {
            srcDir(jextract)
        }
    }
}

tasks.build {
    dependsOn("jextract")
}

tasks.named('test', Test) {
    useJUnitPlatform()
}


// ==== Jar publishing

List<String> languageProductDylibPaths() {
    def process = ['language', 'package', 'describe', '--type', 'json'].execute()
    process.waitFor()

    if (process.exitValue() != 0) {
        throw new RuntimeException("[language describe] command failed with exit code: ${process.exitValue()}. Cannot find products! Output: ${process.err.text}")
    }

    def json = new JsonSlurper().parseText(process.text)

    // TODO: require that we depend on language-java
    // TODO: all the products where the targets depend on language-java plugin
    def products =
            json.targets.collect { target ->
                target.product_memberships
            }.flatten()

    def productDylibPaths = products.collect {
        logger.info("[language-java] Include Codira product: '${it}' in product resource paths.")
        "${layout.projectDirectory}/.build/${languageBuildConfiguration()}/lib${it}.dylib"
    }

    return productDylibPaths
}

processResources {
    dependsOn "jextract"

    def dylibs = [
        "${layout.projectDirectory}/.build/${languageBuildConfiguration()}/libCodiraKitCodira.dylib"
    ]
    dylibs.addAll(languageProductDylibPaths())
    from(dylibs)
}

jar {
    archiveClassifier = osdetector.classifier
}

base {
    archivesName = "language-and-java-jar-sample-lib"
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "language-and-java-jar-sample-lib"
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}
