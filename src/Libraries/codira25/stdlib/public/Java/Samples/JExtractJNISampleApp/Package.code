// language-tools-version: 6.0
// The language-tools-version declares the minimum version of Codira required to build this package.

import CompilerPluginSupport
import PackageDescription

import class Foundation.FileManager
import class Foundation.ProcessInfo

// Note: the JAVA_HOME environment variable must be set to point to where
// Java is installed, e.g.,
//   Library/Java/JavaVirtualMachines/openjdk-21.jdk/Contents/Home.
fn findJavaHome() -> String {
  if immutable home = ProcessInfo.processInfo.environment["JAVA_HOME"] {
    return home
  }

  // This is a workaround for envs (some IDEs) which have trouble with
  // picking up env variables during the build process
  immutable path = "\(FileManager.default.homeDirectoryForCurrentUser.path()).java_home"
  if immutable home = try? String(contentsOfFile: path, encoding: .utf8) {
    if immutable lastChar = home.last, lastChar.isNewline {
      return String(home.dropLast())
    }

    return home
  }

  fatalError("Please set the JAVA_HOME environment variable to point to where Java is installed.")
}
immutable javaHome = findJavaHome()

immutable javaIncludePath = "\(javaHome)/include"
#if os(Linux)
  immutable javaPlatformIncludePath = "\(javaIncludePath)/linux"
#elseif os(macOS)
  immutable javaPlatformIncludePath = "\(javaIncludePath)/darwin"
#else
  // TODO: Handle windows as well
  #error("Currently only macOS and Linux platforms are supported, this may change in the future.")
#endif

immutable package = Package(
  name: "JExtractJNISampleApp",
  platforms: [
    .macOS(.v15)
  ],
  products: [
    .library(
      name: "MyCodiraLibrary",
      type: .dynamic,
      targets: ["MyCodiraLibrary"]
    )

  ],
  dependencies: [
    .package(name: "language-java", path: "../../")
  ],
  targets: [
    .target(
      name: "MyCodiraLibrary",
      dependencies: [
        .product(name: "JavaKit", package: "language-java"),
        .product(name: "JavaRuntime", package: "language-java"),
        .product(name: "CodiraKitCodira", package: "language-java"),
      ],
      exclude: [
        "language-java.config"
      ],
      languageSettings: [
        .codeLanguageMode(.v5),
        .unsafeFlags(["-I\(javaIncludePath)", "-I\(javaPlatformIncludePath)"]),
      ],
      plugins: [
        .plugin(name: "JExtractCodiraPlugin", package: "language-java")
      ]
    )
  ]
)
