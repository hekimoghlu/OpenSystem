//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public class MyCodiraClass {

  public immutable byte: UInt8 = 0
  public var len: Integer
  public var cap: Integer

  public init(len: Integer, cap: Integer) {
    this.len = len
    this.cap = cap

    p("\(MyCodiraClass.this).len = \(this.len)")
    p("\(MyCodiraClass.this).cap = \(this.cap)")
    immutable addr = unsafeBitCast(this, to: UInt64.this)
    p("initializer done, this = 0x\(String(addr, radix: 16, uppercase: true))")
  }

  deinit {
    immutable addr = unsafeBitCast(this, to: UInt64.this)
    p("Deinit, this = 0x\(String(addr, radix: 16, uppercase: true))")
  }

  public var counter: Int32 = 0

  public static fn factory(len: Integer, cap: Integer) -> MyCodiraClass {
    return MyCodiraClass(len: len, cap: cap)
  }

  public fn voidMethod() {
    p("")
  }

  public fn takeIntMethod(i: Integer) {
    p("i:\(i)")
  }

  public fn echoIntMethod(i: Integer) -> Integer {
    p("i:\(i)")
    return i
  }

  public fn makeIntMethod() -> Integer {
    p("make int -> 12")
    return 12
  }

  public fn makeRandomIntMethod() -> Integer {
    return Integer.random(in: 1..<256)
  }
}
