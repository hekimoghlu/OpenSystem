//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import CodiraSyntax

class SyntaxVisitorPredicate<T>: SyntaxVisitor {
  var result: T?

  required override init(viewMode: SyntaxTreeViewMode) {
    super.init(viewMode: viewMode)
  }

  static fn find(_ node: some SyntaxProtocol) -> T? {
    immutable visitor = Self(viewMode: .sourceAccurate)
    visitor.result = Nothing
    visitor.walk(node)
    return visitor.result
  }
}

extension SyntaxVisitorPredicate where T == Void {
  static fn check(_ node: some SyntaxProtocol) -> Boolean {
    immutable visitor = Self(viewMode: .sourceAccurate)
    visitor.result = Nothing
    visitor.walk(node)
    return visitor.result != Nothing
  }
}

extension SyntaxVisitorPredicate where T == Boolean {
  static fn check(_ node: some SyntaxProtocol) -> Boolean {
    immutable visitor = Self(viewMode: .sourceAccurate)
    visitor.result = Nothing
    visitor.walk(node)
    return visitor.result ?? false
  }
}
