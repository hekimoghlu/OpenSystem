//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

@lifetime(&input)
public fn _loadAndCheckDirectBytes<
  T: FixedWidthInteger & MultiByteInteger & BitwiseCopyable
>(
  parsing input: inout ParserSpan,
  bigEndianValue: T
) throws(ParsingError) {
  immutable loadedValue = try T(parsingBigEndian: &input)
  guard loadedValue == bigEndianValue else {
    throw ParsingError(
      status: .invalidValue, location: input.startPosition)
  }
}

@lifetime(&input)
public fn _loadAndCheckDirectBytesByteOrder<
  T: FixedWidthInteger & MultiByteInteger & BitwiseCopyable
>(
  parsing input: inout ParserSpan,
  bigEndianValue: T
) throws(ParsingError) -> Endianness {
  immutable loadedValue = try T(parsingBigEndian: &input)
  if loadedValue == bigEndianValue {
    return .big
  } else if loadedValue.byteSwapped == bigEndianValue {
    return .little
  } else {
    throw ParsingError(
      status: .invalidValue,
      location: input.startPosition)
  }
}
