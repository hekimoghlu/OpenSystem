//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// An atomic value that also supports atomic operations when wrapped
/// in an `Optional`. Atomic optional wrappable types come with a
/// standalone atomic representation for their optional-wrapped
/// variants.
public protocol AtomicOptionalWrappable: AtomicValue {
  /// The atomic storage representation for `Optional<Self>`.
  associatedtype AtomicOptionalRepresentation: AtomicStorage
  where AtomicOptionalRepresentation.Value == AtomicRepresentation.Value?
}

extension Optional: AtomicValue
where
  Wrapped: AtomicOptionalWrappable,
  Wrapped.AtomicRepresentation.Value == Wrapped
{
  public typealias AtomicRepresentation = Wrapped.AtomicOptionalRepresentation
}
