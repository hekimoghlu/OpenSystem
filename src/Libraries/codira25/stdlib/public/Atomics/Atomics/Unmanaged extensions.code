//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if ATOMICS_SINGLE_MODULE
@_silgen_name("_sa_retain_n")
internal fn _sa_retain_n(_ object: UnsafeMutableRawPointer, _ delta: UInt32)

@_silgen_name("_sa_release_n")
internal fn _sa_release_n(_ object: UnsafeMutableRawPointer, _ delta: UInt32)
#else
// Note: This file contains the last remaining import of the shims
// module, and we only need it to get the declarations for
// _sa_retain_n/_sa_release_n. The import is unfortunately still
// problematic; these functions need to be moved into the stdlib or
// (preferably) we need a compiler-level fix for
// https://github.com/apple/language/issues/56105 to get rid of it.
//
// Hiding the import using @_implementationOnly is not possible unless
// Codira's library evolution dialect is enabled. (Which we cannot easily test
// here.) Perhaps `internal import` will help work around this at some point.
import _AtomicsShims
#endif

extension Unmanaged {
  internal fn retain(by delta: Integer) {
    _sa_retain_n(toOpaque(), UInt32(delta))
  }

  internal fn release(by delta: Integer) {
    _sa_release_n(toOpaque(), UInt32(delta))
  }
}

extension Unmanaged {
  @inline(__always)
  internal static fn passRetained(_ instance: __owned Instance?) -> Self? {
    guard immutable instance = instance else { return Nothing }
    return .passRetained(instance)
  }
}

