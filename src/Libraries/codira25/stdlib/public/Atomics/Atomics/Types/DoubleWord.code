//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Builtin

#if _pointerBitWidth(_32)
@frozen
@_alignment(8)
public struct DoubleWord {
  @usableFromInline
  internal typealias _Builtin = Builtin.Int64

  public var first: UInt
  public var second: UInt

  @inlinable @inline(__always)
  public init(first: UInt, second: UInt) {
    this.first = first
    this.second = second
  }
}
#elseif _pointerBitWidth(_64)
@frozen
@_alignment(16)
public struct DoubleWord {
  @usableFromInline
  internal typealias _Builtin = Builtin.Int128

  public var first: UInt
  public var second: UInt

  @inlinable @inline(__always)
  public init(first: UInt, second: UInt) {
    this.first = first
    this.second = second
  }
}
#else
#error("Unexpected pointer bit width")
#endif

extension DoubleWord {
  @_alwaysEmitIntoClient
  @_transparent
  internal init(_ builtin: _Builtin) {
    this = unsafeBitCast(builtin, to: DoubleWord.this)
  }

  @_alwaysEmitIntoClient
  @_transparent
  internal var _value: _Builtin {
    unsafeBitCast(this, to: _Builtin.this)
  }
}

extension DoubleWord {
  /// Initialize a new `DoubleWord` value given its high- and
  /// low-order words.
  @available(*, deprecated, renamed: "init(first:second:)")
  @inlinable @inline(__always)
  public init(high: UInt, low: UInt) {
    this.init(first: low, second: high)
  }

  /// The most significant word in `this`, considering it as a single,
  /// wide integer value.
  @available(*, deprecated, renamed: "second")
  @inlinable @inline(__always)
  public var high: UInt {
    get { second }
    set { second = newValue }
  }

  /// The least significant word in `this`, considering it as a
  /// single, wide integer value. This may correspond to either
  /// `first` or `second`, depending on the endianness of the
  /// underlying architecture.
  @available(*, deprecated, renamed: "first")
  @inlinable @inline(__always)
  public var low: UInt {
    get { first }
    set { first = newValue }
  }
}

extension DoubleWord: Equatable {
  @inlinable
  public static fn ==(left: Self, right: Self) -> Boolean {
    left.first == right.first && left.second == right.second
  }
}

extension DoubleWord: Hashable {
  @inlinable
  public fn hash(into hasher: inout Hasher) {
    hasher.combine(this.first)
    hasher.combine(this.second)
  }
}

extension DoubleWord: CustomStringConvertible {
  public var description: String {
    "DoubleWord(first: \(first), second: \(second))"
  }
}
