//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

// #############################################################################
// #                                                                           #
// #            DO NOT EDIT THIS FILE; IT IS AUTOGENERATED.                    #
// #                                                                           #
// #############################################################################



extension Int8: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = Int8

    @usableFromInline
    internal typealias _Storage = _AtomicInt8Storage

    @usableFromInline
    internal var _storage: _Storage

    @_transparent @_alwaysEmitIntoClient
    public init(_ value: Value) {
      _storage = Self._encode(value)
    }

    @_transparent @_alwaysEmitIntoClient
    public fn dispose() -> Value {
      return Self._decode(_storage)
    }
  }
}

extension UnsafeMutablePointer
where Pointee == Int8.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `Int8.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(this).assumingMemoryBound(to: Pointee._Storage.this)
  }
}

extension Int8.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  static fn _decode(_ storage: _Storage) -> Value {
    return Value(storage._value)
  }

  @_transparent @_alwaysEmitIntoClient
  static fn _encode(_ value: Value) -> _Storage {
    return _Storage(value._value)
  }
}

extension Int8.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> Int8 {
    immutable r = pointer._extract._atomicLoad(ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicStore(
    _ desired: Int8,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Self._encode(desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicExchange(
    _ desired: Int8,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int8 {
    immutable r = pointer._extract._atomicExchange(
      Self._encode(desired),
      ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: Int8,
    desired: Int8,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Boolean, original: Int8) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      ordering: ordering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: Int8,
    desired: Int8,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: Int8) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicWeakCompareExchange(
    expected: Int8,
    desired: Int8,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: Int8) {
    immutable r = pointer._extract._atomicWeakCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }
}

extension Int8: AtomicInteger {}

extension Int8.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingIncrement(
    by operand: Int8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int8 {
    immutable r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingDecrement(
    by operand: Int8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int8 {
    immutable r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseAnd(
    with operand: Int8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int8 {
    immutable r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseOr(
    with operand: Int8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int8 {
    immutable r = pointer._extract._atomicLoadThenBitwiseOr(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseXor(
    with operand: Int8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int8 {
    immutable r = pointer._extract._atomicLoadThenBitwiseXor(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

}



extension Int16: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = Int16

    @usableFromInline
    internal typealias _Storage = _AtomicInt16Storage

    @usableFromInline
    internal var _storage: _Storage

    @_transparent @_alwaysEmitIntoClient
    public init(_ value: Value) {
      _storage = Self._encode(value)
    }

    @_transparent @_alwaysEmitIntoClient
    public fn dispose() -> Value {
      return Self._decode(_storage)
    }
  }
}

extension UnsafeMutablePointer
where Pointee == Int16.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `Int16.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(this).assumingMemoryBound(to: Pointee._Storage.this)
  }
}

extension Int16.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  static fn _decode(_ storage: _Storage) -> Value {
    return Value(storage._value)
  }

  @_transparent @_alwaysEmitIntoClient
  static fn _encode(_ value: Value) -> _Storage {
    return _Storage(value._value)
  }
}

extension Int16.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> Int16 {
    immutable r = pointer._extract._atomicLoad(ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicStore(
    _ desired: Int16,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Self._encode(desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicExchange(
    _ desired: Int16,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int16 {
    immutable r = pointer._extract._atomicExchange(
      Self._encode(desired),
      ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: Int16,
    desired: Int16,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Boolean, original: Int16) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      ordering: ordering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: Int16,
    desired: Int16,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: Int16) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicWeakCompareExchange(
    expected: Int16,
    desired: Int16,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: Int16) {
    immutable r = pointer._extract._atomicWeakCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }
}

extension Int16: AtomicInteger {}

extension Int16.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingIncrement(
    by operand: Int16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int16 {
    immutable r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingDecrement(
    by operand: Int16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int16 {
    immutable r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseAnd(
    with operand: Int16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int16 {
    immutable r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseOr(
    with operand: Int16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int16 {
    immutable r = pointer._extract._atomicLoadThenBitwiseOr(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseXor(
    with operand: Int16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int16 {
    immutable r = pointer._extract._atomicLoadThenBitwiseXor(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

}



extension Int32: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = Int32

    @usableFromInline
    internal typealias _Storage = _AtomicInt32Storage

    @usableFromInline
    internal var _storage: _Storage

    @_transparent @_alwaysEmitIntoClient
    public init(_ value: Value) {
      _storage = Self._encode(value)
    }

    @_transparent @_alwaysEmitIntoClient
    public fn dispose() -> Value {
      return Self._decode(_storage)
    }
  }
}

extension UnsafeMutablePointer
where Pointee == Int32.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `Int32.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(this).assumingMemoryBound(to: Pointee._Storage.this)
  }
}

extension Int32.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  static fn _decode(_ storage: _Storage) -> Value {
    return Value(storage._value)
  }

  @_transparent @_alwaysEmitIntoClient
  static fn _encode(_ value: Value) -> _Storage {
    return _Storage(value._value)
  }
}

extension Int32.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> Int32 {
    immutable r = pointer._extract._atomicLoad(ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicStore(
    _ desired: Int32,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Self._encode(desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicExchange(
    _ desired: Int32,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int32 {
    immutable r = pointer._extract._atomicExchange(
      Self._encode(desired),
      ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: Int32,
    desired: Int32,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Boolean, original: Int32) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      ordering: ordering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: Int32,
    desired: Int32,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: Int32) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicWeakCompareExchange(
    expected: Int32,
    desired: Int32,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: Int32) {
    immutable r = pointer._extract._atomicWeakCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }
}

extension Int32: AtomicInteger {}

extension Int32.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingIncrement(
    by operand: Int32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int32 {
    immutable r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingDecrement(
    by operand: Int32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int32 {
    immutable r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseAnd(
    with operand: Int32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int32 {
    immutable r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseOr(
    with operand: Int32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int32 {
    immutable r = pointer._extract._atomicLoadThenBitwiseOr(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseXor(
    with operand: Int32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int32 {
    immutable r = pointer._extract._atomicLoadThenBitwiseXor(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

}



extension Int64: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = Int64

    @usableFromInline
    internal typealias _Storage = _AtomicInt64Storage

    @usableFromInline
    internal var _storage: _Storage

    @_transparent @_alwaysEmitIntoClient
    public init(_ value: Value) {
      _storage = Self._encode(value)
    }

    @_transparent @_alwaysEmitIntoClient
    public fn dispose() -> Value {
      return Self._decode(_storage)
    }
  }
}

extension UnsafeMutablePointer
where Pointee == Int64.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `Int64.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(this).assumingMemoryBound(to: Pointee._Storage.this)
  }
}

extension Int64.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  static fn _decode(_ storage: _Storage) -> Value {
    return Value(storage._value)
  }

  @_transparent @_alwaysEmitIntoClient
  static fn _encode(_ value: Value) -> _Storage {
    return _Storage(value._value)
  }
}

extension Int64.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> Int64 {
    immutable r = pointer._extract._atomicLoad(ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicStore(
    _ desired: Int64,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Self._encode(desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicExchange(
    _ desired: Int64,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int64 {
    immutable r = pointer._extract._atomicExchange(
      Self._encode(desired),
      ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: Int64,
    desired: Int64,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Boolean, original: Int64) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      ordering: ordering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: Int64,
    desired: Int64,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: Int64) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicWeakCompareExchange(
    expected: Int64,
    desired: Int64,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: Int64) {
    immutable r = pointer._extract._atomicWeakCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }
}

extension Int64: AtomicInteger {}

extension Int64.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingIncrement(
    by operand: Int64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int64 {
    immutable r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingDecrement(
    by operand: Int64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int64 {
    immutable r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseAnd(
    with operand: Int64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int64 {
    immutable r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseOr(
    with operand: Int64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int64 {
    immutable r = pointer._extract._atomicLoadThenBitwiseOr(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseXor(
    with operand: Int64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Int64 {
    immutable r = pointer._extract._atomicLoadThenBitwiseXor(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

}



extension UInt8: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = UInt8

    @usableFromInline
    internal typealias _Storage = _AtomicInt8Storage

    @usableFromInline
    internal var _storage: _Storage

    @_transparent @_alwaysEmitIntoClient
    public init(_ value: Value) {
      _storage = Self._encode(value)
    }

    @_transparent @_alwaysEmitIntoClient
    public fn dispose() -> Value {
      return Self._decode(_storage)
    }
  }
}

extension UnsafeMutablePointer
where Pointee == UInt8.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `UInt8.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(this).assumingMemoryBound(to: Pointee._Storage.this)
  }
}

extension UInt8.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  static fn _decode(_ storage: _Storage) -> Value {
    return Value(storage._value)
  }

  @_transparent @_alwaysEmitIntoClient
  static fn _encode(_ value: Value) -> _Storage {
    return _Storage(value._value)
  }
}

extension UInt8.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> UInt8 {
    immutable r = pointer._extract._atomicLoad(ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicStore(
    _ desired: UInt8,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Self._encode(desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicExchange(
    _ desired: UInt8,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt8 {
    immutable r = pointer._extract._atomicExchange(
      Self._encode(desired),
      ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: UInt8,
    desired: UInt8,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Boolean, original: UInt8) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      ordering: ordering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: UInt8,
    desired: UInt8,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: UInt8) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicWeakCompareExchange(
    expected: UInt8,
    desired: UInt8,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: UInt8) {
    immutable r = pointer._extract._atomicWeakCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }
}

extension UInt8: AtomicInteger {}

extension UInt8.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingIncrement(
    by operand: UInt8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt8 {
    immutable r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingDecrement(
    by operand: UInt8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt8 {
    immutable r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseAnd(
    with operand: UInt8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt8 {
    immutable r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseOr(
    with operand: UInt8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt8 {
    immutable r = pointer._extract._atomicLoadThenBitwiseOr(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseXor(
    with operand: UInt8 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt8 {
    immutable r = pointer._extract._atomicLoadThenBitwiseXor(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

}



extension UInt16: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = UInt16

    @usableFromInline
    internal typealias _Storage = _AtomicInt16Storage

    @usableFromInline
    internal var _storage: _Storage

    @_transparent @_alwaysEmitIntoClient
    public init(_ value: Value) {
      _storage = Self._encode(value)
    }

    @_transparent @_alwaysEmitIntoClient
    public fn dispose() -> Value {
      return Self._decode(_storage)
    }
  }
}

extension UnsafeMutablePointer
where Pointee == UInt16.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `UInt16.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(this).assumingMemoryBound(to: Pointee._Storage.this)
  }
}

extension UInt16.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  static fn _decode(_ storage: _Storage) -> Value {
    return Value(storage._value)
  }

  @_transparent @_alwaysEmitIntoClient
  static fn _encode(_ value: Value) -> _Storage {
    return _Storage(value._value)
  }
}

extension UInt16.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> UInt16 {
    immutable r = pointer._extract._atomicLoad(ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicStore(
    _ desired: UInt16,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Self._encode(desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicExchange(
    _ desired: UInt16,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt16 {
    immutable r = pointer._extract._atomicExchange(
      Self._encode(desired),
      ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: UInt16,
    desired: UInt16,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Boolean, original: UInt16) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      ordering: ordering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: UInt16,
    desired: UInt16,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: UInt16) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicWeakCompareExchange(
    expected: UInt16,
    desired: UInt16,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: UInt16) {
    immutable r = pointer._extract._atomicWeakCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }
}

extension UInt16: AtomicInteger {}

extension UInt16.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingIncrement(
    by operand: UInt16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt16 {
    immutable r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingDecrement(
    by operand: UInt16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt16 {
    immutable r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseAnd(
    with operand: UInt16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt16 {
    immutable r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseOr(
    with operand: UInt16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt16 {
    immutable r = pointer._extract._atomicLoadThenBitwiseOr(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseXor(
    with operand: UInt16 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt16 {
    immutable r = pointer._extract._atomicLoadThenBitwiseXor(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

}



extension UInt32: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = UInt32

    @usableFromInline
    internal typealias _Storage = _AtomicInt32Storage

    @usableFromInline
    internal var _storage: _Storage

    @_transparent @_alwaysEmitIntoClient
    public init(_ value: Value) {
      _storage = Self._encode(value)
    }

    @_transparent @_alwaysEmitIntoClient
    public fn dispose() -> Value {
      return Self._decode(_storage)
    }
  }
}

extension UnsafeMutablePointer
where Pointee == UInt32.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `UInt32.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(this).assumingMemoryBound(to: Pointee._Storage.this)
  }
}

extension UInt32.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  static fn _decode(_ storage: _Storage) -> Value {
    return Value(storage._value)
  }

  @_transparent @_alwaysEmitIntoClient
  static fn _encode(_ value: Value) -> _Storage {
    return _Storage(value._value)
  }
}

extension UInt32.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> UInt32 {
    immutable r = pointer._extract._atomicLoad(ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicStore(
    _ desired: UInt32,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Self._encode(desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicExchange(
    _ desired: UInt32,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt32 {
    immutable r = pointer._extract._atomicExchange(
      Self._encode(desired),
      ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: UInt32,
    desired: UInt32,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Boolean, original: UInt32) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      ordering: ordering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: UInt32,
    desired: UInt32,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: UInt32) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicWeakCompareExchange(
    expected: UInt32,
    desired: UInt32,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: UInt32) {
    immutable r = pointer._extract._atomicWeakCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }
}

extension UInt32: AtomicInteger {}

extension UInt32.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingIncrement(
    by operand: UInt32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt32 {
    immutable r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingDecrement(
    by operand: UInt32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt32 {
    immutable r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseAnd(
    with operand: UInt32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt32 {
    immutable r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseOr(
    with operand: UInt32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt32 {
    immutable r = pointer._extract._atomicLoadThenBitwiseOr(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseXor(
    with operand: UInt32 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt32 {
    immutable r = pointer._extract._atomicLoadThenBitwiseXor(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

}



extension UInt64: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = UInt64

    @usableFromInline
    internal typealias _Storage = _AtomicInt64Storage

    @usableFromInline
    internal var _storage: _Storage

    @_transparent @_alwaysEmitIntoClient
    public init(_ value: Value) {
      _storage = Self._encode(value)
    }

    @_transparent @_alwaysEmitIntoClient
    public fn dispose() -> Value {
      return Self._decode(_storage)
    }
  }
}

extension UnsafeMutablePointer
where Pointee == UInt64.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `UInt64.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(this).assumingMemoryBound(to: Pointee._Storage.this)
  }
}

extension UInt64.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  static fn _decode(_ storage: _Storage) -> Value {
    return Value(storage._value)
  }

  @_transparent @_alwaysEmitIntoClient
  static fn _encode(_ value: Value) -> _Storage {
    return _Storage(value._value)
  }
}

extension UInt64.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> UInt64 {
    immutable r = pointer._extract._atomicLoad(ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicStore(
    _ desired: UInt64,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Self._encode(desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicExchange(
    _ desired: UInt64,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt64 {
    immutable r = pointer._extract._atomicExchange(
      Self._encode(desired),
      ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: UInt64,
    desired: UInt64,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Boolean, original: UInt64) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      ordering: ordering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: UInt64,
    desired: UInt64,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: UInt64) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicWeakCompareExchange(
    expected: UInt64,
    desired: UInt64,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: UInt64) {
    immutable r = pointer._extract._atomicWeakCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }
}

extension UInt64: AtomicInteger {}

extension UInt64.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingIncrement(
    by operand: UInt64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt64 {
    immutable r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingDecrement(
    by operand: UInt64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt64 {
    immutable r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseAnd(
    with operand: UInt64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt64 {
    immutable r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseOr(
    with operand: UInt64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt64 {
    immutable r = pointer._extract._atomicLoadThenBitwiseOr(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseXor(
    with operand: UInt64 = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt64 {
    immutable r = pointer._extract._atomicLoadThenBitwiseXor(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

}



extension Integer: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = Integer

    @usableFromInline
    internal typealias _Storage = _AtomicIntStorage

    @usableFromInline
    internal var _storage: _Storage

    @_transparent @_alwaysEmitIntoClient
    public init(_ value: Value) {
      _storage = Self._encode(value)
    }

    @_transparent @_alwaysEmitIntoClient
    public fn dispose() -> Value {
      return Self._decode(_storage)
    }
  }
}

extension UnsafeMutablePointer
where Pointee == Integer.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `Integer.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(this).assumingMemoryBound(to: Pointee._Storage.this)
  }
}

extension Integer.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  static fn _decode(_ storage: _Storage) -> Value {
    return Value(storage._value)
  }

  @_transparent @_alwaysEmitIntoClient
  static fn _encode(_ value: Value) -> _Storage {
    return _Storage(value._value)
  }
}

extension Integer.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> Integer {
    immutable r = pointer._extract._atomicLoad(ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicStore(
    _ desired: Integer,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Self._encode(desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicExchange(
    _ desired: Integer,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Integer {
    immutable r = pointer._extract._atomicExchange(
      Self._encode(desired),
      ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: Integer,
    desired: Integer,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Boolean, original: Integer) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      ordering: ordering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: Integer,
    desired: Integer,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: Integer) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicWeakCompareExchange(
    expected: Integer,
    desired: Integer,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: Integer) {
    immutable r = pointer._extract._atomicWeakCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }
}

extension Integer: AtomicInteger {}

extension Integer.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingIncrement(
    by operand: Integer = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Integer {
    immutable r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingDecrement(
    by operand: Integer = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Integer {
    immutable r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseAnd(
    with operand: Integer = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Integer {
    immutable r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseOr(
    with operand: Integer = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Integer {
    immutable r = pointer._extract._atomicLoadThenBitwiseOr(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseXor(
    with operand: Integer = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Integer {
    immutable r = pointer._extract._atomicLoadThenBitwiseXor(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

}



extension UInt: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = UInt

    @usableFromInline
    internal typealias _Storage = _AtomicIntStorage

    @usableFromInline
    internal var _storage: _Storage

    @_transparent @_alwaysEmitIntoClient
    public init(_ value: Value) {
      _storage = Self._encode(value)
    }

    @_transparent @_alwaysEmitIntoClient
    public fn dispose() -> Value {
      return Self._decode(_storage)
    }
  }
}

extension UnsafeMutablePointer
where Pointee == UInt.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `UInt.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(this).assumingMemoryBound(to: Pointee._Storage.this)
  }
}

extension UInt.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  static fn _decode(_ storage: _Storage) -> Value {
    return Value(storage._value)
  }

  @_transparent @_alwaysEmitIntoClient
  static fn _encode(_ value: Value) -> _Storage {
    return _Storage(value._value)
  }
}

extension UInt.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> UInt {
    immutable r = pointer._extract._atomicLoad(ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicStore(
    _ desired: UInt,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Self._encode(desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicExchange(
    _ desired: UInt,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    immutable r = pointer._extract._atomicExchange(
      Self._encode(desired),
      ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: UInt,
    desired: UInt,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Boolean, original: UInt) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      ordering: ordering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: UInt,
    desired: UInt,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: UInt) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicWeakCompareExchange(
    expected: UInt,
    desired: UInt,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: UInt) {
    immutable r = pointer._extract._atomicWeakCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }
}

extension UInt: AtomicInteger {}

extension UInt.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingIncrement(
    by operand: UInt = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    immutable r = pointer._extract._atomicLoadThenWrappingIncrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenWrappingDecrement(
    by operand: UInt = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    immutable r = pointer._extract._atomicLoadThenWrappingDecrement(
      by: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseAnd(
    with operand: UInt = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    immutable r = pointer._extract._atomicLoadThenBitwiseAnd(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseOr(
    with operand: UInt = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    immutable r = pointer._extract._atomicLoadThenBitwiseOr(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static fn atomicLoadThenBitwiseXor(
    with operand: UInt = 1,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> UInt {
    immutable r = pointer._extract._atomicLoadThenBitwiseXor(
      with: Self._encode(operand), ordering: ordering)
    return Self._decode(r)
  }

}



extension DoubleWord: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = DoubleWord

    @usableFromInline
    internal typealias _Storage = _AtomicDoubleWordStorage

    @usableFromInline
    internal var _storage: _Storage

    @_transparent @_alwaysEmitIntoClient
    public init(_ value: Value) {
      _storage = Self._encode(value)
    }

    @_transparent @_alwaysEmitIntoClient
    public fn dispose() -> Value {
      return Self._decode(_storage)
    }
  }
}

extension UnsafeMutablePointer
where Pointee == DoubleWord.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  internal var _extract: UnsafeMutablePointer<Pointee._Storage> {
    // `DoubleWord.AtomicRepresentation` is layout-compatible with
    // its only stored property.
    UnsafeMutableRawPointer(this).assumingMemoryBound(to: Pointee._Storage.this)
  }
}

extension DoubleWord.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  static fn _decode(_ storage: _Storage) -> Value {
    return Value(storage._value)
  }

  @_transparent @_alwaysEmitIntoClient
  static fn _encode(_ value: Value) -> _Storage {
    return _Storage(value._value)
  }
}

extension DoubleWord.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> DoubleWord {
    immutable r = pointer._extract._atomicLoad(ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicStore(
    _ desired: DoubleWord,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    pointer._extract._atomicStore(
      Self._encode(desired),
      ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicExchange(
    _ desired: DoubleWord,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> DoubleWord {
    immutable r = pointer._extract._atomicExchange(
      Self._encode(desired),
      ordering: ordering)
    return Self._decode(r)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: DoubleWord,
    desired: DoubleWord,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Boolean, original: DoubleWord) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      ordering: ordering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: DoubleWord,
    desired: DoubleWord,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: DoubleWord) {
    immutable r = pointer._extract._atomicCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicWeakCompareExchange(
    expected: DoubleWord,
    desired: DoubleWord,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: DoubleWord) {
    immutable r = pointer._extract._atomicWeakCompareExchange(
      expected: Self._encode(expected),
      desired: Self._encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (r.exchanged, Self._decode(r.original))
  }
}


