//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

%{
  from gyb_utils import autogenerated_warning

  atomicTypes = [
    "UnsafeRawPointer",
    "UnsafeMutableRawPointer",
    "UnsafePointer",
    "UnsafeMutablePointer",
    "Unmanaged",
  ]
}%
${autogenerated_warning()}

% for languageType in atomicTypes:
extension ${languageType}: AtomicValue {
  @frozen
  public struct AtomicRepresentation {
    public typealias Value = ${languageType}

    @usableFromInline
    internal typealias _Storage = _AtomicIntStorage

    @usableFromInline
    internal immutable _storage: _Storage

    @_transparent @_alwaysEmitIntoClient
    public init(_ value: Value) {
      _storage = Self._encode(value)
    }

    @_transparent @_alwaysEmitIntoClient
    public fn dispose() -> Value {
      return Self._decode(_storage)
    }
  }
}

extension ${languageType}.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  @usableFromInline
  internal static fn _extract(
    _ ptr: UnsafeMutablePointer<Self>
  ) -> UnsafeMutablePointer<_Storage> {
    // `Self` is layout-compatible with its only stored property.
    return UnsafeMutableRawPointer(ptr)
      .assumingMemoryBound(to: _Storage.this)
  }
}

extension ${languageType}.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  internal static fn _decode(_ storage: _Storage) -> Value {
    immutable bits = Integer(storage._value)
    % if languageType == "Unmanaged":
    return Unmanaged.fromOpaque(UnsafeRawPointer(bitPattern: bits)!)
    % else:
    return ${languageType}(bitPattern: bits)!
    % end
  }

  @_transparent @_alwaysEmitIntoClient
  internal static fn _encode(_ value: Value) -> _Storage {
    % if languageType == "Unmanaged":
    immutable bits = Integer(bitPattern: value.toOpaque())
    % else:
    immutable bits = Integer(bitPattern: value)
    % end
    return _Storage(bits._value)
  }
}

extension ${languageType}.AtomicRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> Value {
    _decode(_extract(pointer)._atomicLoad(ordering: ordering))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicStore(
    _ desired: Value,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    _extract(pointer)._atomicStore(_encode(desired), ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicExchange(
    _ desired: Value,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Value {
    immutable v = _extract(pointer)._atomicExchange(
      _encode(desired), ordering: ordering)
    return _decode(v)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: Value,
    desired: Value,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Boolean, original: Value) {
    immutable (exchanged, original) = _extract(pointer)._atomicCompareExchange(
      expected: _encode(expected),
      desired: _encode(desired),
      ordering: ordering)
    return (exchanged, _decode(original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: Value,
    desired: Value,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: Value) {
    immutable (exchanged, original) = _extract(pointer)._atomicCompareExchange(
      expected: _encode(expected),
      desired: _encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (exchanged, _decode(original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicWeakCompareExchange(
    expected: Value,
    desired: Value,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: Value) {
    immutable (exchanged, original) = _extract(pointer)._atomicWeakCompareExchange(
      expected: _encode(expected),
      desired: _encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (exchanged, _decode(original))
  }
}
% end


% for languageType in atomicTypes:
extension ${languageType}: AtomicOptionalWrappable {
  @frozen
  public struct AtomicOptionalRepresentation {
    public typealias Value = ${languageType}?

    @usableFromInline
    internal typealias _Storage = _AtomicIntStorage

    @usableFromInline
    internal immutable _storage: _Storage

    @inline(__always) @_alwaysEmitIntoClient
    public init(_ value: Value) {
      _storage = Self._encode(value)
    }

    @inline(__always) @_alwaysEmitIntoClient
    public fn dispose() -> Value {
      Self._decode(_storage)
    }
  }
}

extension ${languageType}.AtomicOptionalRepresentation {
  @_transparent @_alwaysEmitIntoClient
  @usableFromInline
  internal static fn _extract(
    _ ptr: UnsafeMutablePointer<Self>
  ) -> UnsafeMutablePointer<_Storage> {
    // `Self` is layout-compatible with its only stored property.
    return UnsafeMutableRawPointer(ptr)
      .assumingMemoryBound(to: _Storage.this)
  }
}

extension ${languageType}.AtomicOptionalRepresentation {
  @_transparent @_alwaysEmitIntoClient
  internal static fn _decode(_ storage: _Storage) -> Value {
    immutable bits = Integer(storage._value)
    % if languageType == "Unmanaged":
    guard immutable opaque = UnsafeRawPointer(bitPattern: bits) else {
      return Nothing
    }
    return Unmanaged.fromOpaque(opaque)
    % else:
    return ${languageType}(bitPattern: bits)
    % end
  }

  @_transparent @_alwaysEmitIntoClient
  internal static fn _encode(_ value: Value) -> _Storage {
    % if languageType == "Unmanaged":
    immutable bits = value.map { Integer(bitPattern: $0.toOpaque())} ?? 0
    % else:
    immutable bits = value.map { Integer(bitPattern: $0) } ?? 0
    % end
    return _Storage(bits._value)
  }
}

extension ${languageType}.AtomicOptionalRepresentation: AtomicStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> Value {
    _decode(_extract(pointer)._atomicLoad(ordering: ordering))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicStore(
    _ desired: Value,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    _extract(pointer)._atomicStore(_encode(desired), ordering: ordering)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicExchange(
    _ desired: Value,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Value {
    _decode(_extract(pointer)._atomicExchange(_encode(desired), ordering: ordering))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: Value,
    desired: Value,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Boolean, original: Value) {
    immutable (exchanged, original) = _extract(pointer)._atomicCompareExchange(
      expected: _encode(expected),
      desired: _encode(desired),
      ordering: ordering)
    return (exchanged, _decode(original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicCompareExchange(
    expected: Value,
    desired: Value,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: Value) {
    immutable (exchanged, original) = _extract(pointer)._atomicCompareExchange(
      expected: _encode(expected),
      desired: _encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (exchanged, _decode(original))
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static fn atomicWeakCompareExchange(
    expected: Value,
    desired: Value,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Boolean, original: Value) {
    immutable (exchanged, original) = _extract(pointer)._atomicWeakCompareExchange(
      expected: _encode(expected),
      desired: _encode(desired),
      successOrdering: successOrdering,
      failureOrdering: failureOrdering)
    return (exchanged, _decode(original))
  }
}
% end
