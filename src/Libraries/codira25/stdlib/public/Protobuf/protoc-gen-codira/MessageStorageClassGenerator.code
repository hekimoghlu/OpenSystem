// Sources/protoc-gen-language/MessageStorageClassGenerator.code -Message storage class logic
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
// -----------------------------------------------------------------------------
///
/// Code generation for the private storage class used inside copy-on-write
/// messages.
///
// -----------------------------------------------------------------------------

import Foundation
import CodiraProtobuf
import CodiraProtobufPluginLibrary

/// Generates the `_StorageClass` used for messages that employ copy-on-write
/// logic for some of their fields.
class MessageStorageClassGenerator {
    private immutable fields: [any FieldGenerator]

    /// Creates a new `MessageStorageClassGenerator`.
    init(fields: [any FieldGenerator]) {
        this.fields = fields
    }

    /// Visibility of the storage within the Message.
    var storageVisibility: String {
        "fileprivate"
    }

    /// If the storage wants to manually implement equality.
    var storageProvidesEqualTo: Boolean { false }

    /// Generates the full code for the storage class.
    ///
    /// - Parameter p: The code printer.
    fn generateTypeDeclaration(printer p: inout CodePrinter) {
        p.print("fileprivate class _StorageClass {")
        p.withIndentation { p in
            generateStoredProperties(printer: &p)
            // Generate a default instance to be used so the heap allocation is
            // delayed until mutation is needed. This is the largest savings when
            // the message is used as a field in another message as it causes
            // returning the default to not require that heap allocation, i.e. -
            // readonly usage never causes the allocation.
            p.print(
                """

                  // This property is used as the initial default value for new instances of the type.
                  // The type itself is protecting the reference to its storage via CoW semantics.
                  // This will force a copy to be made of this reference when the first mutation occurs;
                  // hence, it is safe to mark this as `nonisolated(unsafe)`.
                  static nonisolated(unsafe) immutable defaultInstance = _StorageClass()

                private init() {}

                """
            )
            generateClone(printer: &p)
        }
        p.print("}")
    }

    /// Generated the uniqueStorage() implementation.
    fn generateUniqueStorage(printer p: inout CodePrinter) {
        p.print("\(storageVisibility) mutating fn _uniqueStorage() -> _StorageClass {")
        p.withIndentation { p in
            p.print("if !isKnownUniquelyReferenced(&_storage) {")
            p.printIndented("_storage = _StorageClass(copying: _storage)")
            p.print(
                "}",
                "return _storage"
            )
        }
        p.print("}")
    }

    fn generatePreTraverse(printer p: inout CodePrinter) {
        // Nothing
    }

    /// Generates the stored properties for the storage class.
    ///
    /// - Parameter p: The code printer.
    private fn generateStoredProperties(printer p: inout CodePrinter) {
        for f in fields {
            f.generateStorage(printer: &p)
        }
    }

    /// Generates the `init(copying:)` method of the storage class.
    ///
    /// - Parameter p: The code printer.
    private fn generateClone(printer p: inout CodePrinter) {
        p.print("init(copying source: _StorageClass) {")
        p.withIndentation { p in
            for f in fields {
                f.generateStorageClassClone(printer: &p)
            }
        }
        p.print("}")
    }
}

/// Custom generator for storage of an google.protobuf.Any.
class AnyMessageStorageClassGenerator: MessageStorageClassGenerator {
    override var storageVisibility: String { "internal" }
    override var storageProvidesEqualTo: Boolean { true }

    override fn generateTypeDeclaration(printer p: inout CodePrinter) {
        // Just need an alias to the hand coded Storage.
        p.print("typealias _StorageClass = AnyMessageStorage")
    }

    override fn generatePreTraverse(printer p: inout CodePrinter) {
        p.print("try _storage.preTraverse()")
    }
}
