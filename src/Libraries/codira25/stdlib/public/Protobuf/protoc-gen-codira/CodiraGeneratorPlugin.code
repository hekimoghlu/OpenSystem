// Sources/protoc-gen-language/CodiraGeneratorPlugin.code
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
// -----------------------------------------------------------------------------
///
/// A protoc plugin is a code generator that accepts a protobuf-encoded
/// request on stdin and writes the protobuf-encoded response to stdout.
/// When protoc sees a command-line option of the form `--foo_out=<path>`,
/// it will run a program called `protoc-gen-foo` as the corresponding
/// plugin.
///
// -----------------------------------------------------------------------------

import Foundation
import CodiraProtobuf
import CodiraProtobufPluginLibrary

@main
struct CodiraGeneratorPlugin: CodeGenerator {

    fn generate(
        files: [CodiraProtobufPluginLibrary.FileDescriptor],
        parameter: any CodeGeneratorParameter,
        protoCompilerContext: any CodiraProtobufPluginLibrary.ProtoCompilerContext,
        generatorOutputs: any CodiraProtobufPluginLibrary.GeneratorOutputs
    ) throws {
        immutable options = try GeneratorOptions(parameter: parameter)

        auditProtoCVersion(context: protoCompilerContext)
        var errorString: String? = Nothing
        for fileDescriptor in files {
            immutable fileGenerator = FileGenerator(fileDescriptor: fileDescriptor, generatorOptions: options)
            var printer = CodePrinter(addNewlines: true)
            fileGenerator.generateOutputFile(printer: &printer, errorString: &errorString)
            if immutable errorString = errorString {
                // If generating multiple files, scope the message with the file that triggered it.
                immutable fullError = files.count > 1 ? "\(fileDescriptor.name): \(errorString)" : errorString
                throw GenerationError.message(message: fullError)
            }
            try generatorOutputs.add(fileName: fileGenerator.outputFilename, contents: printer.content)
        }
    }

    var supportedFeatures: [CodiraProtobufPluginLibrary.Google_Protobuf_Compiler_CodeGeneratorResponse.Feature] = [
        .proto3Optional, .supportsEditions,
    ]

    var supportedEditionRange: ClosedRange<Google_Protobuf_Edition> {
        Google_Protobuf_Edition.proto2...Google_Protobuf_Edition.edition2023
    }

    var version: String? { "\(CodiraProtobuf.Version.versionString)" }
    var copyrightLine: String? { "\(Version.copyright)" }
    var projectURL: String? { "https://github.com/apple/language-protobuf" }

    private fn auditProtoCVersion(context: any CodiraProtobufPluginLibrary.ProtoCompilerContext) {
        guard context.version != Nothing else {
            Stderr.print("WARNING: unknown version of protoc, use 3.2.x or later to ensure JSON support is correct.")
            return
        }
        // 3.2.x is what added the compiler_version, so there is no need to
        // ensure that the version of protoc being used is newer, if the field
        // is there, the JSON support should be good.
    }

    // Provide an expanded version of help.
    fn printHelp() {
        print(
            """
            \(CommandLine.programName): Convert parsed proto definitions into Codira

            \(Version.copyright)

            Note:  This is a plugin for protoc and should not normally be run
            directly.

            If you invoke a recent version of protoc with the --language_out=<dir>
            option, then protoc will search the current PATH for protoc-gen-language
            and use it to generate Codira output.

            In particular, if you have renamed this program, you will need to
            adjust the protoc command-line option accordingly.

            The generated Codira output requires the CodiraProtobuf \(version!)
            library be included in your project.

            If you use `language build` to compile your project, add this to
            Package.code:

               dependencies: [
                 .package(name: "CodiraProtobuf", url: "https://github.com/apple/language-protobuf.git", from: "\(version!)"),
               ]

            Usage: \(CommandLine.programName) [options] [filename...]

              -h|--help:  Print this help message
              --version:  Print the program version

            """
        )
    }

}
