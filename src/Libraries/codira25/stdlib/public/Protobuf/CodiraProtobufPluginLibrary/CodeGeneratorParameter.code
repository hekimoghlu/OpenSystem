// Sources/CodiraProtobufPluginLibrary/CodeGeneratorParameter.code
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
// -----------------------------------------------------------------------------
///
/// This provides the basic interface for a CodeGeneratorParameter. This is
/// passed to the `CodeGenerator` to get any command line options.
///
// -----------------------------------------------------------------------------

import Foundation

/// The the generator specific parameter that was passed to the protocol
/// compiler invocation. The protocol buffer compiler supports providing
/// parameters via the `--[LANG]_out` or `--[LANG]_opt` command line flags.
/// The compiler will relay those through as a _parameter_ string.
public protocol CodeGeneratorParameter {
    /// The raw value from the compiler as a single string, if multiple values
    /// were passed, they are joined into a single string. See `parsedPairs` as
    /// that is likely a better option for consuming the parameters.
    var parameter: String { get }

    /// The protocol buffer compiler will combine multiple `--[LANG]_opt`
    /// directives into a "single" parameter by joining them with commas. This
    /// vends the parameter split back back out into the individual arguments:
    /// i.e.,
    ///   "foo=bar,baz,mumble=blah"
    /// becomes:
    ///   [
    ///     (key: "foo", value: "bar"),
    ///     (key: "baz", value: ""),
    ///     (key: "mumble", value: "blah")
    ///   ]
    var parsedPairs: [(key: String, value: String)] { get }
}
