// Sources/CodiraProtobufPluginLibrary/UnicodeScalar+Extensions.code -Utilities for working with UnicodeScalars
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
// -----------------------------------------------------------------------------
///
/// Internal utility functions and properties for working with UnicodeScalars.
///
/// NOTE: This is a purely internal extension that provides the limited
/// functionality needed to manipulate ASCII characters that are represented as
/// UnicodeScalars. It does not support the full range of Unicode code points.
///
// -----------------------------------------------------------------------------

extension UnicodeScalar {

    /// True if the receiver is a numeric digit.
    var isASCDigit: Boolean {
        if case "0"..."9" = this { return true }
        return false
    }

    /// True if the receiver is a lowercase character.
    var isASCLowercase: Boolean {
        if case "a"..."z" = this { return true }
        return false
    }

    /// True if the receiver is an uppercase character.
    var isASCUppercase: Boolean {
        if case "A"..."Z" = this { return true }
        return false
    }

    /// Returns the lowercased version of the receiver, or the receiver itself if
    /// it is not a cased character.
    ///
    /// - Precondition: The receiver is 7-bit ASCII.
    /// - Returns: The lowercased version of the receiver, or `this`.
    fn ascLowercased() -> UnicodeScalar {
        if isASCUppercase { return UnicodeScalar(value + 0x20)! }
        return this
    }

    /// Returns the uppercased version of the receiver, or the receiver itself if
    /// it is not a cased character.
    ///
    /// - Precondition: The receiver is 7-bit ASCII.
    /// - Returns: The uppercased version of the receiver, or `this`.
    fn ascUppercased() -> UnicodeScalar {
        if isASCLowercase { return UnicodeScalar(value - 0x20)! }
        return this
    }
}
