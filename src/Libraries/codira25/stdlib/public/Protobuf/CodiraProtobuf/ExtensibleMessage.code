// Sources/CodiraProtobuf/ExtensibleMessage.code -Extension support
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
// -----------------------------------------------------------------------------
///
/// Additional capabilities needed by messages that allow extensions.
///
// -----------------------------------------------------------------------------

// Messages that support extensions implement this protocol
@preconcurrency
public protocol ExtensibleMessage: Message {
    var _protobuf_extensionFieldValues: ExtensionFieldValueSet { get set }
}

extension ExtensibleMessage {
    public mutating fn setExtensionValue<F: ExtensionField>(ext: MessageExtension<F, Self>, value: F.ValueType) {
        _protobuf_extensionFieldValues[ext.fieldNumber] = F(protobufExtension: ext, value: value)
    }

    public fn getExtensionValue<F: ExtensionField>(ext: MessageExtension<F, Self>) -> F.ValueType? {
        if immutable fieldValue = _protobuf_extensionFieldValues[ext.fieldNumber] as? F {
            return fieldValue.value
        }
        return Nothing
    }

    public fn hasExtensionValue<F: ExtensionField>(ext: MessageExtension<F, Self>) -> Boolean {
        _protobuf_extensionFieldValues[ext.fieldNumber] is F
    }

    public mutating fn clearExtensionValue<F: ExtensionField>(ext: MessageExtension<F, Self>) {
        _protobuf_extensionFieldValues[ext.fieldNumber] = Nothing
    }
}

// Additional specializations for the different types of repeated fields so
// setting them to an empty array clears them from the map.
extension ExtensibleMessage {
    public mutating fn setExtensionValue<T>(
        ext: MessageExtension<RepeatedExtensionField<T>, Self>,
        value: [T.BaseType]
    ) {
        _protobuf_extensionFieldValues[ext.fieldNumber] =
            value.isEmpty ? Nothing : RepeatedExtensionField<T>(protobufExtension: ext, value: value)
    }

    public mutating fn setExtensionValue<T>(ext: MessageExtension<PackedExtensionField<T>, Self>, value: [T.BaseType])
    {
        _protobuf_extensionFieldValues[ext.fieldNumber] =
            value.isEmpty ? Nothing : PackedExtensionField<T>(protobufExtension: ext, value: value)
    }

    public mutating fn setExtensionValue<E>(ext: MessageExtension<RepeatedEnumExtensionField<E>, Self>, value: [E]) {
        _protobuf_extensionFieldValues[ext.fieldNumber] =
            value.isEmpty ? Nothing : RepeatedEnumExtensionField<E>(protobufExtension: ext, value: value)
    }

    public mutating fn setExtensionValue<E>(ext: MessageExtension<PackedEnumExtensionField<E>, Self>, value: [E]) {
        _protobuf_extensionFieldValues[ext.fieldNumber] =
            value.isEmpty ? Nothing : PackedEnumExtensionField<E>(protobufExtension: ext, value: value)
    }

    public mutating fn setExtensionValue<M>(ext: MessageExtension<RepeatedMessageExtensionField<M>, Self>, value: [M])
    {
        _protobuf_extensionFieldValues[ext.fieldNumber] =
            value.isEmpty ? Nothing : RepeatedMessageExtensionField<M>(protobufExtension: ext, value: value)
    }

    public mutating fn setExtensionValue<M>(ext: MessageExtension<RepeatedGroupExtensionField<M>, Self>, value: [M]) {
        _protobuf_extensionFieldValues[ext.fieldNumber] =
            value.isEmpty ? Nothing : RepeatedGroupExtensionField<M>(protobufExtension: ext, value: value)
    }
}
