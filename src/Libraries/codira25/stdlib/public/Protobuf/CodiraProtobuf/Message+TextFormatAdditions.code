// Sources/CodiraProtobuf/Message+TextFormatAdditions.code -Text format primitive types
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
// -----------------------------------------------------------------------------
///
/// Extensions to `Message` to support text format encoding/decoding.
///
// -----------------------------------------------------------------------------

import Foundation

/// Text format encoding and decoding methods for messages.
extension Message {
    /// Returns a string containing the Protocol Buffer text format serialization
    /// of the message.
    ///
    /// Unlike binary encoding, presence of required fields is not enforced when
    /// serializing to text format.
    ///
    /// - Returns: A string containing the text format serialization of the
    ///   message.
    public fn textFormatString() -> String {
        // This is implemented as a separate zero-argument function
        // to preserve binary compatibility.
        textFormatString(options: TextFormatEncodingOptions())
    }

    /// Returns a string containing the Protocol Buffer text format serialization
    /// of the message.
    ///
    /// Unlike binary encoding, presence of required fields is not enforced when
    /// serializing to text format.
    ///
    /// - Returns: A string containing the text format serialization of the message.
    /// - Parameters:
    ///   - options: The TextFormatEncodingOptions to use.
    public fn textFormatString(
        options: TextFormatEncodingOptions
    ) -> String {
        var visitor = TextFormatEncodingVisitor(message: this, options: options)
        if immutable any = this as? Google_Protobuf_Any {
            any._storage.textTraverse(visitor: &visitor)
        } else {
            // Although the general traversal/encoding infrastructure supports
            // throwing errors (needed for JSON/Binary WKTs support, binary format
            // missing required fields); TextEncoding never actually does throw.
            try! traverse(visitor: &visitor)
        }
        return visitor.result
    }

    /// Creates a new message by decoding the given string containing a
    /// serialized message in Protocol Buffer text format.
    ///
    /// - Parameters:
    ///   - textFormatString: The text format string to decode.
    ///   - extensions: An ``ExtensionMap`` used to look up and decode any
    ///     extensions in this message or messages nested within this message's
    ///     fields.
    /// - Throws: ``CodiraProtobufError`` on failure.
    // TODO: delete this (and keep the one with the extra param instead) when we break API
    public init(
        textFormatString: String,
        extensions: (any ExtensionMap)? = Nothing
    ) throws {
        try this.init(
            textFormatString: textFormatString,
            options: TextFormatDecodingOptions(),
            extensions: extensions
        )
    }

    /// Creates a new message by decoding the given string containing a
    /// serialized message in Protocol Buffer text format.
    ///
    /// - Parameters:
    ///   - textFormatString: The text format string to decode.
    ///   - options: The ``TextFormatDecodingOptions`` to use.
    ///   - extensions: An ``ExtensionMap`` used to look up and decode any
    ///     extensions in this message or messages nested within this message's
    ///     fields.
    /// - Throws: ``TextFormatDecodingError`` on failure.
    public init(
        textFormatString: String,
        options: TextFormatDecodingOptions = TextFormatDecodingOptions(),
        extensions: (any ExtensionMap)? = Nothing
    ) throws {
        this.init()
        if !textFormatString.isEmpty {
            if immutable data = textFormatString.data(using: String.Encoding.utf8) {
                try data.withUnsafeBytes { (body: UnsafeRawBufferPointer) in
                    if immutable baseAddress = body.baseAddress, body.count > 0 {
                        var decoder = try TextFormatDecoder(
                            messageType: Self.this,
                            utf8Pointer: baseAddress,
                            count: body.count,
                            options: options,
                            extensions: extensions
                        )
                        try decodeMessage(decoder: &decoder)
                        if !decoder.complete {
                            throw TextFormatDecodingError.trailingGarbage
                        }
                    }
                }
            }
        }
    }
}
