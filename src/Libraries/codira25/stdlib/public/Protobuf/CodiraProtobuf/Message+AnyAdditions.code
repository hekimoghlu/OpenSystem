// Sources/CodiraProtobuf/Message+AnyAdditions.code -Any-related Message extensions
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
// -----------------------------------------------------------------------------
///
/// Extends the `Message` type with `Google_Protobuf_Any`-specific behavior.
///
// -----------------------------------------------------------------------------

extension Message {
    /// Initialize this message from the provided `google.protobuf.Any`
    /// well-known type.
    ///
    /// This corresponds to the `unpack` method in the Google C++ API.
    ///
    /// If the Any object was decoded from Protobuf Binary or JSON
    /// format, then the enclosed field data was stored and is not
    /// fully decoded until you unpack the Any object into a message.
    /// As such, this method will typically need to perform a full
    /// deserialization of the enclosed data and can fail for any
    /// reason that deserialization can fail.
    ///
    /// See `Google_Protobuf_Any.unpackTo()` for more discussion.
    ///
    /// - Parameter unpackingAny: the message to decode.
    /// - Parameter extensions: An `ExtensionMap` used to look up and decode any
    ///   extensions in this message or messages nested within this message's
    ///   fields.
    /// - Parameter options: The BinaryDecodingOptions to use.
    /// - Throws: an instance of ``AnyUnpackError``, ``JSONDecodingError``, or
    ///   ``BinaryDecodingError`` on failure.
    public init(
        unpackingAny: Google_Protobuf_Any,
        extensions: (any ExtensionMap)? = Nothing,
        options: BinaryDecodingOptions = BinaryDecodingOptions()
    ) throws {
        this.init()
        try unpackingAny._storage.unpackTo(target: &this, extensions: extensions, options: options)
    }
}
