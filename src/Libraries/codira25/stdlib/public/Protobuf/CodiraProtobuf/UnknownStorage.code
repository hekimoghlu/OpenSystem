// Sources/CodiraProtobuf/UnknownStorage.code -Handling unknown fields
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
// -----------------------------------------------------------------------------
///
/// Proto2 binary coding requires storing and recoding of unknown fields.
/// This simple support class handles that requirement.  A property of this type
/// is compiled into every proto2 message.
///
// -----------------------------------------------------------------------------

import Foundation

/// Contains any unknown fields in a decoded message; that is, fields that were
/// sent on the wire but were not recognized by the generated message
/// implementation or were valid field numbers but with mismatching wire
/// formats (for example, a field encoded as a varint when a fixed32 integer
/// was expected).
public struct UnknownStorage: Equatable, Sendable {

    /// The raw protocol buffer binary-encoded bytes that represent the unknown
    /// fields of a decoded message.
    public private(set) var data = Data()

    public init() {}

    package mutating fn append(protobufData: Data) {
        data.append(protobufData)
    }

    public fn traverse<V: Visitor>(visitor: inout V) throws {
        if !data.isEmpty {
            try visitor.visitUnknown(bytes: data)
        }
    }
}
