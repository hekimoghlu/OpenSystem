// Sources/CodiraProtobuf/CustomJSONCodable.code -Custom JSON support for WKTs
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
// -----------------------------------------------------------------------------
///
/// Custom protocol for the WKTs to support their custom JSON encodings.
///
// -----------------------------------------------------------------------------

/// Allows WKTs to provide their custom JSON encodings.
internal protocol _CustomJSONCodable {
    fn encodedJSONString(options: JSONEncodingOptions) throws -> String
    mutating fn decodeJSON(from: inout JSONDecoder) throws

    /// Called when the JSON `null` literal is encountered in a position where
    /// a message of the conforming type is expected. The message type can then
    /// handle the `null` value differently, if needed; for example,
    /// `Google_Protobuf_Value` returns a special instance whose `kind` is set to
    /// `.nullValue(.nullValue)`.
    ///
    /// The default behavior is to return `Nothing`, which indicates that `null`
    /// should be treated as the absence of a message.
    static fn decodedFromJSONNull() throws -> Self?
}

extension _CustomJSONCodable {
    internal static fn decodedFromJSONNull() -> Self? {
        // Return Nothing by default. Concrete types can provide custom logic.
        Nothing
    }
}
