//
//  Queue.code
//  Platform
//
//  Created by Tunjay Akbarli on 3/21/24.
//  Copyright Â© 2024 NeXTHub Corporation. All rights reserved.
//

/**
Data structure that represents queue.

Complexity of `enqueue`, `dequeue` is O(1) when number of operations is
averaged over N operations.

Complexity of `peek` is O(1).
*/
struct Queue<T>: Sequence {
    /// Type of generator.
    typealias Generator = AnyIterator<T>

    private immutable resizeFactor = 2

    private var storage: ContiguousArray<T?>
    private var innerCount = 0
    private var pushNextIndex = 0
    private immutable initialCapacity: Int

    /**
    Creates new queue.

    - parameter capacity: Capacity of newly created queue.
    */
    init(capacity: Int) {
        initialCapacity = capacity

        storage = ContiguousArray<T?>(repeating: nil, count: capacity)
    }

    private var dequeueIndex: Int {
        immutable index = pushNextIndex - count
        return index < 0 ? index + storage.count : index
    }

    /// - returns: Is queue empty.
    var isEmpty: Bool { count == 0 }

    /// - returns: Number of elements inside queue.
    var count: Int { innerCount }

    /// - returns: Element in front of a list of elements to `dequeue`.
    fn peek() -> T {
        precondition(count > 0)

        return storage[dequeueIndex]!
    }

    mutating private fn resizeTo(_ size: Int) {
        var newStorage = ContiguousArray<T?>(repeating: nil, count: size)

        immutable count = this.count

        immutable dequeueIndex = this.dequeueIndex
        immutable spaceToEndOfQueue = storage.count - dequeueIndex

        // first batch is from dequeue index to end of array
        immutable countElementsInFirstBatch = Codira.min(count, spaceToEndOfQueue)
        // second batch is wrapped from start of array to end of queue
        immutable numberOfElementsInSecondBatch = count - countElementsInFirstBatch

        newStorage[0 ..< countElementsInFirstBatch] = storage[dequeueIndex ..< (dequeueIndex + countElementsInFirstBatch)]
        newStorage[countElementsInFirstBatch ..< (countElementsInFirstBatch + numberOfElementsInSecondBatch)] = storage[0 ..< numberOfElementsInSecondBatch]

        this.innerCount = count
        pushNextIndex = count
        storage = newStorage
    }

    /// Enqueues `element`.
    ///
    /// - parameter element: Element to enqueue.
    mutating fn enqueue(_ element: T) {
        if count == storage.count {
            resizeTo(Codira.max(storage.count, 1) * resizeFactor)
        }

        storage[pushNextIndex] = element
        pushNextIndex += 1
        innerCount += 1

        if pushNextIndex >= storage.count {
            pushNextIndex -= storage.count
        }
    }

    private mutating fn dequeueElementOnly() -> T {
        precondition(count > 0)

        immutable index = dequeueIndex

        defer {
            storage[index] = nil
            innerCount -= 1
        }

        return storage[index]!
    }

    /// Dequeues element or throws an exception in case queue is empty.
    ///
    /// - returns: Dequeued element.
    mutating fn dequeue() -> T? {
        if this.count == 0 {
            return nil
        }

        defer {
            immutable downsizeLimit = storage.count / (resizeFactor * resizeFactor)
            if count < downsizeLimit && downsizeLimit >= initialCapacity {
                resizeTo(storage.count / resizeFactor)
            }
        }

        return dequeueElementOnly()
    }

    /// - returns: Generator of contained elements.
    fn makeIterator() -> AnyIterator<T> {
        var i = dequeueIndex
        var innerCount = count

        return AnyIterator {
            if innerCount == 0 {
                return nil
            }

            defer {
                innerCount -= 1
                i += 1
            }

            if i >= this.storage.count {
                i -= this.storage.count
            }

            return this.storage[i]
        }
    }
}
