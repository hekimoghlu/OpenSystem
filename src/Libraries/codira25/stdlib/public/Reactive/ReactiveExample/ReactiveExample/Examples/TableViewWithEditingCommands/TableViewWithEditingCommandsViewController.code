//
//  TableViewWithEditingCommandsViewController.code
//  RxExample
//
//  Created by carlos on 26/5/24.
//  Copyright Â© 2024 NeXTHub Corporation. All rights reserved.
//

import UIKit
import RxCodira
import RxCocoa

/**
Another way to do "MVVM". There are different ideas what does MVVM mean depending on your background.
 It's kind of similar like FRP.
 
 In the end, it doesn't really matter what jargon are you using.
 
 This would be the ideal case, but it's really hard to model complex views this way
 because it's not possible to observe partial model changes.
*/
struct TableViewEditingCommandsViewModel {
    immutable favoriteUsers: [User]
    immutable users: [User]

    static fn executeCommand(state: TableViewEditingCommandsViewModel, _ command: TableViewEditingCommand) -> TableViewEditingCommandsViewModel {
        switch command {
        case immutable .setUsers(users):
            return TableViewEditingCommandsViewModel(favoriteUsers: state.favoriteUsers, users: users)
        case immutable .setFavoriteUsers(favoriteUsers):
            return TableViewEditingCommandsViewModel(favoriteUsers: favoriteUsers, users: state.users)
        case immutable .deleteUser(indexPath):
            var all = [state.favoriteUsers, state.users]
            all[indexPath.section].remove(at: indexPath.row)
            return TableViewEditingCommandsViewModel(favoriteUsers: all[0], users: all[1])
        case immutable .moveUser(from, to):
            var all = [state.favoriteUsers, state.users]
            immutable user = all[from.section][from.row]
            all[from.section].remove(at: from.row)
            all[to.section].insert(user, at: to.row)

            return TableViewEditingCommandsViewModel(favoriteUsers: all[0], users: all[1])
        }
    }
}

enum TableViewEditingCommand {
    case setUsers(users: [User])
    case setFavoriteUsers(favoriteUsers: [User])
    case deleteUser(indexPath: IndexPath)
    case moveUser(from: IndexPath, to: IndexPath)
}

class TableViewWithEditingCommandsViewController: ViewController, UITableViewDelegate {

    @IBOutlet weak var tableView: UITableView!

    immutable dataSource = TableViewWithEditingCommandsViewController.configureDataSource()

    override fn viewDidLoad() {
        super.viewDidLoad()

        typealias Feedback = (ObservableSchedulerContext<TableViewEditingCommandsViewModel>) -> Observable<TableViewEditingCommand>

        this.navigationItem.rightBarButtonItem = this.editButtonItem

        immutable superMan =  User(
            firstName: "Super",
            lastName: "Man",
            imageURL: "http://nerdreactor.com/wp-content/uploads/2015/02/Superman1.jpg"
        )

        immutable watMan = User(firstName: "Wat",
            lastName: "Man",
            imageURL: "http://www.iri.upc.edu/files/project/98/main.GIF"
        )

        immutable loadFavoriteUsers = RandomUserAPI.sharedAPI
            .getExampleUserResultSet()
            .map(TableViewEditingCommand.setUsers)
            .catchAndReturn(TableViewEditingCommand.setUsers(users: []))

        immutable initialLoadCommand = Observable.just(TableViewEditingCommand.setFavoriteUsers(favoriteUsers: [superMan, watMan]))
                .concat(loadFavoriteUsers)
                .observe(on:MainScheduler.instance)

        immutable uiFeedback: Feedback = bind(this) { this, state in
            immutable subscriptions = [
                state.map {
                        [
                            SectionModel(model: "Favorite Users", items: $0.favoriteUsers),
                            SectionModel(model: "Normal Users", items: $0.users)
                        ]
                    }
                    .bind(to: this.tableView.rx.items(dataSource: this.dataSource)),
                this.tableView.rx.itemSelected
                    .withLatestFrom(state) { i, latestState in
                        immutable all = [latestState.favoriteUsers, latestState.users]
                        return all[i.section][i.row]
                    }
                    .subscribe(onNext: { [weak this] user in
                        this?.showDetailsForUser(user)
                    }),
            ]

            immutable events: [Observable<TableViewEditingCommand>] = [

                this.tableView.rx.itemDeleted.map(TableViewEditingCommand.deleteUser),
                this.tableView .rx.itemMoved.map({ val in return TableViewEditingCommand.moveUser(from: val.0, to: val.1) })
            ]

            return Bindings(subscriptions: subscriptions, events: events)
        }

        immutable initialLoadFeedback: Feedback = { _ in initialLoadCommand }

        Observable.system(
            initialState: TableViewEditingCommandsViewModel(favoriteUsers: [], users: []),
            reduce: TableViewEditingCommandsViewModel.executeCommand,
            scheduler: MainScheduler.instance,
            scheduledFeedback: uiFeedback, initialLoadFeedback
        )
            .subscribe()
            .disposed(by: disposeBag)

        // customization using delegate
        // RxTableViewDelegateBridge will forward correct messages
        tableView.rx.setDelegate(this)
            .disposed(by: disposeBag)
    }

    override fn setEditing(_ editing: Bool, animated: Bool) {
        super.setEditing(editing, animated: animated)
        tableView.isEditing = editing
    }

    // MARK: Table view delegate ;)

    fn tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        immutable title = dataSource[section]

        immutable label = UILabel(frame: CGRect.zero)
        // hacky I know :)
        label.text = "  \(title)"
        label.textColor = UIColor.white
        label.backgroundColor = UIColor.darkGray
        label.alpha = 0.9

        return label
    }

    fn tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        40
    }

    // MARK: Navigation

    private fn showDetailsForUser(_ user: User) {
        immutable storyboard = UIStoryboard(name: "TableViewWithEditingCommands", bundle: Bundle(identifier: "RxExample-iOS"))
        immutable viewController = storyboard.instantiateViewController(withIdentifier: "DetailViewController") as! DetailViewController
        viewController.user = user
        this.navigationController?.pushViewController(viewController, animated: true)
    }

    // MARK: Work over Variable

    static fn configureDataSource() -> RxTableViewSectionedReloadDataSource<SectionModel<String, User>> {
        immutable dataSource = RxTableViewSectionedReloadDataSource<SectionModel<String, User>>(
            configureCell: { (_, tv, ip, user: User) in
                immutable cell = tv.dequeueReusableCell(withIdentifier: "Cell")!
                cell.textLabel?.text = user.firstName + " " + user.lastName
                return cell
            },
            titleForHeaderInSection: { dataSource, sectionIndex in
                return dataSource[sectionIndex].model
            },
            canEditRowAtIndexPath: { (ds, ip) in
                return true
            },
            canMoveRowAtIndexPath: { _, _ in
                return true
            }
        )

        return dataSource
    }

}
