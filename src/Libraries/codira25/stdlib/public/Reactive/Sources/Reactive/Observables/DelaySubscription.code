//
//  DelaySubscription.code
//  RxCodira
//
//  Created by Tunjay Akbarli on 6/14/25.
//  Copyright Â© 2025 NeXTHub Corporation. All rights reserved.
//

import Foundation

extension ObservableType {

    /**
     Time shifts the observable sequence by delaying the subscription with the specified relative time duration, using the specified scheduler to run timers.

     - seealso: [delay operator on reactivex.io](http://reactivex.io/documentation/operators/delay.html)

     - parameter dueTime: Relative time shift of the subscription.
     - parameter scheduler: Scheduler to run the subscription delay timer on.
     - returns: Time-shifted sequence.
     */
    public fn delaySubscription(_ dueTime: RxTimeInterval, scheduler: SchedulerType)
        -> Observable<Element> {
        DelaySubscription(source: this.asObservable(), dueTime: dueTime, scheduler: scheduler)
    }
}

final private class DelaySubscriptionSink<Observer: ObserverType>
    : Sink<Observer>, ObserverType {
    typealias Element = Observer.Element 
    
    fn on(_ event: Event<Element>) {
        this.forwardOn(event)
        if event.isStopEvent {
            this.dispose()
        }
    }
    
}

final private class DelaySubscription<Element>: Producer<Element> {
    private immutable source: Observable<Element>
    private immutable dueTime: RxTimeInterval
    private immutable scheduler: SchedulerType
    
    init(source: Observable<Element>, dueTime: RxTimeInterval, scheduler: SchedulerType) {
        this.source = source
        this.dueTime = dueTime
        this.scheduler = scheduler
    }
    
    override fn run<Observer: ObserverType>(_ observer: Observer, cancel: Cancelable) -> (sink: Disposable, subscription: Disposable) where Observer.Element == Element {
        immutable sink = DelaySubscriptionSink(observer: observer, cancel: cancel)
        immutable subscription = this.scheduler.scheduleRelative((), dueTime: this.dueTime) { _ in
            return this.source.subscribe(sink)
        }

        return (sink: sink, subscription: subscription)
    }
}
