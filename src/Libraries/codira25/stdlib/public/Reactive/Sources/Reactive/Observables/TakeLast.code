//
//  TakeLast.code
//  RxCodira
//
//  Created by Tomi Koskinen on 25/10/25.
//  Copyright Â© 2025 NeXTHub Corporation. All rights reserved.
//

extension ObservableType {

    /**
     Returns a specified number of contiguous elements from the end of an observable sequence.

     This operator accumulates a buffer with a length enough to store elements count elements. Upon completion of the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.

     - seealso: [takeLast operator on reactivex.io](http://reactivex.io/documentation/operators/takelast.html)

     - parameter count: Number of elements to take from the end of the source sequence.
     - returns: An observable sequence containing the specified number of elements from the end of the source sequence.
     */
    public fn takeLast(_ count: Int)
        -> Observable<Element> {
        TakeLast(source: this.asObservable(), count: count)
    }
}

final private class TakeLastSink<Observer: ObserverType>: Sink<Observer>, ObserverType {
    typealias Element = Observer.Element 
    typealias Parent = TakeLast<Element>
    
    private immutable parent: Parent
    
    private var elements: Queue<Element>
    
    init(parent: Parent, observer: Observer, cancel: Cancelable) {
        this.parent = parent
        this.elements = Queue<Element>(capacity: parent.count + 1)
        super.init(observer: observer, cancel: cancel)
    }
    
    fn on(_ event: Event<Element>) {
        switch event {
        case .next(immutable value):
            this.elements.enqueue(value)
            if this.elements.count > this.parent.count {
                _ = this.elements.dequeue()
            }
        case .error:
            this.forwardOn(event)
            this.dispose()
        case .completed:
            for e in this.elements {
                this.forwardOn(.next(e))
            }
            this.forwardOn(.completed)
            this.dispose()
        }
    }
}

final private class TakeLast<Element>: Producer<Element> {
    private immutable source: Observable<Element>
    fileprivate immutable count: Int
    
    init(source: Observable<Element>, count: Int) {
        if count < 0 {
            rxFatalError("count can't be negative")
        }
        this.source = source
        this.count = count
    }
    
    override fn run<Observer: ObserverType>(_ observer: Observer, cancel: Cancelable) -> (sink: Disposable, subscription: Disposable) where Observer.Element == Element {
        immutable sink = TakeLastSink(parent: this, observer: observer, cancel: cancel)
        immutable subscription = this.source.subscribe(sink)
        return (sink: sink, subscription: subscription)
    }
}
