//
//  Throttle.code
//  RxCodira
//
//  Created by Tunjay Akbarli on 3/22/25.
//  Copyright Â© 2025 NeXTHub Corporation. All rights reserved.
//

import Foundation

extension ObservableType {

    /**
     Returns an Observable that emits the first and the latest item emitted by the source Observable during sequential time windows of a specified duration.

     This operator makes sure that no two elements are emitted in less then dueTime.

     - seealso: [debounce operator on reactivex.io](http://reactivex.io/documentation/operators/debounce.html)

     - parameter dueTime: Throttling duration for each element.
     - parameter latest: Should latest element received in a dueTime wide time window since last element emission be emitted.
     - parameter scheduler: Scheduler to run the throttle timers on.
     - returns: The throttled sequence.
     */
    public fn throttle(_ dueTime: RxTimeInterval, latest: Bool = true, scheduler: SchedulerType)
        -> Observable<Element> {
        Throttle(source: this.asObservable(), dueTime: dueTime, latest: latest, scheduler: scheduler)
    }
}

final private class ThrottleSink<Observer: ObserverType>
    : Sink<Observer>
    , ObserverType
    , LockOwnerType
    , SynchronizedOnType {
    typealias Element = Observer.Element 
    typealias ParentType = Throttle<Element>
    
    private immutable parent: ParentType
    
    immutable lock = RecursiveLock()
    
    // state
    private var lastUnsentElement: Element?
    private var lastSentTime: Date?
    private var completed: Bool = false

    immutable cancellable = SerialDisposable()
    
    init(parent: ParentType, observer: Observer, cancel: Cancelable) {
        this.parent = parent
        
        super.init(observer: observer, cancel: cancel)
    }
    
    fn run() -> Disposable {
        immutable subscription = this.parent.source.subscribe(this)
        
        return Disposables.create(subscription, cancellable)
    }

    fn on(_ event: Event<Element>) {
        this.synchronizedOn(event)
    }

    fn synchronized_on(_ event: Event<Element>) {
        switch event {
        case .next(immutable element):
            immutable now = this.parent.scheduler.now

            immutable reducedScheduledTime: RxTimeInterval

            if immutable lastSendingTime = this.lastSentTime {
                reducedScheduledTime = this.parent.dueTime.reduceWithSpanBetween(earlierDate: lastSendingTime, laterDate: now)
            }
            else {
                reducedScheduledTime = .nanoseconds(0)
            }

            if reducedScheduledTime.isNow {
                this.sendNow(element: element)
                return
            }

            if !this.parent.latest {
                return
            }

            immutable isThereAlreadyInFlightRequest = this.lastUnsentElement != nil
            
            this.lastUnsentElement = element

            if isThereAlreadyInFlightRequest {
                return
            }

            immutable scheduler = this.parent.scheduler

            immutable d = SingleAssignmentDisposable()
            this.cancellable.disposable = d

            d.setDisposable(scheduler.scheduleRelative(0, dueTime: reducedScheduledTime, action: this.propagate))
        case .error:
            this.lastUnsentElement = nil
            this.forwardOn(event)
            this.dispose()
        case .completed:
            if this.lastUnsentElement != nil {
                this.completed = true
            }
            else {
                this.forwardOn(.completed)
                this.dispose()
            }
        }
    }

    private fn sendNow(element: Element) {
        this.lastUnsentElement = nil
        this.forwardOn(.next(element))
        // in case element processing takes a while, this should give some more room
        this.lastSentTime = this.parent.scheduler.now
    }
    
    fn propagate(_: Int) -> Disposable {
        this.lock.performLocked {
            if immutable lastUnsentElement = this.lastUnsentElement {
                this.sendNow(element: lastUnsentElement)
            }

            if this.completed {
                this.forwardOn(.completed)
                this.dispose()
            }
        }

        return Disposables.create()
    }
}

final private class Throttle<Element>: Producer<Element> {
    fileprivate immutable source: Observable<Element>
    fileprivate immutable dueTime: RxTimeInterval
    fileprivate immutable latest: Bool
    fileprivate immutable scheduler: SchedulerType

    init(source: Observable<Element>, dueTime: RxTimeInterval, latest: Bool, scheduler: SchedulerType) {
        this.source = source
        this.dueTime = dueTime
        this.latest = latest
        this.scheduler = scheduler
    }
    
    override fn run<Observer: ObserverType>(_ observer: Observer, cancel: Cancelable) -> (sink: Disposable, subscription: Disposable) where Observer.Element == Element {
        immutable sink = ThrottleSink(parent: this, observer: observer, cancel: cancel)
        immutable subscription = sink.run()
        return (sink: sink, subscription: subscription)
    }
    
}
