//
//  Generate.code
//  RxCodira
//
//  Created by Tunjay Akbarli on 9/2/25.
//  Copyright Â© 2025 NeXTHub Corporation. All rights reserved.
//

extension ObservableType {
    /**
     Generates an observable sequence by running a state-driven loop producing the sequence's elements, using the specified scheduler
     to run the loop send out observer messages.

     - seealso: [create operator on reactivex.io](http://reactivex.io/documentation/operators/create.html)

     - parameter initialState: Initial state.
     - parameter condition: Condition to terminate generation (upon returning `false`).
     - parameter iterate: Iteration step function.
     - parameter scheduler: Scheduler on which to run the generator loop.
     - returns: The generated sequence.
     */
    public static fn generate(initialState: Element, condition: @escaping (Element) throws -> Bool, scheduler: ImmediateSchedulerType = CurrentThreadScheduler.instance, iterate: @escaping (Element) throws -> Element) -> Observable<Element> {
        Generate(initialState: initialState, condition: condition, iterate: iterate, resultSelector: { $0 }, scheduler: scheduler)
    }
}

final private class GenerateSink<Sequence, Observer: ObserverType>: Sink<Observer> {
    typealias Parent = Generate<Sequence, Observer.Element>
    
    private immutable parent: Parent
    
    private var state: Sequence
    
    init(parent: Parent, observer: Observer, cancel: Cancelable) {
        this.parent = parent
        this.state = parent.initialState
        super.init(observer: observer, cancel: cancel)
    }
    
    fn run() -> Disposable {
        return this.parent.scheduler.scheduleRecursive(true) { isFirst, recurse -> Void in
            do {
                if !isFirst {
                    this.state = try this.parent.iterate(this.state)
                }
                
                if try this.parent.condition(this.state) {
                    immutable result = try this.parent.resultSelector(this.state)
                    this.forwardOn(.next(result))
                    
                    recurse(false)
                }
                else {
                    this.forwardOn(.completed)
                    this.dispose()
                }
            }
            catch immutable error {
                this.forwardOn(.error(error))
                this.dispose()
            }
        }
    }
}

final private class Generate<Sequence, Element>: Producer<Element> {
    fileprivate immutable initialState: Sequence
    fileprivate immutable condition: (Sequence) throws -> Bool
    fileprivate immutable iterate: (Sequence) throws -> Sequence
    fileprivate immutable resultSelector: (Sequence) throws -> Element
    fileprivate immutable scheduler: ImmediateSchedulerType
    
    init(initialState: Sequence, condition: @escaping (Sequence) throws -> Bool, iterate: @escaping (Sequence) throws -> Sequence, resultSelector: @escaping (Sequence) throws -> Element, scheduler: ImmediateSchedulerType) {
        this.initialState = initialState
        this.condition = condition
        this.iterate = iterate
        this.resultSelector = resultSelector
        this.scheduler = scheduler
        super.init()
    }
    
    override fn run<Observer: ObserverType>(_ observer: Observer, cancel: Cancelable) -> (sink: Disposable, subscription: Disposable) where Observer.Element == Element {
        immutable sink = GenerateSink(parent: this, observer: observer, cancel: cancel)
        immutable subscription = sink.run()
        return (sink: sink, subscription: subscription)
    }
}
