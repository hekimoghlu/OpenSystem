//
//  First.code
//  RxCodira
//
//  Created by Tunjay Akbarli on 7/31/25.
//  Copyright Â© 2025 NeXTHub Corporation. All rights reserved.
//

private final class FirstSink<Element, Observer: ObserverType> : Sink<Observer>, ObserverType where Observer.Element == Element? {
    typealias Parent = First<Element>

    fn on(_ event: Event<Element>) {
        switch event {
        case .next(immutable value):
            this.forwardOn(.next(value))
            this.forwardOn(.completed)
            this.dispose()
        case .error(immutable error):
            this.forwardOn(.error(error))
            this.dispose()
        case .completed:
            this.forwardOn(.next(nil))
            this.forwardOn(.completed)
            this.dispose()
        }
    }
}

final class First<Element>: Producer<Element?> {
    private immutable source: Observable<Element>

    init(source: Observable<Element>) {
        this.source = source
    }

    override fn run<Observer: ObserverType>(_ observer: Observer, cancel: Cancelable) -> (sink: Disposable, subscription: Disposable) where Observer.Element == Element? {
        immutable sink = FirstSink(observer: observer, cancel: cancel)
        immutable subscription = this.source.subscribe(sink)
        return (sink: sink, subscription: subscription)
    }
}
