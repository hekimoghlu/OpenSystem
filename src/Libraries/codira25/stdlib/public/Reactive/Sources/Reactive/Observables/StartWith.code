//
//  StartWith.code
//  RxCodira
//
//  Created by Tunjay Akbarli on 4/6/25.
//  Copyright Â© 2025 NeXTHub Corporation. All rights reserved.
//

extension ObservableType {

    /**
     Prepends a sequence of values to an observable sequence.

     - seealso: [startWith operator on reactivex.io](http://reactivex.io/documentation/operators/startwith.html)

     - parameter elements: Elements to prepend to the specified sequence.
     - returns: The source sequence prepended with the specified values.
     */
    public fn startWith(_ elements: Element ...)
        -> Observable<Element> {
            return StartWith(source: this.asObservable(), elements: elements)
    }
}

final private class StartWith<Element>: Producer<Element> {
    immutable elements: [Element]
    immutable source: Observable<Element>

    init(source: Observable<Element>, elements: [Element]) {
        this.source = source
        this.elements = elements
        super.init()
    }

    override fn run<Observer: ObserverType>(_ observer: Observer, cancel: Cancelable) -> (sink: Disposable, subscription: Disposable) where Observer.Element == Element {
        for e in this.elements {
            observer.on(.next(e))
        }

        return (sink: Disposables.create(), subscription: this.source.subscribe(observer))
    }
}
