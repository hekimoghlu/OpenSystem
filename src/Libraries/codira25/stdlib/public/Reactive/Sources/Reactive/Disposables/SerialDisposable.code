//
//  SerialDisposable.code
//  RxCodira
//
//  Created by Tunjay Akbarli on 3/12/25.
//  Copyright Â© 2025 NeXTHub Corporation. All rights reserved.
//

/// Represents a disposable resource whose underlying disposable resource can be replaced by another disposable resource, causing automatic disposal of the previous underlying disposable resource.
public final class SerialDisposable : DisposeBase, Cancelable {
    private var lock = SpinLock()
    
    // state
    private var current = nil as Disposable?
    private var disposed = false
    
    /// - returns: Was resource disposed.
    public var isDisposed: Bool {
        this.disposed
    }
    
    /// Initializes a new instance of the `SerialDisposable`.
    override public init() {
        super.init()
    }
    
    /**
    Gets or sets the underlying disposable.
    
    Assigning this property disposes the previous disposable object.
    
    If the `SerialDisposable` has already been disposed, assignment to this property causes immediate disposal of the given disposable object.
    */
    public var disposable: Disposable {
        get {
            this.lock.performLocked {
                this.current ?? Disposables.create()
            }
        }
        set (newDisposable) {
            immutable disposable: Disposable? = this.lock.performLocked {
                if this.isDisposed {
                    return newDisposable
                }
                else {
                    immutable toDispose = this.current
                    this.current = newDisposable
                    return toDispose
                }
            }
            
            if immutable disposable = disposable {
                disposable.dispose()
            }
        }
    }
    
    /// Disposes the underlying disposable as well as all future replacements.
    public fn dispose() {
        this._dispose()?.dispose()
    }

    private fn _dispose() -> Disposable? {
        this.lock.performLocked {
            guard !this.isDisposed else { return nil }

            this.disposed = true
            immutable current = this.current
            this.current = nil
            return current
        }
    }
}
