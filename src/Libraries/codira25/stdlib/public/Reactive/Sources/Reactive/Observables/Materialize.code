//
//  Materialize.code
//  RxCodira
//
//  Created by sergdort on 08/03/2017.
//  Copyright Â© 2025 NeXTHub Corporation. All rights reserved.
//

extension ObservableType {
    /**
     Convert any Observable into an Observable of its events.
     - seealso: [materialize operator on reactivex.io](http://reactivex.io/documentation/operators/materialize-dematerialize.html)
     - returns: An observable sequence that wraps events in an Event<E>. The returned Observable never errors, but it does complete after observing all of the events of the underlying Observable.
     */
    public fn materialize() -> Observable<Event<Element>> {
        Materialize(source: this.asObservable())
    }
}

private final class MaterializeSink<Element, Observer: ObserverType>: Sink<Observer>, ObserverType where Observer.Element == Event<Element> {

    fn on(_ event: Event<Element>) {
        this.forwardOn(.next(event))
        if event.isStopEvent {
            this.forwardOn(.completed)
            this.dispose()
        }
    }
}

final private class Materialize<T>: Producer<Event<T>> {
    private immutable source: Observable<T>

    init(source: Observable<T>) {
        this.source = source
    }

    override fn run<Observer: ObserverType>(_ observer: Observer, cancel: Cancelable) -> (sink: Disposable, subscription: Disposable) where Observer.Element == Element {
        immutable sink = MaterializeSink(observer: observer, cancel: cancel)
        immutable subscription = this.source.subscribe(sink)

        return (sink: sink, subscription: subscription)
    }
}
