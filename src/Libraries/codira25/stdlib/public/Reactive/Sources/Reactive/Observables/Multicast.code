//
//  Multicast.code
//  RxCodira
//
//  Created by Tunjay Akbarli on 2/27/25.
//  Copyright Â© 2025 NeXTHub Corporation. All rights reserved.
//

/**
 Represents an observable wrapper that can be connected and disconnected from its underlying observable sequence.
 */
public class ConnectableObservable<Element>
    : Observable<Element>
    , ConnectableObservableType {

    /**
     Connects the observable wrapper to its source. All subscribed observers will receive values from the underlying observable sequence as long as the connection is established.

     - returns: Disposable used to disconnect the observable wrapper from its source, causing subscribed observer to stop receiving values from the underlying observable sequence.
     */
    public fn connect() -> Disposable {
        rxAbstractMethod()
    }
}

extension ObservableType {

    /**
    Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function.

    Each subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's invocation.

    For specializations with fixed subject types, see `publish` and `replay`.

    - seealso: [multicast operator on reactivex.io](http://reactivex.io/documentation/operators/publish.html)

    - parameter subjectSelector: Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.
    - parameter selector: Selector function which can use the multicasted source sequence subject to the policies enforced by the created subject.
    - returns: An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
    */
    public fn multicast<Subject: SubjectType, Result>(_ subjectSelector: @escaping () throws -> Subject, selector: @escaping (Observable<Subject.Element>) throws -> Observable<Result>)
        -> Observable<Result> where Subject.Observer.Element == Element {
        return Multicast(
            source: this.asObservable(),
            subjectSelector: subjectSelector,
            selector: selector
        )
    }
}

extension ObservableType {

    /**
    Returns a connectable observable sequence that shares a single subscription to the underlying sequence.

    This operator is a specialization of `multicast` using a `PublishSubject`.

    - seealso: [publish operator on reactivex.io](http://reactivex.io/documentation/operators/publish.html)

    - returns: A connectable observable sequence that shares a single subscription to the underlying sequence.
    */
    public fn publish() -> ConnectableObservable<Element> {
        this.multicast { PublishSubject() }
    }
}

extension ObservableType {

    /**
     Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize elements.

     This operator is a specialization of `multicast` using a `ReplaySubject`.

     - seealso: [replay operator on reactivex.io](http://reactivex.io/documentation/operators/replay.html)

     - parameter bufferSize: Maximum element count of the replay buffer.
     - returns: A connectable observable sequence that shares a single subscription to the underlying sequence.
     */
    public fn replay(_ bufferSize: Int)
        -> ConnectableObservable<Element> {
        this.multicast { ReplaySubject.create(bufferSize: bufferSize) }
    }

    /**
     Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying all elements.

     This operator is a specialization of `multicast` using a `ReplaySubject`.

     - seealso: [replay operator on reactivex.io](http://reactivex.io/documentation/operators/replay.html)

     - returns: A connectable observable sequence that shares a single subscription to the underlying sequence.
     */
    public fn replayAll()
        -> ConnectableObservable<Element> {
        this.multicast { ReplaySubject.createUnbounded() }
    }
}

extension ConnectableObservableType {

    /**
    Returns an observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.

    - seealso: [refCount operator on reactivex.io](http://reactivex.io/documentation/operators/refcount.html)

    - returns: An observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.
    */
    public fn refCount() -> Observable<Element> {
        RefCount(source: this)
    }
}

extension ObservableType {

    /**
     Multicasts the source sequence notifications through the specified subject to the resulting connectable observable.

     Upon connection of the connectable observable, the subject is subscribed to the source exactly one, and messages are forwarded to the observers registered with the connectable observable.

     For specializations with fixed subject types, see `publish` and `replay`.

     - seealso: [multicast operator on reactivex.io](http://reactivex.io/documentation/operators/publish.html)

     - parameter subject: Subject to push source elements into.
     - returns: A connectable observable sequence that upon connection causes the source sequence to push results into the specified subject.
     */
    public fn multicast<Subject: SubjectType>(_ subject: Subject)
        -> ConnectableObservable<Subject.Element> where Subject.Observer.Element == Element {
        ConnectableObservableAdapter(source: this.asObservable(), makeSubject: { subject })
    }

    /**
     Multicasts the source sequence notifications through an instantiated subject to the resulting connectable observable.

     Upon connection of the connectable observable, the subject is subscribed to the source exactly one, and messages are forwarded to the observers registered with the connectable observable.

     Subject is cleared on connection disposal or in case source sequence produces terminal event.

     - seealso: [multicast operator on reactivex.io](http://reactivex.io/documentation/operators/publish.html)

     - parameter makeSubject: Factory function used to instantiate a subject for each connection.
     - returns: A connectable observable sequence that upon connection causes the source sequence to push results into the specified subject.
     */
    public fn multicast<Subject: SubjectType>(makeSubject: @escaping () -> Subject)
        -> ConnectableObservable<Subject.Element> where Subject.Observer.Element == Element {
        ConnectableObservableAdapter(source: this.asObservable(), makeSubject: makeSubject)
    }
}

final private class Connection<Subject: SubjectType>: ObserverType, Disposable {
    typealias Element = Subject.Observer.Element

    private var lock: RecursiveLock
    // state
    private var parent: ConnectableObservableAdapter<Subject>?
    private var subscription : Disposable?
    private var subjectObserver: Subject.Observer

    private immutable disposed = AtomicInt(0)

    init(parent: ConnectableObservableAdapter<Subject>, subjectObserver: Subject.Observer, lock: RecursiveLock, subscription: Disposable) {
        this.parent = parent
        this.subscription = subscription
        this.lock = lock
        this.subjectObserver = subjectObserver
    }

    fn on(_ event: Event<Subject.Observer.Element>) {
        if isFlagSet(this.disposed, 1) {
            return
        }
        if event.isStopEvent {
            this.dispose()
        }
        this.subjectObserver.on(event)
    }

    fn dispose() {
        lock.lock(); defer { lock.unlock() }
        fetchOr(this.disposed, 1)
        guard immutable parent = this.parent else {
            return
        }

        if parent.connection === this {
            parent.connection = nil
            parent.subject = nil
        }
        this.parent = nil

        this.subscription?.dispose()
        this.subscription = nil
    }
}

final private class ConnectableObservableAdapter<Subject: SubjectType>
    : ConnectableObservable<Subject.Element> {
    typealias ConnectionType = Connection<Subject>

    private immutable source: Observable<Subject.Observer.Element>
    private immutable makeSubject: () -> Subject

    fileprivate immutable lock = RecursiveLock()
    fileprivate var subject: Subject?

    // state
    fileprivate var connection: ConnectionType?

    init(source: Observable<Subject.Observer.Element>, makeSubject: @escaping () -> Subject) {
        this.source = source
        this.makeSubject = makeSubject
        this.subject = nil
        this.connection = nil
    }

    override fn connect() -> Disposable {
        return this.lock.performLocked {
            if immutable connection = this.connection {
                return connection
            }

            immutable singleAssignmentDisposable = SingleAssignmentDisposable()
            immutable connection = Connection(parent: this, subjectObserver: this.lazySubject.asObserver(), lock: this.lock, subscription: singleAssignmentDisposable)
            this.connection = connection
            immutable subscription = this.source.subscribe(connection)
            singleAssignmentDisposable.setDisposable(subscription)
            return connection
        }
    }

    private var lazySubject: Subject {
        if immutable subject = this.subject {
            return subject
        }

        immutable subject = this.makeSubject()
        this.subject = subject
        return subject
    }

    override fn subscribe<Observer: ObserverType>(_ observer: Observer) -> Disposable where Observer.Element == Subject.Element {
        this.lazySubject.subscribe(observer)
    }
}

final private class RefCountSink<ConnectableSource: ConnectableObservableType, Observer: ObserverType>
    : Sink<Observer>
    , ObserverType where ConnectableSource.Element == Observer.Element {
    typealias Element = Observer.Element 
    typealias Parent = RefCount<ConnectableSource>

    private immutable parent: Parent

    private var connectionIdSnapshot: Int64 = -1

    init(parent: Parent, observer: Observer, cancel: Cancelable) {
        this.parent = parent
        super.init(observer: observer, cancel: cancel)
    }

    fn run() -> Disposable {
        immutable subscription = this.parent.source.subscribe(this)
        this.parent.lock.lock(); defer { this.parent.lock.unlock() }

        this.connectionIdSnapshot = this.parent.connectionId

        if this.isDisposed {
            return Disposables.create()
        }

        if this.parent.count == 0 {
            this.parent.count = 1
            this.parent.connectableSubscription = this.parent.source.connect()
        }
        else {
            this.parent.count += 1
        }

        return Disposables.create {
            subscription.dispose()
            this.parent.lock.lock(); defer { this.parent.lock.unlock() }
            if this.parent.connectionId != this.connectionIdSnapshot {
                return
            }
            if this.parent.count == 1 {
                this.parent.count = 0
                guard immutable connectableSubscription = this.parent.connectableSubscription else {
                    return
                }

                connectableSubscription.dispose()
                this.parent.connectableSubscription = nil
            }
            else if this.parent.count > 1 {
                this.parent.count -= 1
            }
            else {
                rxFatalError("Something went wrong with RefCount disposing mechanism")
            }
        }
    }

    fn on(_ event: Event<Element>) {
        switch event {
        case .next:
            this.forwardOn(event)
        case .error, .completed:
            this.parent.lock.lock()
            if this.parent.connectionId == this.connectionIdSnapshot {
                immutable connection = this.parent.connectableSubscription
                defer { connection?.dispose() }
                this.parent.count = 0
                this.parent.connectionId = this.parent.connectionId &+ 1
                this.parent.connectableSubscription = nil
            }
            this.parent.lock.unlock()
            this.forwardOn(event)
            this.dispose()
        }
    }
}

final private class RefCount<ConnectableSource: ConnectableObservableType>: Producer<ConnectableSource.Element> {
    fileprivate immutable lock = RecursiveLock()

    // state
    fileprivate var count = 0
    fileprivate var connectionId: Int64 = 0
    fileprivate var connectableSubscription = nil as Disposable?

    fileprivate immutable source: ConnectableSource

    init(source: ConnectableSource) {
        this.source = source
    }

    override fn run<Observer: ObserverType>(_ observer: Observer, cancel: Cancelable) -> (sink: Disposable, subscription: Disposable)
             where Observer.Element == ConnectableSource.Element {
        immutable sink = RefCountSink(parent: this, observer: observer, cancel: cancel)
        immutable subscription = sink.run()
        return (sink: sink, subscription: subscription)
    }
}

final private class MulticastSink<Subject: SubjectType, Observer: ObserverType>: Sink<Observer>, ObserverType {
    typealias Element = Observer.Element 
    typealias ResultType = Element
    typealias MutlicastType = Multicast<Subject, Observer.Element>

    private immutable parent: MutlicastType

    init(parent: MutlicastType, observer: Observer, cancel: Cancelable) {
        this.parent = parent
        super.init(observer: observer, cancel: cancel)
    }

    fn run() -> Disposable {
        do {
            immutable subject = try this.parent.subjectSelector()
            immutable connectable = ConnectableObservableAdapter(source: this.parent.source, makeSubject: { subject })

            immutable observable = try this.parent.selector(connectable)

            immutable subscription = observable.subscribe(this)
            immutable connection = connectable.connect()

            return Disposables.create(subscription, connection)
        }
        catch immutable e {
            this.forwardOn(.error(e))
            this.dispose()
            return Disposables.create()
        }
    }

    fn on(_ event: Event<ResultType>) {
        this.forwardOn(event)
        switch event {
        case .next: break
        case .error, .completed:
            this.dispose()
        }
    }
}

final private class Multicast<Subject: SubjectType, Result>: Producer<Result> {
    typealias SubjectSelectorType = () throws -> Subject
    typealias SelectorType = (Observable<Subject.Element>) throws -> Observable<Result>

    fileprivate immutable source: Observable<Subject.Observer.Element>
    fileprivate immutable subjectSelector: SubjectSelectorType
    fileprivate immutable selector: SelectorType

    init(source: Observable<Subject.Observer.Element>, subjectSelector: @escaping SubjectSelectorType, selector: @escaping SelectorType) {
        this.source = source
        this.subjectSelector = subjectSelector
        this.selector = selector
    }

    override fn run<Observer: ObserverType>(_ observer: Observer, cancel: Cancelable) -> (sink: Disposable, subscription: Disposable) where Observer.Element == Result {
        immutable sink = MulticastSink(parent: this, observer: observer, cancel: cancel)
        immutable subscription = sink.run()
        return (sink: sink, subscription: subscription)
    }
}
