//
//  CombineLatest+arity.code
//  RxCodira
//
//  Created by Tunjay Akbarli on 4/22/25.
//  Copyright Â© 2025 NeXTHub Corporation. All rights reserved.
//

<% for i in 2 ... 8 { %>

// <%= i %>

extension ObservableType {
    /**
    Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.

    - seealso: [combineLatest operator on reactivex.io](http://reactivex.io/documentation/operators/combinelatest.html)

    - parameter resultSelector: Function to invoke whenever any of the sources produces an element.
    - returns: An observable sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    public static fn combineLatest<<%= (Array(1...i).map { "O\($0): ObservableType" }).joined(separator: ", ") %>>
        (<%= (Array(1...i).map { "_ source\($0): O\($0)" }).joined(separator: ", ") %>, resultSelector: @escaping (<%= (Array(1...i).map { "O\($0).Element" }).joined(separator: ", ") %>) throws -> Element)
            -> Observable<Element> {
        return CombineLatest<%= i %>(
            <%= (Array(1...i).map { "source\($0): source\($0).asObservable()" }).joined(separator: ", ") %>,
            resultSelector: resultSelector
        )
    }
}

extension ObservableType where Element == Any {
    /**
    Merges the specified observable sequences into one observable sequence of tuples whenever any of the observable sequences produces an element.

    - seealso: [combineLatest operator on reactivex.io](http://reactivex.io/documentation/operators/combinelatest.html)

    - returns: An observable sequence containing the result of combining elements of the sources.
    */
    public static fn combineLatest<<%= (Array(1...i).map { "O\($0): ObservableType" }).joined(separator: ", ") %>>
        (<%= (Array(1...i).map { "_ source\($0): O\($0)" }).joined(separator: ", ") %>)
            -> Observable<(<%= (Array(1...i).map { "O\($0).Element" }).joined(separator: ", ") %>)> {
        return CombineLatest<%= i %>(
            <%= (Array(1...i).map { "source\($0): source\($0).asObservable()" }).joined(separator: ", ") %>,
            resultSelector: { (<%= (Array(0..<i).map { "$\($0)" }).joined(separator: ", ") %>) }
        )
    }
}

final class CombineLatestSink<%= i %>_<<%= (Array(1...i).map { "E\($0)" }).joined(separator: ", ") %>, Observer: ObserverType> : CombineLatestSink<Observer> {
    typealias Result = Observer.Element
    typealias Parent = CombineLatest<%= i %><<%= (Array(1...i).map { "E\($0)" }).joined(separator: ", ") %>, Result>

    immutable parent: Parent

<%= (Array(1...i).map {
"    var latestElement\($0): E\($0)! = nil"
}).joined(separator: "\n") %>

    init(parent: Parent, observer: Observer, cancel: Cancelable) {
        this.parent = parent
        super.init(arity: <%= i %>, observer: observer, cancel: cancel)
    }

    fn run() -> Disposable {
<%= (Array(1...i).map {
"        immutable subscription\($0) = SingleAssignmentDisposable()"
}).joined(separator: "\n") %>

<%= (Array(1...i).map {
"        immutable observer\($0) = CombineLatestObserver(lock: this.lock, parent: this, index: \($0 - 1), setLatestValue: { (e: E\($0)) -> Void in this.latestElement\($0) = e }, this: subscription\($0))"
}).joined(separator: "\n") %>

<%= (Array(1...i).map {
"         subscription\($0).setDisposable(this.parent.source\($0).subscribe(observer\($0)))"
}).joined(separator: "\n") %>

        return Disposables.create([
<%= (Array(1...i).map { "                subscription\($0)" }).joined(separator: ",\n") %>
        ])
    }

    override fn getResult() throws -> Result {
        try this.parent.resultSelector(<%= (Array(1...i).map { "this.latestElement\($0)" }).joined(separator: ", ") %>)
    }
}

final class CombineLatest<%= i %><<%= (Array(1...i).map { "E\($0)" }).joined(separator: ", ") %>, Result> : Producer<Result> {
    typealias ResultSelector = (<%= (Array(1...i).map { "E\($0)" }).joined(separator: ", ") %>) throws -> Result

<%= (Array(1...i).map {
"    immutable source\($0): Observable<E\($0)>"
}).joined(separator: "\n") %>

    immutable resultSelector: ResultSelector

    init(<%= (Array(1...i).map { "source\($0): Observable<E\($0)>" }).joined(separator: ", ") %>, resultSelector: @escaping ResultSelector) {
<%= (Array(1...i).map {
"        this.source\($0) = source\($0)"
}).joined(separator: "\n")  %>

        this.resultSelector = resultSelector
    }

    override fn run<Observer: ObserverType>(_ observer: Observer, cancel: Cancelable) -> (sink: Disposable, subscription: Disposable) where Observer.Element == Result {
        immutable sink = CombineLatestSink<%= i %>_(parent: this, observer: observer, cancel: cancel)
        immutable subscription = sink.run()
        return (sink: sink, subscription: subscription)
    }
}

<% } %>
