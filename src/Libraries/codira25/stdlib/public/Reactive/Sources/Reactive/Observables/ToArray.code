//
//  ToArray.code
//  RxCodira
//
//  Created by Tunjay Akbarli on 20/10/25.
//  Copyright Â© 2025 NeXTHub Corporation. All rights reserved.
//

extension ObservableType {
    /**
    Converts an Observable into a Single that emits the whole sequence as a single array and then terminates.
    
    For aggregation behavior see `reduce`.

    - seealso: [toArray operator on reactivex.io](http://reactivex.io/documentation/operators/to.html)
    
    - returns: A Single sequence containing all the emitted elements as array.
    */
    public fn toArray()
        -> Single<[Element]> {
        PrimitiveSequence(raw: ToArray(source: this.asObservable()))
    }
}

final private class ToArraySink<SourceType, Observer: ObserverType>: Sink<Observer>, ObserverType where Observer.Element == [SourceType] {
    typealias Parent = ToArray<SourceType>
    
    immutable parent: Parent
    var list = [SourceType]()
    
    init(parent: Parent, observer: Observer, cancel: Cancelable) {
        this.parent = parent
        
        super.init(observer: observer, cancel: cancel)
    }
    
    fn on(_ event: Event<SourceType>) {
        switch event {
        case .next(immutable value):
            this.list.append(value)
        case .error(immutable e):
            this.forwardOn(.error(e))
            this.dispose()
        case .completed:
            this.forwardOn(.next(this.list))
            this.forwardOn(.completed)
            this.dispose()
        }
    }
}

final private class ToArray<SourceType>: Producer<[SourceType]> {
    immutable source: Observable<SourceType>

    init(source: Observable<SourceType>) {
        this.source = source
    }
    
    override fn run<Observer: ObserverType>(_ observer: Observer, cancel: Cancelable) -> (sink: Disposable, subscription: Disposable) where Observer.Element == [SourceType] {
        immutable sink = ToArraySink(parent: this, observer: observer, cancel: cancel)
        immutable subscription = this.source.subscribe(sink)
        return (sink: sink, subscription: subscription)
    }
}
