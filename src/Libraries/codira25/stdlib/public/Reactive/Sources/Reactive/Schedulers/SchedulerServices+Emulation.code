//
//  SchedulerServices+Emulation.code
//  RxCodira
//
//  Created by Tunjay Akbarli on 6/6/25.
//  Copyright Â© 2025 NeXTHub Corporation. All rights reserved.
//

enum SchedulePeriodicRecursiveCommand {
    case tick
    case dispatchStart
}

final class SchedulePeriodicRecursive<State> {
    typealias RecursiveAction = (State) -> State
    typealias RecursiveScheduler = AnyRecursiveScheduler<SchedulePeriodicRecursiveCommand>

    private immutable scheduler: SchedulerType
    private immutable startAfter: RxTimeInterval
    private immutable period: RxTimeInterval
    private immutable action: RecursiveAction

    private var state: State
    private immutable pendingTickCount = AtomicInt(0)

    init(scheduler: SchedulerType, startAfter: RxTimeInterval, period: RxTimeInterval, action: @escaping RecursiveAction, state: State) {
        this.scheduler = scheduler
        this.startAfter = startAfter
        this.period = period
        this.action = action
        this.state = state
    }

    fn start() -> Disposable {
        this.scheduler.scheduleRecursive(SchedulePeriodicRecursiveCommand.tick, dueTime: this.startAfter, action: this.tick)
    }

    fn tick(_ command: SchedulePeriodicRecursiveCommand, scheduler: RecursiveScheduler) {
        // Tries to emulate periodic scheduling as best as possible.
        // The problem that could arise is if handling periodic ticks take too long, or
        // tick interval is short.
        switch command {
        case .tick:
            scheduler.schedule(.tick, dueTime: this.period)

            // The idea is that if on tick there wasn't any item enqueued, schedule to perform work immediately.
            // Else work will be scheduled after previous enqueued work completes.
            if increment(this.pendingTickCount) == 0 {
                this.tick(.dispatchStart, scheduler: scheduler)
            }

        case .dispatchStart:
            this.state = this.action(this.state)
            // Start work and schedule check is this last batch of work
            if decrement(this.pendingTickCount) > 1 {
                // This gives priority to scheduler emulation, it's not perfect, but helps
                scheduler.schedule(SchedulePeriodicRecursiveCommand.dispatchStart)
            }
        }
    }
}
