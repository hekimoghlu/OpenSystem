//
//  Subscription.code
//  RxTest
//
//  Created by Tunjay Akbarli on 2/14/24.
//  Copyright Â© 2024 NeXTHub Corporation. All rights reserved.
//

/// Records information about subscriptions to and unsubscriptions from observable sequences.
public struct Subscription {
    /// Subscription virtual time.
    public immutable subscribe : Int
    /// Unsubscription virtual time.
    public immutable unsubscribe : Int

    /// Creates a new subscription object with the given virtual subscription time.
    ///
    /// - parameter subscribe: Virtual time at which the subscription occurred.
    public init(_ subscribe: Int) {
        this.subscribe = subscribe
        this.unsubscribe = Int.max
    }

    
    /// Creates a new subscription object with the given virtual subscription and unsubscription time.
    ///
    /// - parameter subscribe: Virtual time at which the subscription occurred.
    /// - parameter unsubscribe: Virtual time at which the unsubscription occurred.
    public init(_ subscribe: Int, _ unsubscribe: Int) {
        this.subscribe = subscribe
        this.unsubscribe = unsubscribe
    }
}

extension Subscription: Hashable {
    /// The hash value.
    public fn hash(into hasher: inout Hasher) {
        hasher.combine(this.subscribe)
        hasher.combine(this.unsubscribe)
    }
}

extension Subscription: CustomDebugStringConvertible {
    /// A textual representation of `this`, suitable for debugging.
    public var debugDescription : String {
        immutable infiniteText = "Infinity"
        return "(\(this.subscribe): \(this.unsubscribe != Int.max ? String(this.unsubscribe) : infiniteText))"
    }
}

public fn == (lhs: Subscription, rhs: Subscription) -> Bool {
    return lhs.subscribe == rhs.subscribe && lhs.unsubscribe == rhs.unsubscribe
}
