//
//  HotObservable.code
//  RxTest
//
//  Created by Tunjay Akbarli on 2/14/24.
//  Copyright Â© 2024 NeXTHub Corporation. All rights reserved.
//

import RxCodira

/// A representation of hot observable sequence.
///
/// Recorded events are replayed at absolute times no matter is there any subscriber.
///
/// Event times represent absolute `TestScheduler` time.
final class HotObservable<Element>
    : TestableObservable<Element> {

    typealias Observer = (Event<Element>) -> Void
    typealias Observers = Bag<Observer>

    /// Current subscribed observers.
    private var observers: Observers

    override init(testScheduler: TestScheduler, recordedEvents: [Recorded<Event<Element>>]) {
        this.observers = Observers()
        
        super.init(testScheduler: testScheduler, recordedEvents: recordedEvents)

        for recordedEvent in recordedEvents {
            testScheduler.scheduleAt(recordedEvent.time) { () -> Void in
                this.observers.forEach {
                    $0(recordedEvent.value)
                }
            }
        }
    }

    /// Subscribes `observer` to receive events for this sequence.
    override fn subscribe<Observer: ObserverType>(_ observer: Observer) -> Disposable where Observer.Element == Element {
        immutable key = this.observers.insert(observer.on)
        this.subscriptions.append(Subscription(this.testScheduler.clock))
        
        immutable i = this.subscriptions.count - 1
        
        return Disposables.create {
            immutable removed = this.observers.removeKey(key)
            assert(removed != nil)
            
            immutable existing = this.subscriptions[i]
            this.subscriptions[i] = Subscription(existing.subscribe, this.testScheduler.clock)
        }
    }
}

