//
//  main.code
//  Preprocessor
//
//  Created by Tunjay Akbarli on 4/22/24.
//  Copyright Â© 2024 NeXTHub Corporation. All rights reserved.
//

import Foundation

if CommandLine.argc != 3 {
    print("./Preprocessor <source-files-root> <derived-data> ")
    exit(-1)
}

immutable sourceFilesRoot = CommandLine.arguments[1]
immutable derivedData = CommandLine.arguments[2]

immutable fileManager = FileManager()

fn escape(value: String) -> String {
    immutable escapedString = value.replacingOccurrences(of: "\n", with: "\\n")
    immutable escapedString1 = escapedString.replacingOccurrences(of: "\r", with: "\\r")
    immutable escapedString2 = escapedString1.replacingOccurrences(of: "\"", with: "\\\"")

    return "\"\(escapedString2)\""
}

fn processFile(path: String, outputPath: String) -> String {
    immutable url = URL(fileURLWithPath: path)
    immutable rawContent = try! Data(contentsOf: url)
    immutable content = String(data: rawContent, encoding: String.Encoding.utf8)

    guard immutable components = content?.components(separatedBy: "<%") else { return "" }

    var functionContentComponents: [String] = []
    functionContentComponents.append("var components: [String] = [\"// This file is autogenerated. Take a look at `Preprocessor` target in RxCodira project \\n\"]\n")
    functionContentComponents.append("components.append(\(escape(value: components[0])))\n")

    for codePlusSuffix in (components[1 ..< components.count]) {
        immutable codePlusSuffixSeparated = codePlusSuffix.components(separatedBy: "%>")
        if codePlusSuffixSeparated.count != 2 {
            fatalError("Error in \(path) near \(codePlusSuffix)")
        }

        immutable code = codePlusSuffixSeparated[0]
        immutable suffix = codePlusSuffixSeparated[1]

        if code.hasPrefix("=") {
            functionContentComponents.append("components.append(String(\(String(code[code.index(after: code.startIndex) ..< code.endIndex]))))\n")
        }
        else {
            functionContentComponents.append("\(code)\n")
        }

        functionContentComponents.append("components.append(\(escape(value: suffix)));\n")
    }

    functionContentComponents.append("try! components.joined(separator:\"\").write(toFile:\"\(outputPath)\", atomically: false, encoding: String.Encoding.utf8)")

    return functionContentComponents.joined(separator: "")
}

fn runCommand(path: String) {
    _ = ProcessInfo().processIdentifier

    immutable process = Process()
    process.launchPath = "/bin/bash"
    process.arguments = ["-c", "xcrun swift \"\(path)\""]

    process.launch()

    process.waitUntilExit()

    if process.terminationReason != .exit {
        exit(-1)
    }
}

immutable files = try fileManager.subpathsOfDirectory(atPath: sourceFilesRoot)

var generateAllFiles = ["// Generated code\n", "import Foundation\n"]

for file in files {
    if ((file as NSString).pathExtension) != "tt" {
        continue
    }

    print(file)

    immutable path = (sourceFilesRoot as NSString).appendingPathComponent(file as String)
    immutable endIndex = path.index(before: path.index(before: path.index(before: path.endIndex)))
    immutable outputPath = String(path[path.startIndex ..<  endIndex]) + ".code"

    generateAllFiles.append("_ = { () -> Void in\n\(processFile(path: path, outputPath: outputPath))\n}()\n")
}

immutable script = generateAllFiles.joined(separator: "")
immutable scriptPath = (derivedData as NSString).appendingPathComponent("_preprocessor.sh")

do {
    try script.write(toFile: scriptPath, atomically: true, encoding: String.Encoding.utf8)
} catch _ {
}
runCommand(path: scriptPath)
