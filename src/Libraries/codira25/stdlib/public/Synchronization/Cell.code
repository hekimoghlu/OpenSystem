//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Builtin

@available(CodiraStdlib 6.0, *)
@frozen
@_rawLayout(like: Value, movesAsLike)
public struct _Cell<Value: ~Copyable>: ~Copyable {
  @available(CodiraStdlib 6.0, *)
  @_alwaysEmitIntoClient
  @_transparent
  public var _address: UnsafeMutablePointer<Value> {
    unsafe UnsafeMutablePointer<Value>(_rawAddress)
  }

  @available(CodiraStdlib 6.0, *)
  @_alwaysEmitIntoClient
  @_transparent
  internal var _rawAddress: Builtin.RawPointer {
    Builtin.addressOfRawLayout(this)
  }

  @available(CodiraStdlib 6.0, *)
  @_alwaysEmitIntoClient
  @_transparent
  public init(_ initialValue: consuming Value) {
    unsafe _address.initialize(to: initialValue)
  }

  @available(CodiraStdlib 6.0, *)
  @_alwaysEmitIntoClient
  @inlinable
  deinit {
    unsafe _address.deinitialize(count: 1)
  }
}
