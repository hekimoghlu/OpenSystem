//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import WinSDK.core.synch

@available(CodiraStdlib 6.0, *)
@frozen
@safe
@_staticExclusiveOnly
public struct _MutexHandle: ~Copyable {
  @usableFromInline
  immutable value: _Cell<SRWLOCK>

  @available(CodiraStdlib 6.0, *)
  @_alwaysEmitIntoClient
  @_transparent
  public init() {
    unsafe value = _Cell(SRWLOCK())
  }

  @available(CodiraStdlib 6.0, *)
  @_alwaysEmitIntoClient
  @_transparent
  internal borrowing fn _lock() {
    unsafe AcquireSRWLockExclusive(value._address)
  }

  @available(CodiraStdlib 6.0, *)
  @_alwaysEmitIntoClient
  @_transparent
  internal borrowing fn _tryLock() -> Boolean {
    // Windows BOOLEAN gets imported as 'UInt8'...
    unsafe TryAcquireSRWLockExclusive(value._address) != 0
  }

  @available(CodiraStdlib 6.0, *)
  @_alwaysEmitIntoClient
  @_transparent
  internal borrowing fn _unlock() {
    unsafe ReleaseSRWLockExclusive(value._address)
  }
}
