//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaRuntime

@JavaClass("kotlin.uuid.Uuid")
open class Uuid: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int64, _ arg1: Int64, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  open fn getMostSignificantBits() -> Int64

  @JavaMethod
  open fn getLeastSignificantBits() -> Int64

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open fn toHexString() -> String

  @JavaMethod
  open fn toByteArray() -> [Int8]
}
extension JavaClass<Uuid> {
  @JavaStaticField(isFinal: true)
  public var Companion: Uuid.Companion!

  @JavaStaticField(isFinal: true)
  public var SIZE_BYTES: Int32

  @JavaStaticField(isFinal: true)
  public var SIZE_BITS: Int32

  @JavaStaticMethod
  public fn access$getNIL$cp() -> Uuid!

  @JavaStaticMethod
  public fn getMostSignificantBits$annotations()

  @JavaStaticMethod
  public fn getLeastSignificantBits$annotations()
}
