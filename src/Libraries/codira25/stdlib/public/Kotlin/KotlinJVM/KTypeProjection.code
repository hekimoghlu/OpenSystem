//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaRuntime

@JavaClass("kotlin.reflect.KTypeProjection")
open class KTypeProjection: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: KVariance?, _ arg1: KType?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open fn copy(_ arg0: KVariance?, _ arg1: KType?) -> KTypeProjection!

  @JavaMethod
  open fn getType() -> KType!

  @JavaMethod
  open fn component1() -> KVariance!

  @JavaMethod
  open fn component2() -> KType!

  @JavaMethod
  open fn getVariance() -> KVariance!
}
extension JavaClass<KTypeProjection> {
  @JavaStaticField(isFinal: true)
  public var Companion: KTypeProjection.Companion!

  @JavaStaticField(isFinal: true)
  public var star: KTypeProjection!

  @JavaStaticMethod
  public fn copy$default(_ arg0: KTypeProjection?, _ arg1: KVariance?, _ arg2: KType?, _ arg3: Int32, _ arg4: JavaObject?) -> KTypeProjection!

  @JavaStaticMethod
  public fn invariant(_ arg0: KType?) -> KTypeProjection!

  @JavaStaticMethod
  public fn contravariant(_ arg0: KType?) -> KTypeProjection!

  @JavaStaticMethod
  public fn covariant(_ arg0: KType?) -> KTypeProjection!
}
