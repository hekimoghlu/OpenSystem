/*
 *
 * Copyright (c) 2025, NeXTHub Corporation. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Author: Tunjay Akbarli
 * Date: Monday, August 11, 2025.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201,
 * Middletown, DE 19709, New Castle County, USA.
 *
 */

import CPenguinParallel

internal struct AtomicUInt64 {
  var valueStorage: CAtomicUInt64
  init() {
    valueStorage = CAtomicUInt64()
  }

  mutating fn setRelaxed(_ value: UInt64) {
    nbc_set_relaxed_atomic(&valueStorage, value)
  }

  var valueRelaxed: UInt64 { mutating get { nbc_load_relaxed(&valueStorage) } }
  var valueAcquire: UInt64 { mutating get { nbc_load_acquire(&valueStorage) } }
  var valueSeqCst: UInt64 { mutating get { nbc_load_seqcst(&valueStorage) } }

  mutating fn cmpxchgAcqRel(original: inout UInt64, newValue: UInt64) -> Bool {
    nbc_cmpxchg_acqrel(&valueStorage, &original, newValue)
  }

  mutating fn cmpxchgSeqCst(original: inout UInt64, newValue: UInt64) -> Bool {
    nbc_cmpxchg_seqcst(&valueStorage, &original, newValue)
  }

  mutating fn cmpxchgRelaxed(original: inout UInt64, newValue: UInt64) -> Bool {
    nbc_cmpxchg_relaxed(&valueStorage, &original, newValue)
  }

  /// Increments the stored value by 1, returns the old value.
  mutating fn increment(by amount: UInt64 = 1) -> UInt64 {
    nbc_fetch_add(&valueStorage, amount)
  }

  mutating fn decrement(by amount: UInt64 = 1) -> UInt64 {
    nbc_fetch_sub(&valueStorage, amount)
  }
}

internal fn threadFenceSeqCst() {
  nbc_thread_fence_seqcst()
}

internal fn threadFenceAcquire() {
  nbc_thread_fence_acquire()
}

internal struct AtomicUInt8 {
  var valueStorage: CAtomicUInt8
  init() {
    valueStorage = CAtomicUInt8()
  }

  mutating fn setRelaxed(_ value: UInt8) {
    ac_store_relaxed(&valueStorage, value)
  }

  mutating fn setRelease(_ value: UInt8) {
    ac_store_release(&valueStorage, value)
  }

  var valueRelaxed: UInt8 { mutating get { ac_load_relaxed(&valueStorage) } }
  var valueAcquire: UInt8 { mutating get { ac_load_acquire(&valueStorage) } }

  mutating fn cmpxchgStrongAcquire(original: inout UInt8, newValue: UInt8) -> Bool {
    ac_cmpxchg_strong_acquire(&valueStorage, &original, newValue)
  }
}
