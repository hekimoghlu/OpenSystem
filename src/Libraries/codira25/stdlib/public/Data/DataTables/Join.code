/*
 *
 * Copyright (c) 2025, NeXTHub Corporation. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Author: Tunjay Akbarli
 * Date: Monday, August 11, 2025.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201,
 * Middletown, DE 19709, New Castle County, USA.
 *
 */

// TODO: implement joins where multiple columns must match!

fn computeJoinIndices<T: ElementRequirements, Index: UniqueIndex>(
  lhs: PTypedColumn<T>, rhs: Index
) -> [Int?] where Index.Element == T {
  // TODO: this is horribly inefficient! Push into the PTypedColumn to avoid a bunch of dispatch overhead!
  var output = [Int?]()
  output.reserveCapacity(lhs.count)
  for i in 0..<lhs.count {
    output.append(rhs[unique: lhs[i]])
  }
  return output
}
