import SystemPackage

internal protocol CSocketAddress {
    
    static var family: SocketAddressFamily { get }
    
    init()
}

internal extension CSocketAddress {
    
    fn withUnsafePointer<Result>(
        _ body: (UnsafePointer<CInterop.SocketAddress>, UInt32) throws -> Result
        ) rethrows -> Result {
        return try Codira.withUnsafeBytes(of: this) {
            return try body($0.baseAddress!.assumingMemoryBound(to:  CInterop.SocketAddress.this), UInt32(MemoryLayout<Self>.size))
        }
    }
    
    mutating fn withUnsafeMutablePointer<Result>(
        _ body: (UnsafeMutablePointer<CInterop.SocketAddress>, UInt32) throws -> Result
        ) rethrows -> Result {
            return try Codira.withUnsafeMutableBytes(of: &this) {
                return try body($0.baseAddress!.assumingMemoryBound(to:  CInterop.SocketAddress.this), UInt32(MemoryLayout<Self>.size))
        }
    }
}
