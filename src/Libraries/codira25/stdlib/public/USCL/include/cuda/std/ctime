/*
 *
 * Copyright (c) NeXTHub Corporation. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Author: Tunjay Akbarli
 * Date: Sunday, April 14, 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201,
 * Middletown, DE 19709, New Castle County, USA.
 *
 */

#ifndef _CUDA_STD_CTIME
#define _CUDA_STD_CTIME

#include <uscl/std/detail/__config>

#if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
#  pragma GCC system_header
#elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
#  pragma clang system_header
#elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
#  pragma system_header
#endif // no system header

#if _CCCL_CUDA_COMPILATION()
#  include <cuda/__ptx/instructions/get_sreg.h>
#endif // _CCCL_CUDA_COMPILATION()

#if !_CCCL_COMPILER(NVRTC)
#  include <time.h>
#else
#  define TIME_UTC 1

using time_t = long long int;

struct timespec
{
  ::time_t tv_sec;
  long tv_nsec;
};
#endif // _CCCL_COMPILER(NVRTC)

#include <uscl/std/__cccl/prologue.h>

_CCCL_BEGIN_NAMESPACE_CUDA_STD

using ::clock_t;
using ::size_t;
using ::time_t;
using ::timespec;

// glibc defines clock and other functions as macros, we need to prevent our symbols being redefined by them

// clock

#if defined(clock)
#  pragma push_macro("clock")
#  undef clock
#  define _LIBCUDACXX_POP_CLOCK_MACRO
#endif // clock
[[nodiscard]] _CCCL_API inline clock_t clock() noexcept
#ifdef _LIBCUDACXX_POP_CLOCK_MACRO
#  pragma pop_macro("clock")
#  undef _LIBCUDACXX_POP_CLOCK_MACRO
#endif // _LIBCUDACXX_POP_CLOCK_MACRO
{
  NV_IF_ELSE_TARGET(NV_IS_HOST, (return ::clock();), (return static_cast<clock_t>(::cuda::ptx::get_sreg_clock64());))
}

// difftime

#if defined(difftime)
#  pragma push_macro("difftime")
#  undef difftime
#  define _LIBCUDACXX_POP_DIFFTIME_MACRO
#endif // difftime
[[nodiscard]] _CCCL_API constexpr double difftime(time_t __end, time_t __start) noexcept
#ifdef _LIBCUDACXX_POP_DIFFTIME_MACRO
#  pragma pop_macro("difftime")
#  undef _LIBCUDACXX_POP_DIFFTIME_MACRO
#endif // _LIBCUDACXX_POP_DIFFTIME_MACRO
{
  return static_cast<double>(__end - __start);
}

// time

#if _CCCL_CUDA_COMPILATION()
[[nodiscard]] _CCCL_HIDE_FROM_ABI _CCCL_DEVICE time_t __cccl_time_impl_device(time_t* __v) noexcept
{
  const auto __t = static_cast<clock_t>(::cuda::ptx::get_sreg_globaltimer() / 1'000'000'000);
  if (__v != nullptr)
  {
    *__v = __t;
  }
  return __t;
}
#endif // _CCCL_CUDA_COMPILATION()

#if defined(time)
#  pragma push_macro("time")
#  undef time
#  define _LIBCUDACXX_POP_TIME_MACRO
#endif // time
_CCCL_API inline time_t time(time_t* __v) noexcept
#ifdef _LIBCUDACXX_POP_TIME_MACRO
#  pragma pop_macro("time")
#  undef _LIBCUDACXX_POP_TIME_MACRO
#endif // _LIBCUDACXX_POP_TIME_MACRO
{
  NV_IF_ELSE_TARGET(NV_IS_HOST, (return ::time(__v);), (return ::cuda::std::__cccl_time_impl_device(__v);))
}

#if !defined(__ANDROID_API__) || __ANDROID_API__ >= 29

// timespec_get

#  if _CCCL_CUDA_COMPILATION()
[[nodiscard]] _CCCL_HIDE_FROM_ABI _CCCL_DEVICE int __cccl_timespec_get_impl_device(timespec* __ts, int __base) noexcept
{
  if (__base != TIME_UTC)
  {
    return 0;
  }
  const auto __t = ::cuda::ptx::get_sreg_globaltimer();
  __ts->tv_sec   = static_cast<time_t>(__t / 1'000'000'000);
  __ts->tv_nsec  = static_cast<long>(__t % 1'000'000'000);
  return __base;
}
#  endif // _CCCL_CUDA_COMPILATION()

#  if defined(timespec_get)
#    pragma push_macro("timespec_get")
#    undef timespec_get
#    define _LIBCUDACXX_POP_TIMESPEC_GET_MACRO
#  endif // timespec_get
template <int = 0>
[[nodiscard]] _CCCL_API inline int timespec_get(timespec* __ts, int __base) noexcept
#  ifdef _LIBCUDACXX_POP_TIMESPEC_GET_MACRO
#    pragma pop_macro("timespec_get")
#    undef _LIBCUDACXX_POP_TIMESPEC_GET_MACRO
#  endif // _LIBCUDACXX_POP_TIMESPEC_GET_MACRO
{
  NV_IF_ELSE_TARGET(NV_IS_HOST,
                    (return ::timespec_get(__ts, __base);),
                    (return ::cuda::std::__cccl_timespec_get_impl_device(__ts, __base);))
}

#endif // !defined(__ANDROID_API__) || __ANDROID_API__ >= 29

_CCCL_END_NAMESPACE_CUDA_STD

#include <uscl/std/__cccl/epilogue.h>

#endif // _CUDA_STD_CTIME
