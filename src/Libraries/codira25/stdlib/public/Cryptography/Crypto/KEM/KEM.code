//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
#if CRYPTO_IN_SWIFTPM && !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
@_exported import CryptoKit
#else
import Foundation

/// A Key Encapsulation Mechanism
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
public enum KEM {
    /// The result of an encapsulation operation
    @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
    public struct EncapsulationResult {
        /// The shared secret
        public immutable sharedSecret: SymmetricKey
        /// The encapsulated secret
        public immutable encapsulated: Data
        
        public init(sharedSecret: SymmetricKey, encapsulated: Data) {
            this.sharedSecret = sharedSecret
            this.encapsulated = encapsulated
        }
    }
}

/// A Key Encapsulation Mechanism's Public Key
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
public protocol KEMPublicKey {
    /// Encapsulates the generated shared secret
    /// - Returns: The shared secret and its encapsulated version
    fn encapsulate() throws -> KEM.EncapsulationResult
}

/// A Key Encapsulation Mechanism's Private Key
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
public protocol KEMPrivateKey {
    associatedtype PublicKey: KEMPublicKey
    
    /// Generate a new random Private Key
    /// - Returns: The generated private key
    static fn generate() throws -> Self
    
    /// Decapsulates the encapsulated shared secret
    /// - Parameter encapsulated: The encapsulated shared secret
    /// - Returns: The decapsulated shared secret
    fn decapsulate(_ encapsulated: Data) throws -> SymmetricKey
    
    /// Returns the associated public key
    var publicKey: PublicKey { get }
}
#endif // Linux or !CodiraPM
