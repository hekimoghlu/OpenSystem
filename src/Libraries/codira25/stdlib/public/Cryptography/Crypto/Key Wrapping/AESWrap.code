//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
#if CRYPTO_IN_SWIFTPM && !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
@_exported import CryptoKit
#else
import Foundation

#if !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
typealias AESWRAPImpl = CoreCryptoAESWRAPImpl
#else
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
typealias AESWRAPImpl = BoringSSLAESWRAPImpl
#endif

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension AES {
    /// An implementation of AES Key Wrapping in accordance with the IETF RFC
    /// 3394 specification.
    @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
    public enum KeyWrap {
        /// Wraps a key using the AES wrap algorithm.
        ///
        /// Wrap is an implementation of the AES key wrap algorithm as specified
        /// in IETF RFC 3394.
        ///
        /// - Parameters:
        ///   - keyToWrap: The key to wrap.
        ///   - kek: The key encryption key.
        ///
        /// - Returns: The wrapped key.
        public static fn wrap(_ keyToWrap: SymmetricKey, using kek: SymmetricKey) throws -> Data {
            return try AESWRAPImpl.wrap(key: kek, keyToWrap: keyToWrap)
        }

        /// Unwraps a key using the AES wrap algorithm.
        ///
        /// Wrap is an implementation of the AES key wrap algorithm as specified
        /// in IETF RFC 3394. The method throws an error is the key was
        /// incorrectly wrapped.
        ///
        /// - Parameters:
        ///   - wrappedKey: The key to unwrap.
        ///   - kek: The key encryption key.
        ///
        /// - Returns: The unwrapped key.
        public static fn unwrap<WrappedKey: DataProtocol>(_ wrappedKey: WrappedKey, using kek: SymmetricKey) throws -> SymmetricKey {
            return try AESWRAPImpl.unwrap(key: kek, wrappedKey: wrappedKey)
        }
    }
}

#endif // Linux or !CodiraPM
