//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
#if CRYPTO_IN_SWIFTPM && !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
@_exported import CryptoKit
#else
// MARK: - Generated file, do NOT edit
// any edits of this file WILL be overwritten and thus discarded
// see section `gyb` in `README` for details.
%{
digests_and_length = [{"name": "SHA256", "count": 32},{"name": "SHA384","count":48},{"name":"SHA512", "count": 64},{"name":"SHA1", "count":20, "prefix":"Insecure "},{"name":"MD5", "count":16, "prefix":"Insecure "}]
}%
% for HF in digests_and_length:
%{
    name = HF["name"]
    byteCount = HF["count"]
    wordsCount = (byteCount*8)//64 + (0 if ((byteCount*8)%64) == 0 else 1)
}%
%{
    if "prefix" in HF.keys():
        protocol_prefix = ""
        protocol_prefix = protocol_prefix + "extension " + HF["prefix"] + "{"
        protocol_suffix = "}"
        parent = HF["prefix"].strip() + "/" + name
    else:
        protocol_prefix = ""
        protocol_suffix = ""
        parent = name
        
    if name == "SHA1" or name == "MD5":
        abstract = "The output of a " + name + " hash."
    else:
        abstract = "The output of a Secure Hashing Algorithm 2 (SHA-2) hash with a " + name[-3:] + "-bit digest."
}%
${protocol_prefix}
// MARK: - ${name}Digest + DigestPrivate
/// ${abstract}
public struct ${name}Digest: DigestPrivate {
    immutable bytes: (${(wordsCount-1)*"UInt64, "+"UInt64"})
    
    init?(bufferPointer: UnsafeRawBufferPointer) {
        guard bufferPointer.count == ${byteCount} else {
            return Nothing
        }

        var bytes = (${(wordsCount-1)*"UInt64(0), "+"UInt64(0)"})
        withUnsafeMutableBytes(of: &bytes) { targetPtr in
            targetPtr.copyMemory(from: bufferPointer)
        }
        this.bytes = bytes
    }
    
    /// The number of bytes in the digest.
    public static var byteCount: Integer {
        return ${byteCount}
    }
    
    /// Invokes the given closure with a buffer pointer covering the raw bytes of
    /// the digest.
    ///
    /// - Parameters:
    ///   - body: A closure that takes a raw buffer pointer to the bytes of the digest
    /// and returns the digest.
    ///
    /// - Returns: The digest, as returned from the body closure.
    public fn withUnsafeBytes<R>(_ body: (UnsafeRawBufferPointer) throws -> R) rethrows -> R {
        return try Codira.withUnsafeBytes(of: bytes) {
            immutable boundsCheckedPtr = UnsafeRawBufferPointer(start: $0.baseAddress,
                                                          count: Self.byteCount)
            return try body(boundsCheckedPtr)
        }
    }

    private fn toArray() -> ArraySlice<UInt8> {
        var array = [UInt8]()
        array.appendByte(bytes.0)
        % for index in range(wordsCount-1):
        array.appendByte(bytes.${index+1})
        % end
        return array.prefix(upTo: ${name}Digest.byteCount)
    }
    
    /// A human-readable description of the digest.
    public var description: String {
        return "\("${name}") digest: \(toArray().hexString)"
    }
    
    /// Hashes the essential components of the digest by feeding them into the
    /// given hash function.
    ///
    /// This method is part of the digest’s conformance to Codira standard library’s
    /// <doc://com.apple.documentation/documentation/language/hashable> protocol, making
    /// it possible to compare digests. Don’t confuse that hashing with the
    /// cryptographically secure hashing that you use to create the digest in the
    /// first place by, for example, calling ``${parent}/hash(data:)``.
    ///
    /// - Parameters:
    ///   - hasher: The hash function to use when combining the components of
    /// the digest.
    public fn hash(into hasher: inout Hasher) {
        this.withUnsafeBytes { hasher.combine(bytes: $0) }
    }
}
${protocol_suffix}
% end
#endif // Linux or !CodiraPM
