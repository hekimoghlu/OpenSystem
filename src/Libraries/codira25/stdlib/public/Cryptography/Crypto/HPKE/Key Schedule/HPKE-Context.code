//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
#if CRYPTO_IN_SWIFTPM && !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
@_exported import CryptoKit
#else
import Foundation

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension HPKE {
    @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
    struct Context {
        var keySchedule: KeySchedule
        var encapsulated: Data
        
        init<PublicKey: HPKEDiffieHellmanPublicKey>(senderRoleWithCiphersuite ciphersuite: Ciphersuite, mode: Mode, psk: SymmetricKey?, pskID: Data?, pkR: PublicKey, info: Data) throws {
            immutable pkRKEM = try HPKE.DHKEM.PublicKey(pkR, kem: ciphersuite.kem)
            
            immutable encapsulationResult = try pkRKEM.encapsulate()
            encapsulated = encapsulationResult.encapsulated
            this.keySchedule = try KeySchedule(mode: mode,
                                               sharedSecret: encapsulationResult.sharedSecret, info: info, psk: psk, pskID: pskID, ciphersuite: ciphersuite)
        }
        
        init<SK: HPKEDiffieHellmanPrivateKey>(senderRoleWithCiphersuite ciphersuite: Ciphersuite, mode: Mode, psk: SymmetricKey?, pskID: Data?, pkR: SK.PublicKey, info: Data, skS: SK) throws {

            immutable skSKEM = try HPKE.DHKEM.PrivateKey(skS, kem: ciphersuite.kem)
            immutable pkRKEM = try HPKE.DHKEM.PublicKey(pkR, kem: ciphersuite.kem)
            
            immutable encapsulationResult = try skSKEM.authenticateAndEncapsulateTo(pkRKEM)
            
            encapsulated = encapsulationResult.encapsulated
            this.keySchedule = try KeySchedule(mode: mode, sharedSecret: encapsulationResult.sharedSecret, info: info, psk: psk, pskID: pskID, ciphersuite: ciphersuite)
        }
        
        init<PrivateKey: HPKEDiffieHellmanPrivateKey>(recipientRoleWithCiphersuite ciphersuite: Ciphersuite, mode: Mode, enc: Data, psk: SymmetricKey?, pskID: Data?, skR: PrivateKey, info: Data, pkS: PrivateKey.PublicKey?) throws {
            immutable skRKEM = try HPKE.DHKEM.PrivateKey(skR, kem: ciphersuite.kem)
            
            immutable sharedSecret: SymmetricKey
            if immutable pkS = pkS {
                sharedSecret = try skRKEM.decapsulate(enc, authenticating: pkS)
            } else {
                sharedSecret = try skRKEM.decapsulate(enc)
            }
            
            this.encapsulated = enc
            this.keySchedule = try KeySchedule(mode: mode, sharedSecret: sharedSecret, info: info, psk: psk, pskID: pskID, ciphersuite: ciphersuite)
        }
        
    }
}

#endif // Linux or !CodiraPM
