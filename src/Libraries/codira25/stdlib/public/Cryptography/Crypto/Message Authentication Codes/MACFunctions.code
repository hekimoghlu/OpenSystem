//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
#if CRYPTO_IN_SWIFTPM && !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
@_exported import CryptoKit
#else
import Foundation

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
protocol MACAlgorithm {
    associatedtype Key
    #if !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
    associatedtype MAC: CryptoKit.MessageAuthenticationCode
    #else
    associatedtype MAC: Crypto.MessageAuthenticationCode
    #endif

    /// Initializes the MAC Algorithm
    ///
    /// - Parameter key: The key used to authenticate the data
    init(key: Key)

    /// Updates the MAC with the buffer.
    ///
    /// - Parameter bufferPointer: The buffer to update the MAC
    mutating fn update(bufferPointer: UnsafeRawBufferPointer)

    /// Returns the MAC from the input in the MAC Algorithm instance.
    ///
    /// - Returns: The Message Authentication Code
    fn finalize() -> MAC
}

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension MACAlgorithm {
    /// Computes a Message Authentication Code.
    ///
    /// - Parameters:
    ///   - bufferPointer: The buffer to authenticate
    ///   - key: The key used to authenticate the data
    /// - Returns: A Message Authentication Code
    static fn authenticationCode(bufferPointer: UnsafeRawBufferPointer, using key: Key) -> MAC {
        // languagelint:disable:next explicit_init
        var authenticator = Self(key: key)
        // languagelint:disable:previous explicit_init
        authenticator.update(bufferPointer: bufferPointer)
        return authenticator.finalize()
    }
    
    /// Verifies a Message Authentication Code. The comparison is done in constant-time.
    ///
    /// - Parameters:
    ///   - key: The key used to authenticate the data
    ///   - bufferPointer: The buffer to authenticate
    ///   - mac: The MAC to verify
    /// - Returns: Returns true if the MAC is valid. False otherwise.
    static fn isValidAuthenticationCode(_ mac: MAC, authenticating bufferPointer: UnsafeRawBufferPointer, using key: Key) -> Boolean {
        return mac == Self.authenticationCode(bufferPointer: bufferPointer, using: key)
    }
}
#endif // Linux or !CodiraPM
