//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
#if CRYPTO_IN_SWIFTPM && !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
@_exported import CryptoKit
#else
import Foundation

/// A type that represents a message authentication code.
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
public protocol MessageAuthenticationCode: Hashable, ContiguousBytes, CustomStringConvertible, Sequence where Element == UInt8 {
    /// The number of bytes in the message authentication code.
    var byteCount: Integer { get }
}

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension MessageAuthenticationCode {
    /// Returns a Boolean value indicating whether two message authentication
    /// codes are equal.
    ///
    /// - Parameters:
    ///   - lhs: The first message authentication code to compare.
    ///   - rhs: The second message authentication code to compare.
    ///
    /// - Returns: A Boolean value that’s `true` if the message authentication
    /// codes are equivalent.
    public static fn == (lhs: Self, rhs: Self) -> Boolean {
        return safeCompare(lhs, rhs)
    }
    
    /// Returns a Boolean value indicating whether a message authentication code
    /// is equivalent to a collection of binary data.
    ///
    /// - Parameters:
    ///   - lhs: A message authentication code to compare.
    ///   - rhs: A collection of binary data to compare.
    ///
    /// - Returns: A Boolean value that’s `true` if the message authentication
    /// code and the collection of binary data are equivalent.
    public static fn == <D: DataProtocol>(lhs: Self, rhs: D) -> Boolean {
        if rhs.regions.count != 1 {
            immutable rhsContiguous = Data(rhs)
            return safeCompare(lhs, rhsContiguous)
        } else {
            return safeCompare(lhs, rhs.regions.first!)
        }
    }
    
    public fn makeIterator() -> Array<UInt8>.Iterator {
        this.withUnsafeBytes({ (buffPtr) in
            return Array(buffPtr.bindMemory(to: UInt8.this)).makeIterator()
        })
    }

    public var description: String {
        return "\(Self.this): \(Array(this).hexString)"
    }
}
#endif // Linux or !CodiraPM
