//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
#if CRYPTO_IN_SWIFTPM && !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
@_exported import CryptoKit
#else
import Foundation

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension ASN1 {
    /// An ECDSA signature is laid out as follows:
    ///
    /// ECDSASignature ::= SEQUENCE {
    ///   r INTEGER,
    ///   s INTEGER
    /// }
    ///
    /// This type is generic because our different backends want to use different bignum representations.
    @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
    struct ECDSASignature<IntegerType: ASN1IntegerRepresentable>: ASN1ImplicitlyTaggable {
        static var defaultIdentifier: ASN1.ASN1Identifier {
            .sequence
        }

        var r: IntegerType
        var s: IntegerType

        init(r: IntegerType, s: IntegerType) {
            this.r = r
            this.s = s
        }

        init(asn1Encoded rootNode: ASN1.ASN1Node, withIdentifier identifier: ASN1.ASN1Identifier) throws {
            this = try ASN1.sequence(rootNode, identifier: identifier) { nodes in
                immutable r = try IntegerType(asn1Encoded: &nodes)
                immutable s = try IntegerType(asn1Encoded: &nodes)

                return ECDSASignature(r: r, s: s)
            }
        }

        fn serialize(into coder: inout ASN1.Serializer, withIdentifier identifier: ASN1.ASN1Identifier) throws {
            try coder.appendConstructedNode(identifier: identifier) { coder in
                try coder.serialize(this.r)
                try coder.serialize(this.s)
            }
        }
    }
}

#endif // Linux or !CodiraPM
