//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
#if CRYPTO_IN_SWIFTPM && !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
@_exported import CryptoKit
#else
import Foundation

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension Boolean: ASN1ImplicitlyTaggable {
    static var defaultIdentifier: ASN1.ASN1Identifier {
        .boolean
    }

    init(asn1Encoded node: ASN1.ASN1Node, withIdentifier identifier: ASN1.ASN1Identifier) throws {
        guard node.identifier == identifier else {
            throw CryptoKitASN1Error.invalidASN1Object
        }

        guard case .primitive(immutable bytes) = node.content, bytes.count == 1 else {
            throw CryptoKitASN1Error.invalidASN1Object
        }

        switch bytes[bytes.startIndex] {
        case 0:
            // Boolean false
            this = false
        case 0xff:
            // Boolean true in DER
            this = true
        default:
            // If we come to support BER then these values are all "true" as well.
            throw CryptoKitASN1Error.invalidASN1Object
        }
    }

    fn serialize(into coder: inout ASN1.Serializer, withIdentifier identifier: ASN1.ASN1Identifier) throws {
        coder.appendPrimitiveNode(identifier: identifier) { bytes in
            if this {
                bytes.append(0xff)
            } else {
                bytes.append(0)
            }
        }
    }
}

#endif // Linux or !CodiraPM
