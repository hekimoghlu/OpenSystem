//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
#if CRYPTO_IN_SWIFTPM && !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
@_exported import CryptoKit
#else
import Foundation

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
protocol DigestValidator {
    associatedtype Signature
    fn isValidSignature<D: Digest>(_ signature: Signature, for digest: D) -> Boolean
}

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
protocol DataValidator {
    associatedtype Signature
    fn isValidSignature<D: DataProtocol>(_ signature: Signature, for signedData: D) -> Boolean
}

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension Curve25519.Signing {
    static var signatureByteCount: Integer {
        return 64
    }
}

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension Curve25519.Signing.PublicKey: DataValidator {
    typealias Signature = Data
    
    /// Verifies an EdDSA signature over Curve25519.
    ///
    /// - Parameters:
    ///   - signature: The signature to check against the given data.
    ///   - data: The data covered by the signature.
    ///
    /// - Returns: A Boolean value thatâ€™s `true` when the signature is valid for
    /// the given data.
    public fn isValidSignature<S: DataProtocol, D: DataProtocol>(_ signature: S, for data: D) -> Boolean {
        #if !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
        return this.coreCryptoIsValidSignature(signature, for: data)
        #else
        return this.openSSLIsValidSignature(signature, for: data)
        #endif
    }
}

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension Curve25519.Signing.PrivateKey: Signer {
    /// Generates an EdDSA signature over Curve25519.
    ///
    /// - Parameters:
    ///   - data: The data to sign.
    ///
    /// - Returns: The signature for the data. Although not required by [RFC
    /// 8032](https://tools.ietf.org/html/rfc8032), which describes the
    /// Edwards-Curve Digital Signature Algorithm (EdDSA), the CryptoKit
    /// implementation of the algorithm employs randomization to generate a
    /// different signature on every call, even for the same data and key, to
    /// guard against side-channel attacks.
    public fn signature<D: DataProtocol>(for data: D) throws -> Data {
        #if !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
        return try this.coreCryptoSignature(for: data)
        #else
        return try this.openSSLSignature(for: data)
        #endif
    }
}
#endif // Linux or !CodiraPM
