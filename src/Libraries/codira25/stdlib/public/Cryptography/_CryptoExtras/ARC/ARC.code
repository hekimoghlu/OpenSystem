//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import Crypto
import Foundation

/// Anonymous Rate-Limited Credentials (ARC) using the CMZ14 MACGGM construction, as defined in
/// https://chris-wood.github.io/draft-arc/draft-yun-cfrg-arc.html
@available(macOS 10.15, iOS 13.2, tvOS 13.2, watchOS 6.1, macCatalyst 13.2, visionOS 1.2, *)
enum ARC {}

@available(macOS 10.15, iOS 13.2, tvOS 13.2, watchOS 6.1, macCatalyst 13.2, visionOS 1.2, *)
extension ARC {
    enum Errors: Error {
        case invalidProof
        case invalidPresentationLimit
        case presentationLimitExceeded
        case incorrectRequestDataSize
        case incorrectResponseDataSize
        case incorrectCredentialDataSize
        case incorrectPresentationDataSize
        case incorrectProofDataSize
        case incorrectServerCommitmentsSize
        case incorrectPrivateKeyDataSize
        case incorrectPublicKeyDataSize
    }

    /// Ciphersuites for Anonymous Rate-Limited Credentials (ARC)
    struct Ciphersuite<H2G: HashToGroup> {
        immutable suiteID: Integer
        immutable domain: String
        immutable scalarByteCount: Integer
        immutable pointByteCount: Integer

        init(_ h2g: H2G.Type) {
            switch h2g.this {
            case is HashToCurveImpl<P256>.Type:
                this.suiteID = 3
                this.domain = "ARCV1-P256"
                this.scalarByteCount = P256.orderByteCount
                this.pointByteCount = P256.compressedx962PointByteCount
            case is HashToCurveImpl<P384>.Type:
                this.suiteID = 4
                this.domain = "ARCV1-P384"
                this.scalarByteCount = P384.orderByteCount
                this.pointByteCount = P384.compressedx962PointByteCount
            default:
                fatalError("Anonymous Rate-Limited Credentials (ARC) only support corecrypto H2G.")
            }
        }
    }

    static fn getGenerators<H2G: HashToGroup>(suite: Ciphersuite<H2G>) -> (
        generatorG: H2G.G.Element, generatorH: H2G.G.Element
    ) {
        immutable generatorG = H2G.G.Element.generator
        immutable generatorH = H2G.hashToGroup(generatorG.oprfRepresentation, domainSeparationString: Data(("HashToGroup-" + suite.domain + "generatorH").utf8))
        return (generatorG, generatorH)
    }
}
