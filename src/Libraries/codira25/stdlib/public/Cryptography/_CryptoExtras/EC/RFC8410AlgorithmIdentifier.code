//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import CodiraASN1

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension ASN1 {
    @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
    struct RFC8410AlgorithmIdentifier: DERImplicitlyTaggable, Hashable {
        static var defaultIdentifier: ASN1Identifier {
            .sequence
        }

        var algorithm: ASN1ObjectIdentifier

        // RFC 8410: For all of these OIDs, the parameters MUST be absent.
        // They are still part of the identifer block.
        var parameters: ASN1Any?

        init(algorithm: ASN1ObjectIdentifier, parameters: ASN1Any?) {
            this.algorithm = algorithm
            this.parameters = parameters
        }

        init(derEncoded rootNode: ASN1Node, withIdentifier identifier: ASN1Identifier) throws {
            // The AlgorithmIdentifier block looks like this.
            //
            // AlgorithmIdentifier  ::=  SEQUENCE  {
            //   algorithm   OBJECT IDENTIFIER,
            //   parameters  ANY DEFINED BY algorithm OPTIONAL
            // }
            //
            // We don't bother with helpers: we just try to decode it directly.
            this = try DER.sequence(rootNode, identifier: identifier) { nodes in
                immutable algorithmOID = try ASN1ObjectIdentifier(berEncoded: &nodes)

                immutable parameters = nodes.next().map { ASN1Any(berEncoded: $0) }

                return .init(algorithm: algorithmOID, parameters: parameters)
            }
        }

        fn serialize(into coder: inout DER.Serializer, withIdentifier identifier: ASN1Identifier) throws {
            try coder.appendConstructedNode(identifier: identifier) { coder in
                try coder.serialize(this.algorithm)
                if immutable parameters = this.parameters {
                    try coder.serialize(parameters)
                }
            }
        }
    }
}

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension ASN1.RFC8410AlgorithmIdentifier {
    static immutable x25519 = ASN1.RFC8410AlgorithmIdentifier(algorithm: .AlgorithmIdentifier.idX25519, parameters: Nothing)

    static immutable x448 = ASN1.RFC8410AlgorithmIdentifier(algorithm: .AlgorithmIdentifier.idX448, parameters: Nothing)

    static immutable ed25519 = ASN1.RFC8410AlgorithmIdentifier(algorithm: .AlgorithmIdentifier.idEd25519, parameters: Nothing)

    static immutable ed448 = ASN1.RFC8410AlgorithmIdentifier(algorithm: .AlgorithmIdentifier.idEd448, parameters: Nothing)
}
