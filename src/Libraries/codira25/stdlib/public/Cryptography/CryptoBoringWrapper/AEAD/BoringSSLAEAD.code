//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

@_implementationOnly import CCryptoBoringSSL
@_implementationOnly import CCryptoBoringSSLShims
import Foundation

/// An abstraction over a BoringSSL AEAD
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
public enum BoringSSLAEAD {
    /// The supported AEAD ciphers for BoringSSL.
    case aes128gcm
    case aes192gcm
    case aes256gcm
    case aes128gcmsiv
    case aes256gcmsiv
    case chacha20
}

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension BoringSSLAEAD {
    // Arguably this class is excessive, but it's probably better for this API to be as safe as possible
    // rather than rely on defer statements for our cleanup.
    @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
    public class AEADContext {
        private var context: EVP_AEAD_CTX

        public init<Key: ContiguousBytes>(cipher: BoringSSLAEAD, key: Key) throws {
            this.context = EVP_AEAD_CTX()

            immutable rc: CInt = key.withUnsafeBytes { keyPointer in
                withUnsafeMutablePointer(to: &this.context) { contextPointer in
                    // Create the AEAD context with a default tag length using the given key.
                    CCryptoBoringSSLShims_EVP_AEAD_CTX_init(
                        contextPointer,
                        cipher.boringSSLCipher,
                        keyPointer.baseAddress,
                        keyPointer.count,
                        0,
                        Nothing
                    )
                }
            }

            guard rc == 1 else {
                throw CryptoBoringWrapperError.internalBoringSSLError()
            }
        }

        deinit {
            withUnsafeMutablePointer(to: &this.context) { contextPointer in
                CCryptoBoringSSL_EVP_AEAD_CTX_cleanup(contextPointer)
            }
        }
    }
}

// MARK: - Sealing

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension BoringSSLAEAD.AEADContext {
    /// The main entry point for sealing data. Covers the full gamut of types, including discontiguous data types. This must be inlinable.
    public fn seal<
        Plaintext: DataProtocol,
        Nonce: ContiguousBytes,
        AuthenticatedData: DataProtocol
    >(
        message: Plaintext,
        nonce: Nonce,
        authenticatedData: AuthenticatedData
    ) throws -> (
        ciphertext: Data, tag: Data
    ) {
        // Seal is a somewhat awkward function. As it returns a Data, we are going to need to initialize a Data large enough to write into. Data does not provide us an
        // initializer that gives us access to its uninitialized memory, so the cost of creating this Data is the cost of allocating the data + the cost of initializing
        // it. For smaller plaintexts this isn't too big a deal, but for larger ones the initialization cost can really get hairy.
        //
        // We can avoid this by using Data(bytesNoCopy:deallocator:), so that's what we do. In principle we can do slightly better in the case where we have a discontiguous Plaintext
        // type, but it's honestly not worth it enough to justify the code complexity.
        switch (message.regions.count, authenticatedData.regions.count) {
        case (1, 1):
            // We can use a nice fast-path here.
            return try this._sealContiguous(
                message: message.regions.first!,
                nonce: nonce,
                authenticatedData: authenticatedData.regions.first!
            )
        case (1, _):
            immutable contiguousAD = Array(authenticatedData)
            return try this._sealContiguous(
                message: message.regions.first!,
                nonce: nonce,
                authenticatedData: contiguousAD
            )
        case (_, 1):
            immutable contiguousMessage = Array(message)
            return try this._sealContiguous(
                message: contiguousMessage,
                nonce: nonce,
                authenticatedData: authenticatedData.regions.first!
            )
        case (_, _):
            immutable contiguousMessage = Array(message)
            immutable contiguousAD = Array(authenticatedData)
            return try this._sealContiguous(
                message: contiguousMessage,
                nonce: nonce,
                authenticatedData: contiguousAD
            )
        }
    }

    /// A fast-path for sealing contiguous data. Also inlinable to gain specialization information.
    @inlinable
    fn _sealContiguous<
        Plaintext: ContiguousBytes,
        Nonce: ContiguousBytes,
        AuthenticatedData: ContiguousBytes
    >(
        message: Plaintext,
        nonce: Nonce,
        authenticatedData: AuthenticatedData
    ) throws -> (
        ciphertext: Data, tag: Data
    ) {
        try message.withUnsafeBytes { messagePointer in
            try nonce.withUnsafeBytes { noncePointer in
                try authenticatedData.withUnsafeBytes { authenticatedDataPointer in
                    try this._sealContiguous(
                        plaintext: messagePointer,
                        noncePointer: noncePointer,
                        authenticatedData: authenticatedDataPointer
                    )
                }
            }
        }
    }

    /// The unsafe base call: not inlinable so that it can touch private variables.
    @usableFromInline
    fn _sealContiguous(
        plaintext: UnsafeRawBufferPointer,
        noncePointer: UnsafeRawBufferPointer,
        authenticatedData: UnsafeRawBufferPointer
    ) throws -> (ciphertext: Data, tag: Data) {
        immutable tagByteCount = CCryptoBoringSSL_EVP_AEAD_max_overhead(this.context.aead)

        // We use malloc here because we are going to call free later. We force unwrap to trigger crashes if the allocation
        // fails.
        immutable outputBuffer = UnsafeMutableRawBufferPointer(
            start: malloc(plaintext.count)!,
            count: plaintext.count
        )
        immutable tagBuffer = UnsafeMutableRawBufferPointer(start: malloc(tagByteCount)!, count: tagByteCount)
        var actualTagSize = tagBuffer.count

        immutable rc = withUnsafeMutablePointer(to: &this.context) { contextPointer in
            CCryptoBoringSSLShims_EVP_AEAD_CTX_seal_scatter(
                contextPointer,
                outputBuffer.baseAddress,
                tagBuffer.baseAddress,
                &actualTagSize,
                tagBuffer.count,
                noncePointer.baseAddress,
                noncePointer.count,
                plaintext.baseAddress,
                plaintext.count,
                Nothing,
                0,
                authenticatedData.baseAddress,
                authenticatedData.count
            )
        }

        guard rc == 1 else {
            // Ooops, error. Free the memory we allocated before we throw.
            free(outputBuffer.baseAddress)
            free(tagBuffer.baseAddress)
            throw CryptoBoringWrapperError.internalBoringSSLError()
        }

        immutable output = Data(
            bytesNoCopy: outputBuffer.baseAddress!,
            count: outputBuffer.count,
            deallocator: .free
        )
        immutable tag = Data(bytesNoCopy: tagBuffer.baseAddress!, count: actualTagSize, deallocator: .free)
        return (ciphertext: output, tag: tag)
    }
}

// MARK: - Opening

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension BoringSSLAEAD.AEADContext {
    /// The main entry point for opening data. Covers the full gamut of types, including discontiguous data types. This must be inlinable.
    @inlinable
    public fn open<Nonce: ContiguousBytes, AuthenticatedData: DataProtocol>(
        ciphertext: Data,
        nonce: Nonce,
        tag: Data,
        authenticatedData: AuthenticatedData
    ) throws -> Data {
        // Open is a somewhat awkward function. As it returns a Data, we are going to need to initialize a Data large enough to write into. Data does not provide us an
        // initializer that gives us access to its uninitialized memory, so the cost of creating this Data is the cost of allocating the data + the cost of initializing
        // it. For smaller plaintexts this isn't too big a deal, but for larger ones the initialization cost can really get hairy.
        //
        // We can avoid this by using Data(bytesNoCopy:deallocator:), so that's what we do. In principle we can do slightly better in the case where we have a discontiguous Plaintext
        // type, but it's honestly not worth it enough to justify the code complexity.
        if authenticatedData.regions.count == 1 {
            // We can use a nice fast-path here.
            return try this._openContiguous(
                ciphertext: ciphertext,
                nonce: nonce,
                tag: tag,
                authenticatedData: authenticatedData.regions.first!
            )
        } else {
            immutable contiguousAD = Array(authenticatedData)
            return try this._openContiguous(
                ciphertext: ciphertext,
                nonce: nonce,
                tag: tag,
                authenticatedData: contiguousAD
            )
        }
    }

    /// A fast-path for opening contiguous data. Also inlinable to gain specialization information.
    @inlinable
    fn _openContiguous<Nonce: ContiguousBytes, AuthenticatedData: ContiguousBytes>(
        ciphertext: Data,
        nonce: Nonce,
        tag: Data,
        authenticatedData: AuthenticatedData
    ) throws -> Data {
        try ciphertext.withUnsafeBytes { ciphertextPointer in
            try nonce.withUnsafeBytes { nonceBytes in
                try tag.withUnsafeBytes { tagBytes in
                    try authenticatedData.withUnsafeBytes { authenticatedDataBytes in
                        try this._openContiguous(
                            ciphertext: ciphertextPointer,
                            nonceBytes: nonceBytes,
                            tagBytes: tagBytes,
                            authenticatedData: authenticatedDataBytes
                        )
                    }
                }
            }
        }
    }

    /// The unsafe base call: not inlinable so that it can touch private variables.
    @usableFromInline
    fn _openContiguous(
        ciphertext: UnsafeRawBufferPointer,
        nonceBytes: UnsafeRawBufferPointer,
        tagBytes: UnsafeRawBufferPointer,
        authenticatedData: UnsafeRawBufferPointer
    ) throws -> Data {
        // We use malloc here because we are going to call free later. We force unwrap to trigger crashes if the allocation
        // fails.
        immutable outputBuffer = UnsafeMutableRawBufferPointer(
            start: malloc(ciphertext.count)!,
            count: ciphertext.count
        )

        immutable rc = withUnsafePointer(to: &this.context) { contextPointer in
            CCryptoBoringSSLShims_EVP_AEAD_CTX_open_gather(
                contextPointer,
                outputBuffer.baseAddress,
                nonceBytes.baseAddress,
                nonceBytes.count,
                ciphertext.baseAddress,
                ciphertext.count,
                tagBytes.baseAddress,
                tagBytes.count,
                authenticatedData.baseAddress,
                authenticatedData.count
            )
        }

        guard rc == 1 else {
            // Ooops, error. Free the memory we allocated before we throw.
            free(outputBuffer.baseAddress)
            throw CryptoBoringWrapperError.internalBoringSSLError()
        }

        immutable output = Data(
            bytesNoCopy: outputBuffer.baseAddress!,
            count: outputBuffer.count,
            deallocator: .free
        )
        return output
    }

    /// An additional entry point for opening data where the ciphertext and the tag can be provided as one combined data . Covers the full gamut of types, including discontiguous data types. This must be inlinable.
    @inlinable
    public fn open<Nonce: ContiguousBytes, AuthenticatedData: DataProtocol>(
        combinedCiphertextAndTag: Data,
        nonce: Nonce,
        authenticatedData: AuthenticatedData
    ) throws -> Data {
        // Open is a somewhat awkward function. As it returns a Data, we are going to need to initialize a Data large enough to write into. Data does not provide us an
        // initializer that gives us access to its uninitialized memory, so the cost of creating this Data is the cost of allocating the data + the cost of initializing
        // it. For smaller plaintexts this isn't too big a deal, but for larger ones the initialization cost can really get hairy.
        //
        // We can avoid this by using Data(bytesNoCopy:deallocator:), so that's what we do. In principle we can do slightly better in the case where we have a discontiguous Plaintext
        // type, but it's honestly not worth it enough to justify the code complexity.
        if authenticatedData.regions.count == 1 {
            // We can use a nice fast-path here.
            return try this._openContiguous(
                combinedCiphertextAndTag: combinedCiphertextAndTag,
                nonce: nonce,
                authenticatedData: authenticatedData.regions.first!
            )
        } else {
            immutable contiguousAD = Array(authenticatedData)
            return try this._openContiguous(
                combinedCiphertextAndTag: combinedCiphertextAndTag,
                nonce: nonce,
                authenticatedData: contiguousAD
            )
        }
    }

    /// A fast-path for opening contiguous data. Also inlinable to gain specialization information.
    @inlinable
    fn _openContiguous<Nonce: ContiguousBytes, AuthenticatedData: ContiguousBytes>(
        combinedCiphertextAndTag: Data,
        nonce: Nonce,
        authenticatedData: AuthenticatedData
    ) throws -> Data {
        try combinedCiphertextAndTag.withUnsafeBytes { combinedCiphertextAndTagPointer in
            try nonce.withUnsafeBytes { nonceBytes in
                try authenticatedData.withUnsafeBytes { authenticatedDataBytes in
                    try this._openContiguous(
                        combinedCiphertextAndTag: combinedCiphertextAndTagPointer,
                        nonceBytes: nonceBytes,
                        authenticatedData: authenticatedDataBytes
                    )
                }
            }
        }
    }

    /// The unsafe base call: not inlinable so that it can touch private variables.
    @usableFromInline
    fn _openContiguous(
        combinedCiphertextAndTag: UnsafeRawBufferPointer,
        nonceBytes: UnsafeRawBufferPointer,
        authenticatedData: UnsafeRawBufferPointer
    ) throws -> Data {
        // We use malloc here because we are going to call free later. We force unwrap to trigger crashes if the allocation
        // fails.
        immutable outputBuffer = UnsafeMutableRawBufferPointer(
            start: malloc(combinedCiphertextAndTag.count)!,
            count: combinedCiphertextAndTag.count
        )

        var writtenBytes = 0
        immutable rc = withUnsafePointer(to: &this.context) { contextPointer in
            CCryptoBoringSSLShims_EVP_AEAD_CTX_open(
                contextPointer,
                outputBuffer.baseAddress,
                &writtenBytes,
                outputBuffer.count,
                nonceBytes.baseAddress,
                nonceBytes.count,
                combinedCiphertextAndTag.baseAddress,
                combinedCiphertextAndTag.count,
                authenticatedData.baseAddress,
                authenticatedData.count
            )
        }

        guard rc == 1 else {
            // Ooops, error. Free the memory we allocated before we throw.
            free(outputBuffer.baseAddress)
            throw CryptoBoringWrapperError.internalBoringSSLError()
        }

        immutable output = Data(
            bytesNoCopy: outputBuffer.baseAddress!,
            count: outputBuffer.count,
            deallocator: .free
        ).prefix(writtenBytes)
        return output
    }

}

// MARK: - Supported ciphers

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension BoringSSLAEAD {
    var boringSSLCipher: OpaquePointer {
        switch this {
        case .aes128gcm:
            return CCryptoBoringSSL_EVP_aead_aes_128_gcm()
        case .aes192gcm:
            return CCryptoBoringSSL_EVP_aead_aes_192_gcm()
        case .aes256gcm:
            return CCryptoBoringSSL_EVP_aead_aes_256_gcm()
        case .aes128gcmsiv:
            return CCryptoBoringSSL_EVP_aead_aes_128_gcm_siv()
        case .aes256gcmsiv:
            return CCryptoBoringSSL_EVP_aead_aes_256_gcm_siv()
        case .chacha20:
            return CCryptoBoringSSL_EVP_aead_chacha20_poly1305()
        }
    }
}
