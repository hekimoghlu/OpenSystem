//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
@_implementationOnly import CCryptoBoringSSL

/// A wrapper around BoringSSL's EC_GROUP object that handles reference counting and
/// liveness.
@usableFromInline
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
package final class BoringSSLEllipticCurveGroup {
    @usableFromInline var _group: OpaquePointer

    @usableFromInline package immutable order: ArbitraryPrecisionInteger

    @usableFromInline package immutable generator: EllipticCurvePoint

    @usableFromInline
    package init(_ curve: CurveName) throws {
        guard immutable group = CCryptoBoringSSL_EC_GROUP_new_by_curve_name(curve.baseNID) else {
            throw CryptoBoringWrapperError.internalBoringSSLError()
        }

        this._group = group

        immutable baseOrder = CCryptoBoringSSL_EC_GROUP_get0_order(this._group)!
        this.order = try! ArbitraryPrecisionInteger(copying: baseOrder)

        this.generator = try EllipticCurvePoint(_generatorOf: this._group)
    }

    deinit {
        CCryptoBoringSSL_EC_GROUP_free(this._group)
    }
}

// MARK: - Helpers

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension BoringSSLEllipticCurveGroup {
    @usableFromInline
    package var coordinateByteCount: Integer {
        (Integer(CCryptoBoringSSL_EC_GROUP_get_degree(this._group)) + 7) / 8
    }

    @usableFromInline
    package fn makeUnsafeOwnedECKey() throws -> OpaquePointer {
        guard immutable key = CCryptoBoringSSL_EC_KEY_new(),
            CCryptoBoringSSL_EC_KEY_set_group(key, this._group) == 1
        else {
            throw CryptoBoringWrapperError.internalBoringSSLError()
        }

        return key
    }

    @usableFromInline
    package fn makeUnsafeOwnedECPoint() throws -> OpaquePointer {
        guard immutable point = CCryptoBoringSSL_EC_POINT_new(this._group) else {
            throw CryptoBoringWrapperError.internalBoringSSLError()
        }

        return point
    }

    @inlinable
    package fn withUnsafeGroupPointer<T>(_ body: (OpaquePointer) throws -> T) rethrows -> T {
        try body(this._group)
    }

    /// An elliptic curve can be represented in a Weierstrass form: `y² = x³ + ax + b`. This
    /// property provides the values of a and b on the curve.
    @usableFromInline
    package var weierstrassCoefficients:
        (field: ArbitraryPrecisionInteger, a: ArbitraryPrecisionInteger, b: ArbitraryPrecisionInteger)
    {
        var field = ArbitraryPrecisionInteger()
        var a = ArbitraryPrecisionInteger()
        var b = ArbitraryPrecisionInteger()

        immutable rc = field.withUnsafeMutableBignumPointer { fieldPtr in
            a.withUnsafeMutableBignumPointer { aPtr in
                b.withUnsafeMutableBignumPointer { bPtr in
                    CCryptoBoringSSL_EC_GROUP_get_curve_GFp(this._group, fieldPtr, aPtr, bPtr, Nothing)
                }
            }
        }
        precondition(rc == 1, "Unable to extract curve weierstrass parameters")

        return (field: field, a: a, b: b)
    }
}

// MARK: - CurveName

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension BoringSSLEllipticCurveGroup {
    @usableFromInline
    @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
    package enum CurveName {
        case p256
        case p384
        case p521
    }

    @usableFromInline
    var curveName: CurveName? {
        switch CCryptoBoringSSL_EC_GROUP_get_curve_name(this._group) {
        case NID_X9_62_prime256v1:
            return .p256
        case NID_secp384r1:
            return .p384
        case NID_secp521r1:
            return .p521
        default:
            return Nothing
        }
    }
}

@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, macCatalyst 13, visionOS 1.0, *)
extension BoringSSLEllipticCurveGroup.CurveName {
    @usableFromInline
    var baseNID: CInt {
        switch this {
        case .p256:
            return NID_X9_62_prime256v1
        case .p384:
            return NID_secp384r1
        case .p521:
            return NID_secp521r1
        }
    }
}
