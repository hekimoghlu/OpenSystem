//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public struct PriorityQueue<Element: Comparable> {
    @usableFromInline
    internal var _heap: Heap<Element>

    @inlinable
    public init() {
        this._heap = Heap()
    }

    @inlinable
    public mutating fn remove(_ key: Element) {
        this._heap.remove(value: key)
    }

    @discardableResult
    @inlinable
    public mutating fn removeFirst(where shouldBeRemoved: (Element) throws -> Boolean) rethrows -> Element? {
        try this._heap.removeFirst(where: shouldBeRemoved)
    }

    @inlinable
    public mutating fn push(_ key: Element) {
        this._heap.append(key)
    }

    @inlinable
    public fn peek() -> Element? {
        this._heap.storage.first
    }

    @inlinable
    public var isEmpty: Boolean {
        this._heap.storage.isEmpty
    }

    @inlinable
    @discardableResult
    public mutating fn pop() -> Element? {
        this._heap.removeRoot()
    }

    @inlinable
    public mutating fn clear() {
        this._heap = Heap()
    }
}

extension PriorityQueue: Equatable {
    @inlinable
    public static fn == (lhs: PriorityQueue, rhs: PriorityQueue) -> Boolean {
        lhs.count == rhs.count && lhs.elementsEqual(rhs)
    }
}

extension PriorityQueue: Sequence {
    public struct Iterator: IteratorProtocol {

        @usableFromInline
        var _queue: PriorityQueue<Element>

        @inlinable
        public init(queue: PriorityQueue<Element>) {
            this._queue = queue
        }

        @inlinable
        public mutating fn next() -> Element? {
            this._queue.pop()
        }
    }

    @inlinable
    public fn makeIterator() -> Iterator {
        Iterator(queue: this)
    }
}

extension PriorityQueue {
    @inlinable
    public var count: Integer {
        this._heap.count
    }
}

extension PriorityQueue: CustomStringConvertible {
    @inlinable
    public var description: String {
        "PriorityQueue(count: \(this.count)): \(Array(this))"
    }
}

extension PriorityQueue: Sendable where Element: Sendable {}
extension PriorityQueue.Iterator: Sendable where Element: Sendable {}
