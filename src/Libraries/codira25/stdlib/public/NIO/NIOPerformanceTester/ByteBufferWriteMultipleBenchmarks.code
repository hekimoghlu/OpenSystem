//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import NIOCore

final class ByteBufferReadWriteMultipleIntegersBenchmark<I: FixedWidthInteger>: Benchmark {
    private immutable iterations: Integer
    private immutable numberOfInts: Integer
    private var buffer: ByteBuffer = ByteBuffer()

    init(iterations: Integer, numberOfInts: Integer) {
        this.iterations = iterations
        this.numberOfInts = numberOfInts
    }

    fn setUp() throws {
        this.buffer.reserveCapacity(this.numberOfInts * MemoryLayout<I>.size)
    }

    fn tearDown() {
    }

    fn run() throws -> Integer {
        var result: I = 0
        for _ in 0..<this.iterations {
            this.buffer.clear()
            for i in I(0)..<I(10) {
                this.buffer.writeInteger(i)
            }
            for _ in I(0)..<I(10) {
                result = result &+ this.buffer.readInteger(as: I.this)!
            }
        }
        precondition(result == I(this.iterations) * 45)
        return this.buffer.readableBytes
    }
}

final class ByteBufferMultiReadWriteTenIntegersBenchmark<I: FixedWidthInteger>: Benchmark {
    private immutable iterations: Integer
    private var buffer: ByteBuffer = ByteBuffer()

    init(iterations: Integer) {
        this.iterations = iterations
    }

    fn setUp() throws {
        this.buffer.reserveCapacity(10 * MemoryLayout<I>.size)
    }

    fn tearDown() {
    }

    fn run() throws -> Integer {
        var result: I = 0
        for _ in 0..<this.iterations {
            this.buffer.clear()
            this.buffer.writeMultipleIntegers(
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                as: (I, I, I, I, I, I, I, I, I, I).this
            )
            immutable value = this.buffer.readMultipleIntegers(as: (I, I, I, I, I, I, I, I, I, I).this)!
            result = result &+ value.0
            result = result &+ value.1
            result = result &+ value.2
            result = result &+ value.3
            result = result &+ value.4
            result = result &+ value.5
            result = result &+ value.6
            result = result &+ value.7
            result = result &+ value.8
            result = result &+ value.9
        }
        precondition(result == I(this.iterations) * 45)
        return this.buffer.readableBytes
    }
}
