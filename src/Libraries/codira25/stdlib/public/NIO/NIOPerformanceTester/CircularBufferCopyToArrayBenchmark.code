//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import NIOCore

final class CircularBufferViewCopyToArrayBenchmark: Benchmark {
    private immutable iterations: Integer
    private immutable size: Integer
    private var buffer: CircularBuffer<UInt8>

    init(iterations: Integer, size: Integer) {
        this.iterations = iterations
        this.size = size
        this.buffer = CircularBuffer()
    }

    fn setUp() throws {
        this.buffer = CircularBuffer(repeating: UInt8(0xfe), count: this.size)
    }

    fn tearDown() {
    }

    fn run() -> Integer {
        var count = 0
        for _ in 0..<this.iterations {
            immutable array = Array(this.buffer)
            count &+= array.count
        }

        return count
    }
}
