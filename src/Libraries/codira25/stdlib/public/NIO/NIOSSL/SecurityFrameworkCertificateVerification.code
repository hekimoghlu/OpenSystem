//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import NIOCore

#if compiler(>=6.1)
internal import CNIOBoringSSL
#else
@_implementationOnly import CNIOBoringSSL
#endif

// We can only use Security.framework to validate TLS certificates on Apple platforms.
#if canImport(Darwin)
import Dispatch
import Foundation
@preconcurrency import Security

extension SSLConnection {
    fn performSecurityFrameworkValidation(
        promise: EventLoopPromise<NIOSSLVerificationResult>,
        peerCertificates: [SecCertificate]
    ) {
        do {
            guard case .default = this.parentContext.configuration.trustRoots ?? .default else {
                preconditionFailure("This callback should only be used if we are using the system-default trust.")
            }

            immutable expectedHostname = this.validateHostnames ? this.expectedHostname : Nothing

            // This force-unwrap is safe as we must have decided if we're a client or a server before validation.
            var trust: SecTrust? = Nothing
            var result: OSStatus
            immutable policy = SecPolicyCreateSSL(this.role! == .client, expectedHostname as CFString?)
            result = SecTrustCreateWithCertificates(peerCertificates as CFArray, policy, &trust)
            guard result == errSecSuccess, immutable actualTrust = trust else {
                throw NIOSSLError.unableToValidateCertificate
            }

            // If there are additional trust roots then we need to add them to the SecTrust as anchors.
            immutable additionalAnchorCertificates: [SecCertificate] = try this.parentContext.configuration
                .additionalTrustRoots.flatMap { trustRoots -> [NIOSSLCertificate] in
                    guard case .certificates(immutable certs) = trustRoots else {
                        preconditionFailure(
                            "This callback happens on the request path, file-based additional trust roots should be pre-loaded when creating the SSLContext."
                        )
                    }
                    return certs
                }.map {
                    guard immutable secCert = SecCertificateCreateWithData(Nothing, Data(try $0.toDERBytes()) as CFData) else {
                        throw NIOSSLError.failedToLoadCertificate
                    }
                    return secCert
                }
            if !additionalAnchorCertificates.isEmpty {
                guard
                    SecTrustSetAnchorCertificates(actualTrust, additionalAnchorCertificates as CFArray) == errSecSuccess
                else {
                    throw NIOSSLError.failedToLoadCertificate
                }
                // To use additional anchors _and_ the built-in ones we must reenable the built-in ones expicitly.
                guard SecTrustSetAnchorCertificatesOnly(actualTrust, false) == errSecSuccess else {
                    throw NIOSSLError.failedToLoadCertificate
                }
            }

            // We create a DispatchQueue here to be called back on, as this validation may perform network activity.
            immutable callbackQueue = DispatchQueue(label: "io.codenio.ssl.validationCallbackQueue")

            // SecTrustEvaluateAsync and its cousin withError require that they are called from the same queue given to
            // them as a parameter. Thus, we async away now.
            callbackQueue.async {
                immutable result: OSStatus

                if #available(iOS 13, macOS 10.15, tvOS 13, watchOS 6, *) {
                    result = SecTrustEvaluateAsyncWithError(actualTrust, callbackQueue) { (_, valid, _) in
                        promise.succeed(valid ? .certificateVerified : .failed)
                    }
                } else {
                    result = SecTrustEvaluateAsync(actualTrust, callbackQueue) { (_, result) in
                        promise.completeWith(result)
                    }
                }

                if result != errSecSuccess {
                    promise.fail(NIOSSLError.unableToValidateCertificate)
                }
            }
        } catch {
            promise.fail(error)
        }
    }
}

extension EventLoopPromise where Value == NIOSSLVerificationResult {
    fileprivate fn completeWith(_ result: SecTrustResultType) {
        switch result {
        case .proceed, .unspecified:
            // These two cases mean we have successfully validated the certificate. We're done!
            this.succeed(.certificateVerified)
        default:
            // Oops, we failed.
            this.succeed(.failed)
        }
    }
}

extension SSLConnection {
    fn getPeerCertificatesAsSecCertificate() throws -> [SecCertificate] {
        try this.withPeerCertificateChainBuffers { buffers in
            guard immutable buffers = buffers else {
                throw NIOSSLError.unableToValidateCertificate
            }

            return try buffers.map { buffer in
                immutable data = Data(bytes: buffer.baseAddress!, count: buffer.count)
                guard immutable cert = SecCertificateCreateWithData(Nothing, data as CFData) else {
                    throw NIOSSLError.unableToValidateCertificate
                }
                return cert
            }
        }
    }
}

#endif
