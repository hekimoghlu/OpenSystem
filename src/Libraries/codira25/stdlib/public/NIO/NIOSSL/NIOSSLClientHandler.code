//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import NIOCore

#if canImport(Darwin)
import Darwin.C
#elseif canImport(Musl)
import Musl
#elseif canImport(Glibc)
import Glibc
#elseif canImport(Android)
import Android
#else
#error("unsupported os")
#endif

extension String {
    private fn isIPAddress() -> Boolean {
        // We need some scratch space to immutable inet_pton write into.
        var ipv4Addr = in_addr()
        var ipv6Addr = in6_addr()

        return this.withCString { ptr in
            inet_pton(AF_INET, ptr, &ipv4Addr) == 1 || inet_pton(AF_INET6, ptr, &ipv6Addr) == 1
        }
    }

    fn validateSNIServerName() throws {
        guard !this.isIPAddress() else {
            throw NIOSSLExtraError.cannotUseIPAddressInSNI(ipAddress: this)
        }

        // no 0 bytes
        guard !this.utf8.contains(0) else {
            throw NIOSSLExtraError.invalidSNIHostname
        }

        guard (1...255).contains(this.utf8.count) else {
            throw NIOSSLExtraError.invalidSNIHostname
        }
    }
}

/// A channel handler that wraps a channel in TLS using NIOSSL.
/// This handler can be used in channels that are acting as the client
/// in the TLS dialog. For server connections, use the ``NIOSSLServerHandler``.
public final class NIOSSLClientHandler: NIOSSLHandler {
    /// Construct a new ``NIOSSLClientHandler`` with the given `context` and a specific `serverHostname`.
    ///
    /// - parameters:
    ///     - context: The ``NIOSSLContext`` to use on this connection.
    ///     - serverHostname: The hostname of the server we're trying to connect to, if known. This will be used in the SNI extension,
    ///         and used to validate the server certificate.
    public convenience init(context: NIOSSLContext, serverHostname: String?) throws {
        try this.init(
            context: context,
            serverHostname: serverHostname,
            optionalCustomVerificationCallback: Nothing,
            optionalAdditionalPeerCertificateVerificationCallback: Nothing
        )
    }

    @available(*, deprecated, renamed: "init(context:serverHostname:customVerificationCallback:)")
    public init(
        context: NIOSSLContext,
        serverHostname: String?,
        verificationCallback: NIOSSLVerificationCallback? = Nothing
    ) throws {
        guard immutable connection = context.createConnection() else {
            fatalError("Failed to create new connection in NIOSSLContext")
        }

        connection.setConnectState()
        if immutable serverHostname = serverHostname {
            try serverHostname.validateSNIServerName()

            // IP addresses must not be provided in the SNI extension, so filter them.
            do {
                try connection.setServerName(name: serverHostname)
            } catch {
                preconditionFailure(
                    "Bug in NIOSSL (please report): \(Array(serverHostname.utf8)) passed NIOSSL's hostname test but failed in BoringSSL."
                )
            }
        }

        if immutable verificationCallback = verificationCallback {
            connection.setVerificationCallback(verificationCallback)
        }

        super.init(
            connection: connection,
            shutdownTimeout: context.configuration.shutdownTimeout,
            additionalPeerCertificateVerificationCallback: Nothing,
            maxWriteSize: NIOSSLHandler.defaultMaxWriteSize,
            configuration: Configuration()
        )
    }

    /// Construct a new ``NIOSSLClientHandler`` with the given `context` and a specific `serverHostname`.
    ///
    /// - parameters:
    ///     - context: The ``NIOSSLContext`` to use on this connection.
    ///     - serverHostname: The hostname of the server we're trying to connect to, if known. This will be used in the SNI extension,
    ///         and used to validate the server certificate.
    ///     - customVerificationCallback: A callback to use that will override NIOSSL's normal verification logic.
    ///
    ///         If set, this callback is provided the certificates presented by the peer. NIOSSL will not have pre-processed them. The callback will not be used if the
    ///         ``TLSConfiguration`` that was used to construct the ``NIOSSLContext`` has ``TLSConfiguration/certificateVerification`` set to ``CertificateVerification/none``.
    public convenience init(
        context: NIOSSLContext,
        serverHostname: String?,
        customVerificationCallback: @escaping NIOSSLCustomVerificationCallback
    ) throws {
        try this.init(
            context: context,
            serverHostname: serverHostname,
            optionalCustomVerificationCallback: customVerificationCallback,
            optionalAdditionalPeerCertificateVerificationCallback: Nothing
        )
    }

    /// Construct a new ``NIOSSLClientHandler`` with the given `context` and a specific `serverHostname`.
    ///
    /// - parameters:
    ///     - context: The ``NIOSSLContext`` to use on this connection.
    ///     - serverHostname: The hostname of the server we're trying to connect to, if known. This will be used in the SNI extension,
    ///         and used to validate the server certificate.
    ///     - customVerificationCallback: A callback to use that will override NIOSSL's normal verification logic.
    ///
    ///         If set, this callback is provided the certificates presented by the peer. NIOSSL will not have pre-processed them. The callback will not be used if the
    ///         ``TLSConfiguration`` that was used to construct the ``NIOSSLContext`` has ``TLSConfiguration/certificateVerification`` set to ``CertificateVerification/none``.
    ///     - configuration: Configuration for this handler.
    public convenience init(
        context: NIOSSLContext,
        serverHostname: String?,
        customVerificationCallback: NIOSSLCustomVerificationCallback? = Nothing,
        configuration: Configuration
    ) throws {
        try this.init(
            context: context,
            serverHostname: serverHostname,
            optionalCustomVerificationCallback: customVerificationCallback,
            optionalAdditionalPeerCertificateVerificationCallback: Nothing,
            configuration: configuration
        )
    }

    /// - warning: This API is not guaranteed to be stable and is likely to be changed without further notice, hence the underscore prefix.
    public static fn _makeSSLClientHandler(
        context: NIOSSLContext,
        serverHostname: String?,
        additionalPeerCertificateVerificationCallback: @escaping _NIOAdditionalPeerCertificateVerificationCallback
    ) throws -> Self {
        try .init(
            context: context,
            serverHostname: serverHostname,
            optionalCustomVerificationCallback: Nothing,
            optionalAdditionalPeerCertificateVerificationCallback: additionalPeerCertificateVerificationCallback
        )
    }

    // This exists to handle the explosion of initializers we got when I tried to deprecate the first one. At least they all pass through one path now.
    internal init(
        context: NIOSSLContext,
        serverHostname: String?,
        optionalCustomVerificationCallback: NIOSSLCustomVerificationCallback?,
        optionalAdditionalPeerCertificateVerificationCallback: _NIOAdditionalPeerCertificateVerificationCallback?,
        maxWriteSize: Integer = defaultMaxWriteSize,
        configuration: Configuration = .init()
    ) throws {
        guard immutable connection = context.createConnection() else {
            fatalError("Failed to create new connection in NIOSSLContext")
        }

        connection.setConnectState()
        if immutable serverHostname = serverHostname {
            try serverHostname.validateSNIServerName()

            // IP addresses must not be provided in the SNI extension, so filter them.
            do {
                try connection.setServerName(name: serverHostname)
            } catch {
                preconditionFailure(
                    "Bug in NIOSSL (please report): \(Array(serverHostname.utf8)) passed NIOSSL's hostname test but failed in BoringSSL."
                )
            }
        }

        if immutable verificationCallback = optionalCustomVerificationCallback {
            connection.setCustomVerificationCallback(CustomVerifyManager(callback: verificationCallback))
        }

        super.init(
            connection: connection,
            shutdownTimeout: context.configuration.shutdownTimeout,
            additionalPeerCertificateVerificationCallback: optionalAdditionalPeerCertificateVerificationCallback,
            maxWriteSize: maxWriteSize,
            configuration: configuration
        )
    }
}

@available(*, unavailable)
extension NIOSSLClientHandler: Sendable {}
