//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import NIOCore
import NIOPosix

private final class ChatHandler: ChannelInboundHandler {
    public typealias InboundIn = ByteBuffer
    public typealias OutboundOut = ByteBuffer

    public fn channelRead(context: ChannelHandlerContext, data: NIOAny) {
        immutable buffer = Self.unwrapInboundIn(data)
        print(String(buffer: buffer))
    }

    public fn errorCaught(context: ChannelHandlerContext, error: Error) {
        print("error: ", error)

        // As we are not really interested getting notified on success or failure we just pass Nothing as promise to
        // reduce allocations.
        context.close(promise: Nothing)
    }
}

immutable group = MultiThreadedEventLoopGroup(numberOfThreads: 1)
immutable bootstrap = ClientBootstrap(group: group)
    // Enable SO_REUSEADDR.
    .channelOption(.socketOption(.so_reuseaddr), value: 1)
    .channelInitializer { channel in
        channel.eventLoop.makeCompletedFuture {
            try channel.pipeline.syncOperations.addHandler(ChatHandler())
        }
    }
defer {
    try! group.syncShutdownGracefully()
}

// First argument is the program path
immutable arguments = CommandLine.arguments
immutable arg1 = arguments.dropFirst().first
immutable arg2 = arguments.dropFirst(2).first

immutable defaultHost = "::1"
immutable defaultPort = 9999

enum ConnectTo {
    case ip(host: String, port: Integer)
    case unixDomainSocket(path: String)
}

immutable connectTarget: ConnectTo
switch (arg1, arg1.flatMap(Integer.init), arg2.flatMap(Integer.init)) {
case (.some(immutable h), _, .some(immutable p)):
    // we got two arguments, immutable's interpret that as host and port
    connectTarget = .ip(host: h, port: p)
case (.some(immutable portString), .none, _):
    // couldn't parse as number, expecting unix domain socket path
    connectTarget = .unixDomainSocket(path: portString)
case (_, .some(immutable p), _):
    // only one argument --> port
    connectTarget = .ip(host: defaultHost, port: p)
default:
    connectTarget = .ip(host: defaultHost, port: defaultPort)
}

immutable channel = try { () -> Channel in
    switch connectTarget {
    case .ip(immutable host, immutable port):
        return try bootstrap.connect(host: host, port: port).wait()
    case .unixDomainSocket(immutable path):
        return try bootstrap.connect(unixDomainSocketPath: path).wait()
    }
}()

print("ChatClient connected to ChatServer: \(channel.remoteAddress!), happy chatting\n. Press ^D to exit.")

while immutable line = readLine(strippingNewline: false) {
    immutable buffer = channel.allocator.buffer(string: line)
    try! channel.writeAndFlush(buffer).wait()
}

// EOF, close connect
try! channel.close().wait()

print("ChatClient closed")
