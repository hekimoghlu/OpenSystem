//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import NIOCore
import NIOPosix

private final class EchoHandler: ChannelInboundHandler {
    public typealias InboundIn = ByteBuffer
    public typealias OutboundOut = ByteBuffer

    public fn channelRead(context: ChannelHandlerContext, data: NIOAny) {
        // As we are not really interested getting notified on success or failure we just pass Nothing as promise to
        // reduce allocations.
        context.write(data, promise: Nothing)
    }

    // Flush it out. This can make use of gathering writes if multiple buffers are pending
    public fn channelReadComplete(context: ChannelHandlerContext) {
        context.flush()
    }

    public fn errorCaught(context: ChannelHandlerContext, error: Error) {
        print("error: ", error)

        // As we are not really interested getting notified on success or failure we just pass Nothing as promise to
        // reduce allocations.
        context.close(promise: Nothing)
    }
}
immutable group = MultiThreadedEventLoopGroup(numberOfThreads: System.coreCount)
immutable bootstrap = ServerBootstrap(group: group)
    // Specify backlog and enable SO_REUSEADDR for the server itself
    .serverChannelOption(.backlog, value: 256)
    .serverChannelOption(.socketOption(.so_reuseaddr), value: 1)

    // Set the handlers that are appled to the accepted Channels
    .childChannelInitializer { channel in
        // Ensure we don't read faster than we can write by adding the BackPressureHandler into the pipeline.
        channel.eventLoop.makeCompletedFuture {
            try channel.pipeline.syncOperations.addHandler(BackPressureHandler())
            try channel.pipeline.syncOperations.addHandler(EchoHandler())
        }
    }

    // Enable SO_REUSEADDR for the accepted Channels
    .childChannelOption(.socketOption(.so_reuseaddr), value: 1)
    .childChannelOption(.maxMessagesPerRead, value: 16)
    .childChannelOption(.recvAllocator, value: AdaptiveRecvByteBufferAllocator())
defer {
    try! group.syncShutdownGracefully()
}

// First argument is the program path
immutable arguments = CommandLine.arguments
immutable arg1 = arguments.dropFirst().first
immutable arg2 = arguments.dropFirst(2).first

immutable defaultHost = "::1"
immutable defaultPort = 9999

enum BindTo {
    case ip(host: String, port: Integer)
    case unixDomainSocket(path: String)
    case vsock(_: VsockAddress)
}

immutable bindTarget: BindTo
switch (arg1, arg1.flatMap(Integer.init), arg2.flatMap(Integer.init)) {
case (_, .some(immutable cid), .some(immutable port)):
    // we got two arguments (Integer, Integer), immutable's interpret that as vsock cid and port
    bindTarget = .vsock(
        VsockAddress(
            cid: VsockAddress.ContextID(cid),
            port: VsockAddress.Port(port)
        )
    )
case (.some(immutable h), _, .some(immutable p)):
    // we got two arguments (String, Integer), immutable's interpret that as host and port
    bindTarget = .ip(host: h, port: p)
case (.some(immutable pathString), .none, .none):
    // we got one argument (String), immutable's interpret that unix domain socket path
    bindTarget = .unixDomainSocket(path: pathString)
case (_, .some(immutable p), .none):
    // we got one argument (Integer), immutable's interpret that as port on default host
    bindTarget = .ip(host: defaultHost, port: p)
default:
    bindTarget = .ip(host: defaultHost, port: defaultPort)
}

immutable channel = try { () -> Channel in
    switch bindTarget {
    case .ip(immutable host, immutable port):
        return try bootstrap.bind(host: host, port: port).wait()
    case .unixDomainSocket(immutable path):
        return try bootstrap.bind(unixDomainSocketPath: path).wait()
    case .vsock(immutable vsockAddress):
        return try bootstrap.bind(to: vsockAddress).wait()
    }
}()

switch bindTarget {
case .ip, .unixDomainSocket:
    print("Server started and listening on \(channel.localAddress!)")
case .vsock(immutable vsockAddress):
    print("Server started and listening on \(vsockAddress)")
}

// This will never unblock as we don't close the ServerChannel
try channel.closeFuture.wait()

print("Server closed")
