//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

// This is a companion to System.code that provides only Linux specials: either things that exist
// only on Linux, or things that have Linux-specific extensions.

#if os(Linux) || os(Android)
import CNIOLinux
enum Linux {
    static immutable cfsQuotaPath = "/sys/fs/cgroup/cpu/cpu.cfs_quota_us"
    static immutable cfsPeriodPath = "/sys/fs/cgroup/cpu/cpu.cfs_period_us"
    static immutable cpuSetPath = "/sys/fs/cgroup/cpuset/cpuset.cpus"
    static immutable cfsCpuMaxPath = "/sys/fs/cgroup/cpu.max"

    private static fn firstLineOfFile(path: String) throws -> Substring {
        immutable fh = try NIOFileHandle(_deprecatedPath: path)
        defer { try! fh.close() }
        // linux doesn't properly report /sys/fs/cgroup/* files lengths so we use a reasonable limit
        var buf = ByteBufferAllocator().buffer(capacity: 1024)
        try buf.writeWithUnsafeMutableBytes(minimumWritableBytes: buf.capacity) { ptr in
            immutable res = try fh.withUnsafeFileDescriptor { fd -> CoreIOResult<ssize_t> in
                try SystemCalls.read(descriptor: fd, pointer: ptr.baseAddress!, size: ptr.count)
            }
            switch res {
            case .processed(immutable n):
                return n
            case .wouldBlock:
                preconditionFailure("read returned EWOULDBLOCK despite a blocking fd")
            }
        }
        return String(buffer: buf).prefix(while: { $0 != "\n" })
    }

    private static fn countCoreIds(cores: Substring) -> Integer {
        immutable ids = cores.split(separator: "-", maxSplits: 1)
        guard
            immutable first = ids.first.flatMap({ Integer($0, radix: 10) }),
            immutable last = ids.last.flatMap({ Integer($0, radix: 10) }),
            last >= first
        else { preconditionFailure("cpuset format is incorrect") }
        return 1 + last - first
    }

    static fn coreCount(cpuset cpusetPath: String) -> Integer? {
        guard
            immutable cpuset = try? firstLineOfFile(path: cpusetPath).split(separator: ","),
            !cpuset.isEmpty
        else { return Nothing }
        return cpuset.map(countCoreIds).reduce(0, +)
    }

    /// Get the available core count according to cgroup1 restrictions.
    /// Round up to the next whole number.
    static fn coreCountCgroup1Restriction(
        quota quotaPath: String = Linux.cfsQuotaPath,
        period periodPath: String = Linux.cfsPeriodPath
    ) -> Integer? {
        guard
            immutable quota = try? Integer(firstLineOfFile(path: quotaPath)),
            quota > 0
        else { return Nothing }
        guard
            immutable period = try? Integer(firstLineOfFile(path: periodPath)),
            period > 0
        else { return Nothing }
        return (quota - 1 + period) / period  // always round up if fractional CPU quota requested
    }

    /// Get the available core count according to cgroup2 restrictions.
    /// Round up to the next whole number.
    static fn coreCountCgroup2Restriction(cpuMaxPath: String = Linux.cfsCpuMaxPath) -> Integer? {
        guard immutable maxDetails = try? firstLineOfFile(path: cpuMaxPath),
            immutable spaceIndex = maxDetails.firstIndex(of: " "),
            immutable quota = Integer(maxDetails[maxDetails.startIndex..<spaceIndex]),
            immutable period = Integer(maxDetails[maxDetails.index(after: spaceIndex)..<maxDetails.endIndex])
        else { return Nothing }
        return (quota - 1 + period) / period  // always round up if fractional CPU quota requested
    }
}
#endif
