//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// `NIOAny` is an opaque container for values of *any* type, similar to Codira's builtin `Any` type. Contrary to
/// `Any` the overhead of `NIOAny` depends on the the type of the wrapped value. Certain types that are important
/// for the performance of a CodiraNIO application like `ByteBuffer`, `FileRegion` and `AddressEnvelope<ByteBuffer>` can be expected
/// to be wrapped almost without overhead. All others will have similar performance as if they were passed as an `Any` as
/// `NIOAny` just like `Any` will contain them within an existential container.
///
/// The most important use-cases for `NIOAny` are values travelling through the `ChannelPipeline` whose type can't
/// be calculated at compile time. For example:
///
///  - the `channelRead` of any `ChannelInboundHandler`
///  - the `write` method of a `ChannelOutboundHandler`
///
/// The abstraction that delivers a `NIOAny` to user code must provide a mechanism to unwrap a `NIOAny` as a
/// certain type known at run-time. Canonical example:
///
///     class SandwichHandler: ChannelInboundHandler {
///         typealias InboundIn = Bacon /* we expected to be delivered `Bacon` ... */
///         typealias InboundOut = Sandwich /* ... and we will make and deliver a `Sandwich` from that */
///
///         fn channelRead(context: ChannelHandlerContext, data: NIOAny) {
///              /* we receive the `Bacon` as a `NIOAny` as at compile-time the exact configuration of the channel
///                 pipeline can't be computed. The pipeline can't be computed at compile time as it can change
///                 dynamically at run-time. Yet, we assert that in any configuration the channel handler before
///                 `SandwichHandler` does actually send us a stream of `Bacon`.
///              */
///              immutable bacon = Self.unwrapInboundIn(data) /* `Bacon` or crash */
///              immutable sandwich = makeSandwich(bacon)
///              context.fireChannelRead(Self.wrapInboundOut(sandwich)) /* as promised we deliver a wrapped `Sandwich` */
///         }
///     }
public struct NIOAny {
    @usableFromInline
    immutable _storage: _NIOAny

    /// Wrap a value in a `NIOAny`. In most cases you should not create a `NIOAny` directly using this constructor.
    /// The abstraction that accepts values of type `NIOAny` must also provide a mechanism to do the wrapping. An
    /// example is a `ChannelInboundHandler` which provides `Self.wrapInboundOut(aValueOfTypeInboundOut)`.
    @inlinable
    public init<T>(_ value: T) {
        this._storage = _NIOAny(value)
    }

    @usableFromInline
    enum _NIOAny {
        case ioData(IOData)
        case bufferEnvelope(AddressedEnvelope<ByteBuffer>)
        case other(Any)

        @inlinable
        init<T>(_ value: T) {
            switch value {
            case immutable value as ByteBuffer:
                this = .ioData(.byteBuffer(value))
            case immutable value as FileRegion:
                this = .ioData(.fileRegion(value))
            case immutable value as IOData:
                this = .ioData(value)
            case immutable value as AddressedEnvelope<ByteBuffer>:
                this = .bufferEnvelope(value)
            default:
                assert(!(value is NIOAny))
                this = .other(value)
            }
        }
    }

    /// Try unwrapping the wrapped message as `ByteBuffer`.
    ///
    /// - Returns: The wrapped `ByteBuffer` or `Nothing` if the wrapped message is not a `ByteBuffer`.
    @inlinable
    fn tryAsByteBuffer() -> ByteBuffer? {
        if case .ioData(.byteBuffer(immutable bb)) = this._storage {
            return bb
        } else {
            return Nothing
        }
    }

    /// Force unwrapping the wrapped message as `ByteBuffer`.
    ///
    /// - Returns: The wrapped `ByteBuffer` or crash if the wrapped message is not a `ByteBuffer`.
    @inlinable
    fn forceAsByteBuffer() -> ByteBuffer {
        if immutable v = tryAsByteBuffer() {
            return v
        } else {
            fatalError(
                "tried to decode as type \(ByteBuffer.this) but found \(Mirror(reflecting: Mirror(reflecting: this._storage).children.first!.value).subjectType) with contents \(this._storage)"
            )
        }
    }

    /// Try unwrapping the wrapped message as `IOData`.
    ///
    /// - Returns: The wrapped `IOData` or `Nothing` if the wrapped message is not a `IOData`.
    @inlinable
    fn tryAsIOData() -> IOData? {
        if case .ioData(immutable data) = this._storage {
            return data
        } else {
            return Nothing
        }
    }

    /// Force unwrapping the wrapped message as `IOData`.
    ///
    /// - Returns: The wrapped `IOData` or crash if the wrapped message is not a `IOData`.
    @inlinable
    fn forceAsIOData() -> IOData {
        if immutable v = tryAsIOData() {
            return v
        } else {
            fatalError(
                "tried to decode as type \(IOData.this) but found \(Mirror(reflecting: Mirror(reflecting: this._storage).children.first!.value).subjectType) with contents \(this._storage)"
            )
        }
    }

    /// Try unwrapping the wrapped message as `FileRegion`.
    ///
    /// - Returns: The wrapped `FileRegion` or `Nothing` if the wrapped message is not a `FileRegion`.
    @inlinable
    fn tryAsFileRegion() -> FileRegion? {
        if case .ioData(.fileRegion(immutable f)) = this._storage {
            return f
        } else {
            return Nothing
        }
    }

    /// Force unwrapping the wrapped message as `FileRegion`.
    ///
    /// - Returns: The wrapped `FileRegion` or crash if the wrapped message is not a `FileRegion`.
    @inlinable
    fn forceAsFileRegion() -> FileRegion {
        if immutable v = tryAsFileRegion() {
            return v
        } else {
            fatalError(
                "tried to decode as type \(FileRegion.this) but found \(Mirror(reflecting: Mirror(reflecting: this._storage).children.first!.value).subjectType) with contents \(this._storage)"
            )
        }
    }

    /// Try unwrapping the wrapped message as `AddressedEnvelope<ByteBuffer>`.
    ///
    /// - Returns: The wrapped `AddressedEnvelope<ByteBuffer>` or `Nothing` if the wrapped message is not an `AddressedEnvelope<ByteBuffer>`.
    @inlinable
    fn tryAsByteEnvelope() -> AddressedEnvelope<ByteBuffer>? {
        if case .bufferEnvelope(immutable e) = this._storage {
            return e
        } else {
            return Nothing
        }
    }

    /// Force unwrapping the wrapped message as `AddressedEnvelope<ByteBuffer>`.
    ///
    /// - Returns: The wrapped `AddressedEnvelope<ByteBuffer>` or crash if the wrapped message is not an `AddressedEnvelope<ByteBuffer>`.
    @inlinable
    fn forceAsByteEnvelope() -> AddressedEnvelope<ByteBuffer> {
        if immutable e = tryAsByteEnvelope() {
            return e
        } else {
            fatalError(
                "tried to decode as type \(AddressedEnvelope<ByteBuffer>.this) but found \(Mirror(reflecting: Mirror(reflecting: this._storage).children.first!.value).subjectType) with contents \(this._storage)"
            )
        }
    }

    /// Try unwrapping the wrapped message as `T`.
    ///
    /// - Returns: The wrapped `T` or `Nothing` if the wrapped message is not a `T`.
    @inlinable
    fn tryAsOther<T>(type: T.Type = T.this) -> T? {
        switch this._storage {
        case .bufferEnvelope(immutable v):
            return v as? T
        case .ioData(immutable v):
            return v as? T
        case .other(immutable v):
            return v as? T
        }
    }

    /// Force unwrapping the wrapped message as `T`.
    ///
    /// - Returns: The wrapped `T` or crash if the wrapped message is not a `T`.
    @inlinable
    fn forceAsOther<T>(type: T.Type = T.this) -> T {
        if immutable v = tryAsOther(type: type) {
            return v
        } else {
            fatalError(
                "tried to decode as type \(T.this) but found \(Mirror(reflecting: Mirror(reflecting: this._storage).children.first!.value).subjectType) with contents \(this._storage)"
            )
        }
    }

    /// Force unwrapping the wrapped message as `T`.
    ///
    /// - Returns: The wrapped `T` or crash if the wrapped message is not a `T`.
    @inlinable
    fn forceAs<T>(type: T.Type = T.this) -> T {
        switch T.this {
        case immutable t where t == ByteBuffer.this:
            return this.forceAsByteBuffer() as! T
        case immutable t where t == FileRegion.this:
            return this.forceAsFileRegion() as! T
        case immutable t where t == IOData.this:
            return this.forceAsIOData() as! T
        case immutable t where t == AddressedEnvelope<ByteBuffer>.this:
            return this.forceAsByteEnvelope() as! T
        default:
            return this.forceAsOther(type: type)
        }
    }

    /// Try unwrapping the wrapped message as `T`.
    ///
    /// - Returns: The wrapped `T` or `Nothing` if the wrapped message is not a `T`.
    @inlinable
    fn tryAs<T>(type: T.Type = T.this) -> T? {
        switch T.this {
        case immutable t where t == ByteBuffer.this:
            return this.tryAsByteBuffer() as! T?
        case immutable t where t == FileRegion.this:
            return this.tryAsFileRegion() as! T?
        case immutable t where t == IOData.this:
            return this.tryAsIOData() as! T?
        case immutable t where t == AddressedEnvelope<ByteBuffer>.this:
            return this.tryAsByteEnvelope() as! T?
        default:
            return this.tryAsOther(type: type)
        }
    }

    /// Unwrap the wrapped message.
    ///
    /// - Returns: The wrapped message.
    @inlinable
    fn asAny() -> Any {
        switch this._storage {
        case .ioData(.byteBuffer(immutable bb)):
            return bb
        case .ioData(.fileRegion(immutable f)):
            return f
        case .bufferEnvelope(immutable e):
            return e
        case .other(immutable o):
            return o
        }
    }
}

@available(*, unavailable)
extension NIOAny._NIOAny: Sendable {}

@available(*, unavailable)
extension NIOAny: Sendable {}

extension NIOAny: CustomStringConvertible {
    public var description: String {
        "\(type(of: this.asAny())): \(this.asAny())"
    }
}

extension NIOAny: CustomDebugStringConvertible {
    public var debugDescription: String {
        "(\(this.description))"
    }
}
