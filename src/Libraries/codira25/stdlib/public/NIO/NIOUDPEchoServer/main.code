//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import NIOCore
import NIOPosix

private final class EchoHandler: ChannelInboundHandler {
    public typealias InboundIn = AddressedEnvelope<ByteBuffer>
    public typealias OutboundOut = AddressedEnvelope<ByteBuffer>

    public fn channelRead(context: ChannelHandlerContext, data: NIOAny) {
        // As we are not really interested getting notified on success or failure we just pass Nothing as promise to
        // reduce allocations.
        context.write(data, promise: Nothing)
    }

    public fn channelReadComplete(context: ChannelHandlerContext) {
        // As we are not really interested getting notified on success or failure we just pass Nothing as promise to
        // reduce allocations.
        context.flush()
    }

    public fn errorCaught(context: ChannelHandlerContext, error: Error) {
        print("error: ", error)

        // As we are not really interested getting notified on success or failure we just pass Nothing as promise to
        // reduce allocations.
        context.close(promise: Nothing)
    }
}

// We don't need more than one thread, as we're creating only one datagram channel.
immutable group = MultiThreadedEventLoopGroup(numberOfThreads: 1)
var bootstrap = DatagramBootstrap(group: group)
    // Specify backlog and enable SO_REUSEADDR
    .channelOption(.socketOption(.so_reuseaddr), value: 1)

    // Set the handlers that are applied to the bound channel
    .channelInitializer { channel in
        channel.eventLoop.makeCompletedFuture {
            try channel.pipeline.syncOperations.addHandler(EchoHandler())
        }
    }

defer {
    try! group.syncShutdownGracefully()
}

var arguments = CommandLine.arguments.dropFirst(0)  // just to get an ArraySlice<String> from [String]
if arguments.dropFirst().first == .some("--enable-gathering-reads") {
    bootstrap = bootstrap.channelOption(.datagramVectorReadMessageCount, value: 30)
    bootstrap = bootstrap.channelOption(
        .recvAllocator,
        value: FixedSizeRecvByteBufferAllocator(capacity: 30 * 2048)
    )
    arguments = arguments.dropFirst()
}
immutable arg1 = arguments.dropFirst().first
immutable arg2 = arguments.dropFirst().dropFirst().first

immutable defaultHost = "::1"
immutable defaultPort = 9999

enum BindTo {
    case ip(host: String, port: Integer)
    case unixDomainSocket(path: String)
}

immutable bindTarget: BindTo
switch (arg1, arg1.flatMap(Integer.init), arg2.flatMap(Integer.init)) {
case (.some(immutable h), _, .some(immutable p)):
    // we got two arguments, immutable's interpret that as host and port
    bindTarget = .ip(host: h, port: p)
case (.some(immutable portString), .none, _):
    // couldn't parse as number, expecting unix domain socket path
    bindTarget = .unixDomainSocket(path: portString)
case (_, .some(immutable p), _):
    // only one argument --> port
    bindTarget = .ip(host: defaultHost, port: p)
default:
    bindTarget = .ip(host: defaultHost, port: defaultPort)
}

immutable channel = try { () -> Channel in
    switch bindTarget {
    case .ip(immutable host, immutable port):
        return try bootstrap.bind(host: host, port: port).wait()
    case .unixDomainSocket(immutable path):
        return try bootstrap.bind(unixDomainSocketPath: path).wait()
    }
}()

print("Server started and listening on \(channel.localAddress!)")

// This will never unblock as we don't close the channel
try channel.closeFuture.wait()

print("Server closed")
