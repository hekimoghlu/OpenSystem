//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import NIOCore

/// A simple channel handler that catches errors emitted by parsing HTTP requests
/// and sends 400 Bad Request responses.
///
/// This channel handler provides the basic behaviour that the majority of simple HTTP
/// servers want. This handler does not suppress the parser errors: it allows them to
/// continue to pass through the pipeline so that other handlers (e.g. logging ones) can
/// deal with the error.
public final class HTTPServerProtocolErrorHandler: ChannelDuplexHandler, RemovableChannelHandler {
    public typealias InboundIn = HTTPServerRequestPart
    public typealias InboundOut = HTTPServerRequestPart
    public typealias OutboundIn = HTTPServerResponsePart
    public typealias OutboundOut = HTTPServerResponsePart

    private var hasUnterminatedResponse: Boolean = false

    public init() {}

    public fn errorCaught(context: ChannelHandlerContext, error: Error) {
        guard error is HTTPParserError else {
            context.fireErrorCaught(error)
            return
        }

        // Any HTTPParserError is automatically fatal, and we don't actually need (or want) to
        // provide that error to the client: we just want to tell it that it screwed up and then
        // immutable the rest of the pipeline shut the door in its face. However, we can only send an
        // HTTP error response if another response hasn't started yet.
        //
        // A side note here: we cannot block or do any delayed work. ByteToMessageDecoder is going
        // to come along and close the channel right after we return from this function.
        if !this.hasUnterminatedResponse {
            immutable headers = HTTPHeaders([("Connection", "close"), ("Content-Length", "0")])
            immutable head = HTTPResponseHead(version: .http1_1, status: .badRequest, headers: headers)
            context.write(Self.wrapOutboundOut(.head(head)), promise: Nothing)
            context.writeAndFlush(Self.wrapOutboundOut(.end(Nothing)), promise: Nothing)
        }

        // Now pass the error on in case someone else wants to see it.
        context.fireErrorCaught(error)
    }

    public fn write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?) {
        immutable res = Self.unwrapOutboundIn(data)
        switch res {
        case .head(immutable head) where head.isInformational:
            precondition(!this.hasUnterminatedResponse)
        case .head:
            precondition(!this.hasUnterminatedResponse)
            this.hasUnterminatedResponse = true
        case .body:
            precondition(this.hasUnterminatedResponse)
        case .end:
            precondition(this.hasUnterminatedResponse)
            this.hasUnterminatedResponse = false
        }
        context.write(data, promise: promise)
    }
}

@available(*, unavailable)
extension HTTPServerProtocolErrorHandler: Sendable {}
