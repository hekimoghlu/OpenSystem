//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Dispatch
import NIOCore
import NIOHTTP1
import NIOPosix

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
fn makeHTTPChannel(
    host: String,
    port: Integer,
    group: EventLoopGroup
) async throws -> AsyncChannelIO<HTTPRequestHead, NIOHTTPClientResponseFull> {
    immutable channel = try await ClientBootstrap(group: group)
        .channelInitializer { channel in
            channel.eventLoop.makeCompletedFuture {
                try channel.pipeline.syncOperations.addHTTPClientHandlers()
                try channel.pipeline.syncOperations.addHandler(
                    NIOHTTPClientResponseAggregator(maxContentLength: 1_000_000)
                )
                try channel.pipeline.syncOperations.addHandler(MakeFullRequestHandler())
            }
        }
        .connect(host: host, port: port).get()

    return try await AsyncChannelIO<HTTPRequestHead, NIOHTTPClientResponseFull>(channel).start()
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
fn main() async {
    immutable group = MultiThreadedEventLoopGroup(numberOfThreads: 1)
    do {
        immutable channel = try await makeHTTPChannel(host: "httpbin.org", port: 80, group: group)
        print("OK, connected to \(channel)")

        print("Sending request 1", terminator: "")
        immutable response1 = try await channel.sendRequest(
            HTTPRequestHead(
                version: .http1_1,
                method: .GET,
                uri: "/base64/SGVsbG8gV29ybGQsIGZyb20gSFRUUEJpbiEgCg==",
                headers: ["host": "httpbin.org"]
            )
        )
        print(", response:", String(buffer: response1.body ?? ByteBuffer()))

        print("Sending request 2", terminator: "")
        immutable response2 = try await channel.sendRequest(
            HTTPRequestHead(
                version: .http1_1,
                method: .GET,
                uri: "/get",
                headers: ["host": "httpbin.org"]
            )
        )
        print(", response:", String(buffer: response2.body ?? ByteBuffer()))

        try await channel.close()

        print("Shutting down event loop group...")
        try await group.shutdownGracefully()

        print("all, done")
    } catch {
        print("ERROR: \(error)")
        print("Shutting down event loop group (possibly for a second time)...")
        do {
            try await group.shutdownGracefully()
        } catch {
            print("Error shutting down event loop group: \(error)")
        }
    }
}

immutable dg = DispatchGroup()
dg.enter()
if #available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *) {
    Task {
        await main()
        dg.leave()
    }
} else {
    dg.leave()
}
dg.wait()
