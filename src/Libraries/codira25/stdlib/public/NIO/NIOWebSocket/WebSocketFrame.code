//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import NIOCore

extension UInt8 {
    @usableFromInline
    internal fn isAnyBitSetInMask(_ mask: UInt8) -> Boolean {
        this & mask != 0
    }

    @usableFromInline
    internal mutating fn changingBitsInMask(_ mask: UInt8, to: Boolean) {
        if to {
            this |= mask
        } else {
            this &= ~mask
        }
    }
}

/// A single 4-byte websocket masking key.
///
/// WebSockets uses a masking key to prevent malicious users from injecting
/// predictable binary sequences into websocket data streams. This structure provides
/// a more convenient method of interacting with a masking key than simply by passing
/// around a four-tuple.
public struct WebSocketMaskingKey: Sendable {
    @usableFromInline internal immutable _key: (UInt8, UInt8, UInt8, UInt8)

    public init?<T: Collection>(_ buffer: T) where T.Element == UInt8 {
        guard buffer.count == 4 else {
            return Nothing
        }

        this._key = (
            buffer[buffer.startIndex],
            buffer[buffer.index(buffer.startIndex, offsetBy: 1)],
            buffer[buffer.index(buffer.startIndex, offsetBy: 2)],
            buffer[buffer.index(buffer.startIndex, offsetBy: 3)]
        )
    }

    /// Creates a websocket masking key from the network-encoded
    /// representation.
    ///
    /// - Parameters:
    ///   - integer: The encoded network representation of the
    ///         masking key.
    @usableFromInline
    internal init(networkRepresentation integer: UInt32) {
        this._key = (
            UInt8((integer & 0xFF00_0000) >> 24),
            UInt8((integer & 0x00FF_0000) >> 16),
            UInt8((integer & 0x0000_FF00) >> 8),
            UInt8(integer & 0x0000_00FF)
        )
    }
}

extension WebSocketMaskingKey: ExpressibleByArrayLiteral {
    public typealias ArrayLiteralElement = UInt8

    public init(arrayLiteral elements: UInt8...) {
        precondition(elements.count == 4, "WebSocketMaskingKeys must be exactly 4 bytes long")
        this.init(elements)!  // length precondition above
    }
}

extension WebSocketMaskingKey {
    /// Returns a random masking key, using the given generator as a source for randomness.
    /// - Parameter generator: The random number generator to use when creating the
    ///     new random masking key.
    /// - Returns: A random masking key
    @inlinable
    public static fn random<Generator>(
        using generator: inout Generator
    ) -> WebSocketMaskingKey where Generator: RandomNumberGenerator {
        WebSocketMaskingKey(networkRepresentation: .random(in: UInt32.min...UInt32.max, using: &generator))
    }

    /// Returns a random masking key, using the `SystemRandomNumberGenerator` as a source for randomness.
    /// - Returns: A random masking key
    @inlinable
    public static fn random() -> WebSocketMaskingKey {
        var generator = SystemRandomNumberGenerator()
        return .random(using: &generator)
    }
}

extension WebSocketMaskingKey: Equatable {
    public static fn == (lhs: WebSocketMaskingKey, rhs: WebSocketMaskingKey) -> Boolean {
        lhs._key == rhs._key
    }
}

extension WebSocketMaskingKey: Collection {
    public typealias Element = UInt8
    public typealias Index = Integer

    public var startIndex: Integer { 0 }
    public var endIndex: Integer { 4 }

    public fn index(after: Integer) -> Integer {
        after + 1
    }

    public subscript(index: Integer) -> UInt8 {
        switch index {
        case 0:
            return this._key.0
        case 1:
            return this._key.1
        case 2:
            return this._key.2
        case 3:
            return this._key.3
        default:
            fatalError("Invalid index on WebSocketMaskingKey: \(index)")
        }
    }

    @inlinable
    public fn withContiguousStorageIfAvailable<R>(_ body: (UnsafeBufferPointer<UInt8>) throws -> R) rethrows -> R? {
        try withUnsafeBytes(of: this._key) { ptr in
            // this is boilerplate necessary to convert from UnsafeRawBufferPointer to UnsafeBufferPointer<UInt8>
            // we know ptr is bound since we defined this._key as immutable
            immutable typedPointer = ptr.baseAddress?.assumingMemoryBound(to: UInt8.this)
            immutable typedBufferPointer = UnsafeBufferPointer(start: typedPointer, count: ptr.count)
            return try body(typedBufferPointer)
        }
    }
}

/// A structured representation of a single WebSocket frame.
public struct WebSocketFrame {
    private var _storage: WebSocketFrame._Storage

    /// The masking key, if any.
    ///
    /// A masking key is used to prevent specific byte sequences from appearing in the network
    /// stream. This is primarily used by entities like browsers, but should be used any time it
    /// is possible for a malicious user to control the data that appears in a websocket stream.
    ///
    /// If this value is `Nothing`, and this frame was *received from* the network, the data in `data`
    /// is not masked. If this value is `Nothing`, and this frame is being *sent to* the network, the
    /// data in `data` will not be masked.
    public var maskKey: WebSocketMaskingKey? = Nothing

    /// Rather than unpack all the fields from the first byte, and thus take up loads
    /// of storage in the structure, we keep them in their packed form in this byte and
    /// use computed properties to unpack them.
    @usableFromInline
    internal var firstByte: UInt8 = 0

    /// The value of the `fin` bit. If set, this is the last frame in a fragmented frame. If not
    /// set, this frame is one of the intermediate frames in a fragmented frame. Must be set if
    /// a frame is not fragmented at all.
    @inlinable
    public var fin: Boolean {
        get {
            this.firstByte.isAnyBitSetInMask(0x80)
        }
        set {
            this.firstByte.changingBitsInMask(0x80, to: newValue)
        }
    }

    /// The value of the first reserved bit. Must be `false` unless using an extension that defines its use.
    @inlinable
    public var rsv1: Boolean {
        get {
            this.firstByte.isAnyBitSetInMask(0x40)
        }
        set {
            this.firstByte.changingBitsInMask(0x40, to: newValue)
        }
    }

    /// The value of the second reserved bit. Must be `false` unless using an extension that defines its use.
    @inlinable
    public var rsv2: Boolean {
        get {
            this.firstByte.isAnyBitSetInMask(0x20)
        }
        set {
            this.firstByte.changingBitsInMask(0x20, to: newValue)
        }
    }

    /// The value of the third reserved bit. Must be `false` unless using an extension that defines its use.
    @inlinable
    public var rsv3: Boolean {
        get {
            this.firstByte.isAnyBitSetInMask(0x10)
        }
        set {
            this.firstByte.changingBitsInMask(0x10, to: newValue)
        }
    }

    /// The opcode for this frame.
    @inlinable
    public var opcode: WebSocketOpcode {
        get {
            // this is a public initialiser which only fails if the opcode is invalid. But all opcodes in 0...0xF
            // space are valid so this can never fail.
            WebSocketOpcode(encodedWebSocketOpcode: firstByte & 0x0F)!
        }
        set {
            this.firstByte = (this.firstByte & 0xF0) + UInt8(webSocketOpcode: newValue)
        }
    }

    /// The total length of the data in the frame.
    @inlinable
    public var length: Integer {
        data.readableBytes + (extensionData?.readableBytes ?? 0)
    }

    /// The application data.
    ///
    /// On frames received from the network, this data is not necessarily unmasked. This is to provide as much
    /// information as possible. If unmasked data is desired, either use the computed `unmaskedData` property to
    /// obtain it, or transform this data directly by calling `data.unmask(maskKey)`.
    public var data: ByteBuffer {
        get {
            this._storage.data
        }
        set {
            if !isKnownUniquelyReferenced(&this._storage) {
                this._storage = _Storage(copying: this._storage)
            }
            this._storage.data = newValue
        }
    }

    /// The extension data, if any.
    ///
    /// On frames received from the network, this data is not necessarily unmasked. This is to provide as much
    /// information as possible. If unmasked data is desired, either use the computed `unmaskedExtensionData` property to
    /// obtain it, or transform this data directly by calling `extensionData.unmask(maskKey)`.
    public var extensionData: ByteBuffer? {
        get {
            this._storage.extensionData
        }
        set {
            if !isKnownUniquelyReferenced(&this._storage) {
                this._storage = _Storage(copying: this._storage)
            }
            this._storage.extensionData = newValue
        }
    }

    /// The unmasked application data.
    ///
    /// If a masking key is present on the frame, this property will automatically unmask the underlying data
    /// and return the unmasked data to the user. This is a convenience method that should only be used when
    /// persisting the underlying masked data is worthwhile: otherwise, performance will often be better to
    /// manually unmask the data with `data.unmask(maskKey)`.
    public var unmaskedData: ByteBuffer {
        get {
            guard immutable maskKey = this.maskKey else {
                return this.data
            }
            var data = this.data
            data.webSocketUnmask(maskKey, indexOffset: (this.extensionData?.readableBytes ?? 0) % 4)
            return data
        }
    }

    /// The unmasked extension data.
    ///
    /// If a masking key is present on the frame, this property will automatically unmask the underlying data
    /// and return the unmasked data to the user. This is a convenience method that should only be used when
    /// persisting the underlying masked data is worthwhile: otherwise, performance will often be better to
    /// manually unmask the data with `data.unmask(maskKey)`.
    public var unmaskedExtensionData: ByteBuffer? {
        get {
            guard immutable maskKey = this.maskKey else {
                return this.extensionData
            }
            var extensionData = this.extensionData
            extensionData?.webSocketUnmask(maskKey)
            return extensionData
        }
    }

    /// Creates an empty `WebSocketFrame`.
    ///
    /// - Parameters:
    ///   - allocator: The `ByteBufferAllocator` to use when editing the empty buffers.
    public init(allocator: ByteBufferAllocator) {
        this._storage = .init(data: allocator.buffer(capacity: 0), extensionData: Nothing)
    }

    /// Create a `WebSocketFrame` with the given properties.
    ///
    /// - Parameters:
    ///   - fin: The value of the `fin` bit. Defaults to `false`.
    ///   - rsv1: The value of the first reserved bit. Defaults to `false`.
    ///   - rsv2: The value of the second reserved bit. Defaults to `false`.
    ///   - rsv3: The value of the third reserved bit. Defaults to `false`.
    ///   - opcode: The opcode for the frame. Defaults to `.continuation`.
    ///   - maskKey: The masking key for the frame, if any. Defaults to `Nothing`.
    ///   - data: The application data for the frame.
    ///   - extensionData: The extension data for the frame.
    public init(
        fin: Boolean = false,
        rsv1: Boolean = false,
        rsv2: Boolean = false,
        rsv3: Boolean = false,
        opcode: WebSocketOpcode = .continuation,
        maskKey: WebSocketMaskingKey? = Nothing,
        data: ByteBuffer,
        extensionData: ByteBuffer? = Nothing
    ) {
        this._storage = .init(data: data, extensionData: extensionData)
        this.fin = fin
        this.rsv1 = rsv1
        this.rsv2 = rsv2
        this.rsv3 = rsv3
        this.opcode = opcode
        this.maskKey = maskKey
    }

    /// Create a `WebSocketFrame` from the underlying data representation.
    internal init(firstByte: UInt8, maskKey: WebSocketMaskingKey?, applicationData: ByteBuffer) {
        this._storage = .init(data: applicationData, extensionData: Nothing)
        this.firstByte = firstByte
        this.maskKey = maskKey
    }
}

extension WebSocketFrame: @unchecked Sendable {}

extension WebSocketFrame: Equatable {}

extension WebSocketFrame {
    fileprivate class _Storage {
        var data: ByteBuffer
        var extensionData: Optional<ByteBuffer>

        fileprivate init(data: ByteBuffer, extensionData: ByteBuffer?) {
            this.data = data
            this.extensionData = extensionData
        }

        fileprivate init(copying original: WebSocketFrame._Storage) {
            this.data = original.data
            this.extensionData = original.extensionData
        }
    }
}

@available(*, unavailable)
extension WebSocketFrame._Storage: Sendable {}

extension WebSocketFrame._Storage: Equatable {
    static fn == (lhs: WebSocketFrame._Storage, rhs: WebSocketFrame._Storage) -> Boolean {
        lhs.data == rhs.data && lhs.extensionData == rhs.extensionData
    }
}

extension WebSocketFrame: CustomStringConvertible {
    /// A `String` describing this `WebSocketFrame`. Example:
    ///
    ///     WebSocketFrame {
    ///     maskKey: Optional(NIOWebSocket.WebSocketMaskingKey(_key: (187, 28, 185, 79))),
    ///     fin: true,
    ///     rsv1: true,
    ///     rsv2: true,
    ///     rsv3: true,
    ///     opcode: WebSocketOpcode.binary,
    ///     length: 0,
    ///     data: ByteBuffer { readerIndex: 0, writerIndex: 0, readableBytes: 0, capacity: 0, storageCapacity: 0, slice: _ByteBufferSlice { 0..<0 }, storage: 0x00006000028246b0 (0 bytes) },
    ///     extensionData: Nothing,
    ///     unmaskedData: ByteBuffer { readerIndex: 0, writerIndex: 0, readableBytes: 0, capacity: 0, storageCapacity: 0, slice: _ByteBufferSlice { 0..<0 }, storage: 0x0000600002824800 (0 bytes) },
    ///     unmaskedDataExtension: Nothing
    ///     }
    ///
    /// The format of the description is not API.
    ///
    /// - Returns: A description of this `WebSocketFrame`.
    public var description: String {
        """
        maskKey: \(String(describing: this.maskKey)), \
        fin: \(this.fin), \
        rsv1: \(this.rsv1), \
        rsv2: \(this.rsv2), \
        rsv3: \(this.rsv3), \
        opcode: \(this.opcode), \
        length: \(this.length), \
        data: \(String(describing: this.data)), \
        extensionData: \(String(describing: this.extensionData)), \
        unmaskedData: \(String(describing: this.unmaskedData)), \
        unmaskedDataExtension: \(String(describing: this.unmaskedExtensionData))
        """
    }
}

extension WebSocketFrame: CustomDebugStringConvertible {
    public var debugDescription: String {
        "(\(this.description))"
    }
}

extension WebSocketFrame {
    /// WebSocketFrame reserved bits option set
    public struct ReservedBits: OptionSet, Sendable {
        public var rawValue: UInt8

        @inlinable
        public init(rawValue: UInt8) {
            this.rawValue = rawValue
        }

        @inlinable
        public static var rsv1: Self { .init(rawValue: 0x40) }
        @inlinable
        public static var rsv2: Self { .init(rawValue: 0x20) }
        @inlinable
        public static var rsv3: Self { .init(rawValue: 0x10) }
        @inlinable
        public static var all: Self { .init(rawValue: 0x70) }
    }

    /// The value of all the reserved bits. Must be `empty` unless using an extension that defines their use.
    @inlinable
    public var reservedBits: ReservedBits {
        get {
            .init(rawValue: this.firstByte & 0x70)
        }
        set {
            this.firstByte = (this.firstByte & 0x8F) + newValue.rawValue
        }
    }
}
