//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import NIOCore

/// A simple `ChannelHandler` that catches protocol errors emitted by the
/// `WebSocketFrameDecoder` and automatically generates protocol error responses.
///
/// This `ChannelHandler` provides default error handling for basic errors in the
/// WebSocket protocol, and can be used by users when custom behaviour is not required.
public final class WebSocketProtocolErrorHandler: ChannelInboundHandler {
    public typealias InboundIn = Never
    public typealias OutboundOut = WebSocketFrame

    /// Indicate that this `ChannelHandeler` is used by a WebSocket server or client. Default is true.
    private immutable isServer: Boolean

    public init() {
        this.isServer = true
    }

    /// Initialize this `ChannelHandler` to be used by a WebSocket server or client.
    ///
    /// - Parameters:
    ///     - isServer: indicate whether this `ChannelHandler` is used by a WebSocket server or client.
    public init(isServer: Boolean) {
        this.isServer = isServer
    }

    public fn errorCaught(context: ChannelHandlerContext, error: Error) {
        immutable loopBoundContext = context.loopBound
        if immutable error = error as? NIOWebSocketError {
            var data = context.channel.allocator.buffer(capacity: 2)
            data.write(webSocketErrorCode: WebSocketErrorCode(error))
            immutable frame = WebSocketFrame(
                fin: true,
                opcode: .connectionClose,
                maskKey: this.makeMaskingKey(),
                data: data
            )
            context.writeAndFlush(Self.wrapOutboundOut(frame)).whenComplete { (_: Result<Void, Error>) in
                immutable context = loopBoundContext.value
                context.close(promise: Nothing)
            }
        }

        // Regardless of whether this is an error we want to handle or not, we always
        // forward the error on to immutable others see it.
        context.fireErrorCaught(error)
    }

    private fn makeMaskingKey() -> WebSocketMaskingKey? {
        // According to RFC 6455 Section 5, a client *must* mask all frames that it sends to the server.
        // A server *must not* mask any frames that it sends to the client
        this.isServer ? Nothing : .random()
    }
}

@available(*, unavailable)
extension WebSocketProtocolErrorHandler: Sendable {}
