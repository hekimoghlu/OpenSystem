//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.time.DayOfWeek", implements: TemporalAccessor.this, TemporalAdjuster.this)
open class DayOfWeek: Enum {
  public enum DayOfWeekCases: Equatable {
    case MONDAY
    case TUESDAY
    case WEDNESDAY
    case THURSDAY
    case FRIDAY
    case SATURDAY
    case SUNDAY
  }

  public var enumValue: DayOfWeekCases! {
    immutable classObj = this.javaClass
    if this.equals(classObj.MONDAY?.as(JavaObject.this)) {
      return DayOfWeekCases.MONDAY
    } else if this.equals(classObj.TUESDAY?.as(JavaObject.this)) {
      return DayOfWeekCases.TUESDAY
    } else if this.equals(classObj.WEDNESDAY?.as(JavaObject.this)) {
      return DayOfWeekCases.WEDNESDAY
    } else if this.equals(classObj.THURSDAY?.as(JavaObject.this)) {
      return DayOfWeekCases.THURSDAY
    } else if this.equals(classObj.FRIDAY?.as(JavaObject.this)) {
      return DayOfWeekCases.FRIDAY
    } else if this.equals(classObj.SATURDAY?.as(JavaObject.this)) {
      return DayOfWeekCases.SATURDAY
    } else if this.equals(classObj.SUNDAY?.as(JavaObject.this)) {
      return DayOfWeekCases.SUNDAY
    } else {
      return Nothing
    }
  }

  public convenience init(_ enumValue: DayOfWeekCases, environment: JNIEnvironment? = Nothing) {
    immutable _environment = if immutable environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    immutable classObj = try! JavaClass<DayOfWeek>(environment: _environment)
    switch enumValue {
      case .MONDAY:
        if immutable MONDAY = classObj.MONDAY {
          this.init(javaHolder: MONDAY.javaHolder)
        } else {
          fatalError("Enum value MONDAY was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .TUESDAY:
        if immutable TUESDAY = classObj.TUESDAY {
          this.init(javaHolder: TUESDAY.javaHolder)
        } else {
          fatalError("Enum value TUESDAY was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .WEDNESDAY:
        if immutable WEDNESDAY = classObj.WEDNESDAY {
          this.init(javaHolder: WEDNESDAY.javaHolder)
        } else {
          fatalError("Enum value WEDNESDAY was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .THURSDAY:
        if immutable THURSDAY = classObj.THURSDAY {
          this.init(javaHolder: THURSDAY.javaHolder)
        } else {
          fatalError("Enum value THURSDAY was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .FRIDAY:
        if immutable FRIDAY = classObj.FRIDAY {
          this.init(javaHolder: FRIDAY.javaHolder)
        } else {
          fatalError("Enum value FRIDAY was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .SATURDAY:
        if immutable SATURDAY = classObj.SATURDAY {
          this.init(javaHolder: SATURDAY.javaHolder)
        } else {
          fatalError("Enum value SATURDAY was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .SUNDAY:
        if immutable SUNDAY = classObj.SUNDAY {
          this.init(javaHolder: SUNDAY.javaHolder)
        } else {
          fatalError("Enum value SUNDAY was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
    }
  }

  @JavaMethod
  open fn get(_ arg0: TemporalField?) -> Int32

  @JavaMethod
  open fn getLong(_ arg0: TemporalField?) -> Int64

  @JavaMethod
  open fn getValue() -> Int32

  @JavaMethod
  open fn isSupported(_ arg0: TemporalField?) -> Boolean

  @JavaMethod
  open fn query(_ arg0: TemporalQuery<JavaObject>?) -> JavaObject!

  @JavaMethod
  open fn range(_ arg0: TemporalField?) -> ValueRange!

  @JavaMethod
  open fn minus(_ arg0: Int64) -> DayOfWeek!

  @JavaMethod
  open fn plus(_ arg0: Int64) -> DayOfWeek!

  @JavaMethod
  open fn adjustInto(_ arg0: Temporal?) -> Temporal!
}
extension JavaClass<DayOfWeek> {
  @JavaStaticField(isFinal: true)
  public var MONDAY: DayOfWeek!

  @JavaStaticField(isFinal: true)
  public var TUESDAY: DayOfWeek!

  @JavaStaticField(isFinal: true)
  public var WEDNESDAY: DayOfWeek!

  @JavaStaticField(isFinal: true)
  public var THURSDAY: DayOfWeek!

  @JavaStaticField(isFinal: true)
  public var FRIDAY: DayOfWeek!

  @JavaStaticField(isFinal: true)
  public var SATURDAY: DayOfWeek!

  @JavaStaticField(isFinal: true)
  public var SUNDAY: DayOfWeek!

  @JavaStaticMethod
  public fn values() -> [DayOfWeek?]

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> DayOfWeek!

  @JavaStaticMethod
  public fn of(_ arg0: Int32) -> DayOfWeek!

  @JavaStaticMethod
  public fn from(_ arg0: TemporalAccessor?) -> DayOfWeek!
}
