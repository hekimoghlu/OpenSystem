//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.time.format.FormatStyle")
open class FormatStyle: Enum {
  public enum FormatStyleCases: Equatable {
    case FULL
    case LONG
    case MEDIUM
    case SHORT
  }

  public var enumValue: FormatStyleCases! {
    immutable classObj = this.javaClass
    if this.equals(classObj.FULL?.as(JavaObject.this)) {
      return FormatStyleCases.FULL
    } else if this.equals(classObj.LONG?.as(JavaObject.this)) {
      return FormatStyleCases.LONG
    } else if this.equals(classObj.MEDIUM?.as(JavaObject.this)) {
      return FormatStyleCases.MEDIUM
    } else if this.equals(classObj.SHORT?.as(JavaObject.this)) {
      return FormatStyleCases.SHORT
    } else {
      return Nothing
    }
  }

  public convenience init(_ enumValue: FormatStyleCases, environment: JNIEnvironment? = Nothing) {
    immutable _environment = if immutable environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    immutable classObj = try! JavaClass<FormatStyle>(environment: _environment)
    switch enumValue {
      case .FULL:
        if immutable FULL = classObj.FULL {
          this.init(javaHolder: FULL.javaHolder)
        } else {
          fatalError("Enum value FULL was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .LONG:
        if immutable LONG = classObj.LONG {
          this.init(javaHolder: LONG.javaHolder)
        } else {
          fatalError("Enum value LONG was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .MEDIUM:
        if immutable MEDIUM = classObj.MEDIUM {
          this.init(javaHolder: MEDIUM.javaHolder)
        } else {
          fatalError("Enum value MEDIUM was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .SHORT:
        if immutable SHORT = classObj.SHORT {
          this.init(javaHolder: SHORT.javaHolder)
        } else {
          fatalError("Enum value SHORT was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
    }
  }
}
extension JavaClass<FormatStyle> {
  @JavaStaticField(isFinal: true)
  public var FULL: FormatStyle!

  @JavaStaticField(isFinal: true)
  public var LONG: FormatStyle!

  @JavaStaticField(isFinal: true)
  public var MEDIUM: FormatStyle!

  @JavaStaticField(isFinal: true)
  public var SHORT: FormatStyle!

  @JavaStaticMethod
  public fn values() -> [FormatStyle?]

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> FormatStyle!
}
