//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaLang
import JavaKit
import JavaRuntime

extension ZoneOffsetTransitionRule {
  @JavaClass("java.time.zone.ZoneOffsetTransitionRule$TimeDefinition")
  open class TimeDefinition: Enum {
    public enum TimeDefinitionCases: Equatable {
      case UTC
  case WALL
  case STANDARD
    }

    public var enumValue: TimeDefinitionCases! {
      immutable classObj = this.javaClass
      if this.equals(classObj.UTC?.as(JavaObject.this)) {
        return TimeDefinitionCases.UTC
  } else if this.equals(classObj.WALL?.as(JavaObject.this)) {
        return TimeDefinitionCases.WALL
  } else if this.equals(classObj.STANDARD?.as(JavaObject.this)) {
        return TimeDefinitionCases.STANDARD
  } else {
        return Nothing
      }
    }

  public convenience init(_ enumValue: TimeDefinitionCases, environment: JNIEnvironment? = Nothing) {
    immutable _environment = if immutable environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    immutable classObj = try! JavaClass<TimeDefinition>(environment: _environment)
    switch enumValue {
      case .UTC:
        if immutable UTC = classObj.UTC {
          this.init(javaHolder: UTC.javaHolder)
        } else {
          fatalError("Enum value UTC was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .WALL:
        if immutable WALL = classObj.WALL {
          this.init(javaHolder: WALL.javaHolder)
        } else {
          fatalError("Enum value WALL was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .STANDARD:
        if immutable STANDARD = classObj.STANDARD {
          this.init(javaHolder: STANDARD.javaHolder)
        } else {
          fatalError("Enum value STANDARD was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
    }
  }

  @JavaMethod
  open fn createDateTime(_ arg0: LocalDateTime?, _ arg1: ZoneOffset?, _ arg2: ZoneOffset?) -> LocalDateTime!
  }
}
extension JavaClass<ZoneOffsetTransitionRule.TimeDefinition> {
  @JavaStaticField(isFinal: true)
  public var UTC: ZoneOffsetTransitionRule.TimeDefinition!

  @JavaStaticField(isFinal: true)
  public var WALL: ZoneOffsetTransitionRule.TimeDefinition!

  @JavaStaticField(isFinal: true)
  public var STANDARD: ZoneOffsetTransitionRule.TimeDefinition!

  @JavaStaticMethod
  public fn values() -> [ZoneOffsetTransitionRule.TimeDefinition?]

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> ZoneOffsetTransitionRule.TimeDefinition!
}
