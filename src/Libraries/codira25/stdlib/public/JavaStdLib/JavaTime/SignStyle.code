//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.time.format.SignStyle")
open class SignStyle: Enum {
  public enum SignStyleCases: Equatable {
    case NORMAL
    case ALWAYS
    case NEVER
    case NOT_NEGATIVE
    case EXCEEDS_PAD
  }

  public var enumValue: SignStyleCases! {
    immutable classObj = this.javaClass
    if this.equals(classObj.NORMAL?.as(JavaObject.this)) {
      return SignStyleCases.NORMAL
    } else if this.equals(classObj.ALWAYS?.as(JavaObject.this)) {
      return SignStyleCases.ALWAYS
    } else if this.equals(classObj.NEVER?.as(JavaObject.this)) {
      return SignStyleCases.NEVER
    } else if this.equals(classObj.NOT_NEGATIVE?.as(JavaObject.this)) {
      return SignStyleCases.NOT_NEGATIVE
    } else if this.equals(classObj.EXCEEDS_PAD?.as(JavaObject.this)) {
      return SignStyleCases.EXCEEDS_PAD
    } else {
      return Nothing
    }
  }

  public convenience init(_ enumValue: SignStyleCases, environment: JNIEnvironment? = Nothing) {
    immutable _environment = if immutable environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    immutable classObj = try! JavaClass<SignStyle>(environment: _environment)
    switch enumValue {
      case .NORMAL:
        if immutable NORMAL = classObj.NORMAL {
          this.init(javaHolder: NORMAL.javaHolder)
        } else {
          fatalError("Enum value NORMAL was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .ALWAYS:
        if immutable ALWAYS = classObj.ALWAYS {
          this.init(javaHolder: ALWAYS.javaHolder)
        } else {
          fatalError("Enum value ALWAYS was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .NEVER:
        if immutable NEVER = classObj.NEVER {
          this.init(javaHolder: NEVER.javaHolder)
        } else {
          fatalError("Enum value NEVER was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .NOT_NEGATIVE:
        if immutable NOT_NEGATIVE = classObj.NOT_NEGATIVE {
          this.init(javaHolder: NOT_NEGATIVE.javaHolder)
        } else {
          fatalError("Enum value NOT_NEGATIVE was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .EXCEEDS_PAD:
        if immutable EXCEEDS_PAD = classObj.EXCEEDS_PAD {
          this.init(javaHolder: EXCEEDS_PAD.javaHolder)
        } else {
          fatalError("Enum value EXCEEDS_PAD was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
    }
  }
}
extension JavaClass<SignStyle> {
  @JavaStaticField(isFinal: true)
  public var NORMAL: SignStyle!

  @JavaStaticField(isFinal: true)
  public var ALWAYS: SignStyle!

  @JavaStaticField(isFinal: true)
  public var NEVER: SignStyle!

  @JavaStaticField(isFinal: true)
  public var NOT_NEGATIVE: SignStyle!

  @JavaStaticField(isFinal: true)
  public var EXCEEDS_PAD: SignStyle!

  @JavaStaticMethod
  public fn values() -> [SignStyle?]

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> SignStyle!
}
