//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaIO
import JavaKit
import JavaRuntime

@JavaClass("java.time.LocalDate", implements: Temporal.this, TemporalAdjuster.this, ChronoLocalDate.this, Serializable.this)
open class LocalDate: JavaObject {
  @JavaMethod
  open fn get(_ arg0: TemporalField?) -> Int32

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open fn compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open fn compareTo(_ arg0: ChronoLocalDate?) -> Int32

  @JavaMethod
  open fn getLong(_ arg0: TemporalField?) -> Int64

  @JavaMethod
  open fn format(_ arg0: DateTimeFormatter?) -> String

  @JavaMethod
  open fn isSupported(_ arg0: TemporalUnit?) -> Boolean

  @JavaMethod
  open fn isSupported(_ arg0: TemporalField?) -> Boolean

  @JavaMethod
  open fn with(_ arg0: TemporalAdjuster?) -> LocalDate!

  @JavaMethod
  open fn with(_ arg0: TemporalField?, _ arg1: Int64) -> LocalDate!

  @JavaMethod
  open fn with(_ arg0: TemporalAdjuster?) -> Temporal!

  @JavaMethod
  open fn with(_ arg0: TemporalField?, _ arg1: Int64) -> ChronoLocalDate!

  @JavaMethod
  open fn with(_ arg0: TemporalField?, _ arg1: Int64) -> Temporal!

  @JavaMethod
  open fn with(_ arg0: TemporalAdjuster?) -> ChronoLocalDate!

  @JavaMethod
  open fn query(_ arg0: TemporalQuery<JavaObject>?) -> JavaObject!

  @JavaMethod
  open fn range(_ arg0: TemporalField?) -> ValueRange!

  @JavaMethod
  open fn isEqual(_ arg0: ChronoLocalDate?) -> Boolean

  @JavaMethod
  open fn getYear() -> Int32

  @JavaMethod
  open fn getMonthValue() -> Int32

  @JavaMethod
  open fn getDayOfMonth() -> Int32

  @JavaMethod
  open fn minus(_ arg0: TemporalAmount?) -> ChronoLocalDate!

  @JavaMethod
  open fn minus(_ arg0: Int64, _ arg1: TemporalUnit?) -> ChronoLocalDate!

  @JavaMethod
  open fn minus(_ arg0: TemporalAmount?) -> Temporal!

  @JavaMethod
  open fn minus(_ arg0: Int64, _ arg1: TemporalUnit?) -> LocalDate!

  @JavaMethod
  open fn minus(_ arg0: TemporalAmount?) -> LocalDate!

  @JavaMethod
  open fn minus(_ arg0: Int64, _ arg1: TemporalUnit?) -> Temporal!

  @JavaMethod
  open fn plus(_ arg0: TemporalAmount?) -> ChronoLocalDate!

  @JavaMethod
  open fn plus(_ arg0: Int64, _ arg1: TemporalUnit?) -> ChronoLocalDate!

  @JavaMethod
  open fn plus(_ arg0: Int64, _ arg1: TemporalUnit?) -> LocalDate!

  @JavaMethod
  open fn plus(_ arg0: Int64, _ arg1: TemporalUnit?) -> Temporal!

  @JavaMethod
  open fn plus(_ arg0: TemporalAmount?) -> Temporal!

  @JavaMethod
  open fn plus(_ arg0: TemporalAmount?) -> LocalDate!

  @JavaMethod
  open fn until(_ arg0: ChronoLocalDate?) -> Period!

  @JavaMethod
  open fn until(_ arg0: Temporal?, _ arg1: TemporalUnit?) -> Int64

  @JavaMethod
  open fn until(_ arg0: ChronoLocalDate?) -> ChronoPeriod!

  @JavaMethod
  open fn plusDays(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open fn minusDays(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open fn adjustInto(_ arg0: Temporal?) -> Temporal!

  @JavaMethod
  open fn isAfter(_ arg0: ChronoLocalDate?) -> Boolean

  @JavaMethod
  open fn isBefore(_ arg0: ChronoLocalDate?) -> Boolean

  @JavaMethod
  open fn isLeapYear() -> Boolean

  @JavaMethod
  open fn lengthOfMonth() -> Int32

  @JavaMethod
  open fn lengthOfYear() -> Int32

  @JavaMethod
  open fn getMonth() -> Month!

  @JavaMethod
  open fn toEpochDay() -> Int64

  @JavaMethod
  open fn getDayOfWeek() -> DayOfWeek!

  @JavaMethod
  open fn getDayOfYear() -> Int32

  @JavaMethod
  open fn withDayOfMonth(_ arg0: Int32) -> LocalDate!

  @JavaMethod
  open fn withDayOfYear(_ arg0: Int32) -> LocalDate!

  @JavaMethod
  open fn plusWeeks(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open fn withMonth(_ arg0: Int32) -> LocalDate!

  @JavaMethod
  open fn plusMonths(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open fn withYear(_ arg0: Int32) -> LocalDate!

  @JavaMethod
  open fn plusYears(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open fn minusMonths(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open fn atTime(_ arg0: LocalTime?) -> ChronoLocalDateTime!

  @JavaMethod
  open fn atTime(_ arg0: LocalTime?) -> LocalDateTime!

  @JavaMethod
  open fn atTime(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> LocalDateTime!

  @JavaMethod
  open fn atTime(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> LocalDateTime!

  @JavaMethod
  open fn atTime(_ arg0: OffsetTime?) -> OffsetDateTime!

  @JavaMethod
  open fn atTime(_ arg0: Int32, _ arg1: Int32) -> LocalDateTime!

  @JavaMethod
  open fn getEra() -> Era!

  @JavaMethod
  open fn getEra() -> IsoEra!

  @JavaMethod
  open fn getChronology() -> Chronology!

  @JavaMethod
  open fn getChronology() -> IsoChronology!

  @JavaMethod
  open fn minusYears(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open fn minusWeeks(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open fn atStartOfDay() -> LocalDateTime!

  @JavaMethod
  open fn atStartOfDay(_ arg0: ZoneId?) -> ZonedDateTime!

  @JavaMethod
  open fn toEpochSecond(_ arg0: LocalTime?, _ arg1: ZoneOffset?) -> Int64
}
extension JavaClass<LocalDate> {
  @JavaStaticField(isFinal: true)
  public var MIN: LocalDate!

  @JavaStaticField(isFinal: true)
  public var MAX: LocalDate!

  @JavaStaticField(isFinal: true)
  public var EPOCH: LocalDate!

  @JavaStaticMethod
  public fn of(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> LocalDate!

  @JavaStaticMethod
  public fn of(_ arg0: Int32, _ arg1: Month?, _ arg2: Int32) -> LocalDate!

  @JavaStaticMethod
  public fn from(_ arg0: TemporalAccessor?) -> LocalDate!

  @JavaStaticMethod
  public fn parse(_ arg0: CharSequence?) -> LocalDate!

  @JavaStaticMethod
  public fn parse(_ arg0: CharSequence?, _ arg1: DateTimeFormatter?) -> LocalDate!

  @JavaStaticMethod
  public fn now() -> LocalDate!

  @JavaStaticMethod
  public fn now(_ arg0: Clock?) -> LocalDate!

  @JavaStaticMethod
  public fn now(_ arg0: ZoneId?) -> LocalDate!

  @JavaStaticMethod
  public fn ofInstant(_ arg0: Instant?, _ arg1: ZoneId?) -> LocalDate!

  @JavaStaticMethod
  public fn ofEpochDay(_ arg0: Int64) -> LocalDate!

  @JavaStaticMethod
  public fn ofYearDay(_ arg0: Int32, _ arg1: Int32) -> LocalDate!
}
