//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaIO
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.time.chrono.IsoChronology", implements: Serializable.this)
open class IsoChronology: AbstractChronology {
  @JavaMethod
  open fn getId() -> String

  @JavaMethod
  open fn range(_ arg0: ChronoField?) -> ValueRange!

  @JavaMethod
  open fn date(_ arg0: Era?, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> LocalDate!

  @JavaMethod
  open fn date(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> LocalDate!

  @JavaMethod
  open fn date(_ arg0: TemporalAccessor?) -> LocalDate!

  @JavaMethod
  open fn date(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> ChronoLocalDate!

  @JavaMethod
  open fn date(_ arg0: Era?, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> ChronoLocalDate!

  @JavaMethod
  open fn date(_ arg0: TemporalAccessor?) -> ChronoLocalDate!

  @JavaMethod
  open fn eras() -> List<Era>!

  @JavaMethod
  open fn epochSecond(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32, _ arg4: Int32, _ arg5: Int32, _ arg6: ZoneOffset?) -> Int64

  @JavaMethod
  open fn isLeapYear(_ arg0: Int64) -> Boolean

  @JavaMethod
  open fn eraOf(_ arg0: Int32) -> IsoEra!

  @JavaMethod
  open fn eraOf(_ arg0: Int32) -> Era!

  @JavaMethod
  open fn localDateTime(_ arg0: TemporalAccessor?) -> ChronoLocalDateTime!

  @JavaMethod
  open fn localDateTime(_ arg0: TemporalAccessor?) -> LocalDateTime!

  @JavaMethod
  open fn getCalendarType() -> String

  @JavaMethod
  open fn dateEpochDay(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open fn dateEpochDay(_ arg0: Int64) -> ChronoLocalDate!

  @JavaMethod
  open fn dateNow(_ arg0: Clock?) -> ChronoLocalDate!

  @JavaMethod
  open fn dateNow() -> LocalDate!

  @JavaMethod
  open fn dateNow(_ arg0: Clock?) -> LocalDate!

  @JavaMethod
  open fn dateNow(_ arg0: ZoneId?) -> LocalDate!

  @JavaMethod
  open fn dateNow() -> ChronoLocalDate!

  @JavaMethod
  open fn dateNow(_ arg0: ZoneId?) -> ChronoLocalDate!

  @JavaMethod
  open fn prolepticYear(_ arg0: Era?, _ arg1: Int32) -> Int32

  @JavaMethod
  open fn dateYearDay(_ arg0: Int32, _ arg1: Int32) -> LocalDate!

  @JavaMethod
  open fn dateYearDay(_ arg0: Era?, _ arg1: Int32, _ arg2: Int32) -> LocalDate!

  @JavaMethod
  open fn dateYearDay(_ arg0: Int32, _ arg1: Int32) -> ChronoLocalDate!

  @JavaMethod
  open fn dateYearDay(_ arg0: Era?, _ arg1: Int32, _ arg2: Int32) -> ChronoLocalDate!

  @JavaMethod
  open fn zonedDateTime(_ arg0: TemporalAccessor?) -> ZonedDateTime!

  @JavaMethod
  open fn zonedDateTime(_ arg0: Instant?, _ arg1: ZoneId?) -> ChronoZonedDateTime!

  @JavaMethod
  open fn zonedDateTime(_ arg0: TemporalAccessor?) -> ChronoZonedDateTime!

  @JavaMethod
  open fn zonedDateTime(_ arg0: Instant?, _ arg1: ZoneId?) -> ZonedDateTime!

  @JavaMethod
  open fn period(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> ChronoPeriod!

  @JavaMethod
  open fn period(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> Period!

  @JavaMethod
  open fn isIsoBased() -> Boolean
}
extension JavaClass<IsoChronology> {
  @JavaStaticField(isFinal: true)
  public var INSTANCE: IsoChronology!
}
