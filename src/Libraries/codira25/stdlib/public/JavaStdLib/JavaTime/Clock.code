//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaRuntime

@JavaClass("java.time.Clock")
open class Clock: JavaObject {
  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open fn millis() -> Int64

  @JavaMethod
  open fn instant() -> Instant!

  @JavaMethod
  open fn getZone() -> ZoneId!

  @JavaMethod
  open fn withZone(_ arg0: ZoneId?) -> Clock!
}
extension JavaClass<Clock> {
  @JavaStaticMethod
  public fn offset(_ arg0: Clock?, _ arg1: Duration?) -> Clock!

  @JavaStaticMethod
  public fn system(_ arg0: ZoneId?) -> Clock!

  @JavaStaticMethod
  public fn fixed(_ arg0: Instant?, _ arg1: ZoneId?) -> Clock!

  @JavaStaticMethod
  public fn systemUTC() -> Clock!

  @JavaStaticMethod
  public fn systemDefaultZone() -> Clock!

  @JavaStaticMethod
  public fn tickMillis(_ arg0: ZoneId?) -> Clock!

  @JavaStaticMethod
  public fn tickSeconds(_ arg0: ZoneId?) -> Clock!

  @JavaStaticMethod
  public fn tickMinutes(_ arg0: ZoneId?) -> Clock!

  @JavaStaticMethod
  public fn tick(_ arg0: Clock?, _ arg1: Duration?) -> Clock!
}
