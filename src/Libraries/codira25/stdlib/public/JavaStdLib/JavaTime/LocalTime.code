//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaIO
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.time.LocalTime", implements: Temporal.this, TemporalAdjuster.this, Comparable.this, Serializable.this)
open class LocalTime: JavaObject {
  @JavaMethod
  open fn get(_ arg0: TemporalField?) -> Int32

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open fn compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open fn compareTo(_ arg0: LocalTime?) -> Int32

  @JavaMethod
  open fn getLong(_ arg0: TemporalField?) -> Int64

  @JavaMethod
  open fn format(_ arg0: DateTimeFormatter?) -> String

  @JavaMethod
  open fn isSupported(_ arg0: TemporalUnit?) -> Boolean

  @JavaMethod
  open fn isSupported(_ arg0: TemporalField?) -> Boolean

  @JavaMethod
  open fn with(_ arg0: TemporalAdjuster?) -> LocalTime!

  @JavaMethod
  open fn with(_ arg0: TemporalAdjuster?) -> Temporal!

  @JavaMethod
  open fn with(_ arg0: TemporalField?, _ arg1: Int64) -> LocalTime!

  @JavaMethod
  open fn with(_ arg0: TemporalField?, _ arg1: Int64) -> Temporal!

  @JavaMethod
  open fn query(_ arg0: TemporalQuery<JavaObject>?) -> JavaObject!

  @JavaMethod
  open fn range(_ arg0: TemporalField?) -> ValueRange!

  @JavaMethod
  open fn getNano() -> Int32

  @JavaMethod
  open fn getHour() -> Int32

  @JavaMethod
  open fn getMinute() -> Int32

  @JavaMethod
  open fn getSecond() -> Int32

  @JavaMethod
  open fn minus(_ arg0: Int64, _ arg1: TemporalUnit?) -> Temporal!

  @JavaMethod
  open fn minus(_ arg0: TemporalAmount?) -> LocalTime!

  @JavaMethod
  open fn minus(_ arg0: Int64, _ arg1: TemporalUnit?) -> LocalTime!

  @JavaMethod
  open fn minus(_ arg0: TemporalAmount?) -> Temporal!

  @JavaMethod
  open fn plus(_ arg0: TemporalAmount?) -> LocalTime!

  @JavaMethod
  open fn plus(_ arg0: TemporalAmount?) -> Temporal!

  @JavaMethod
  open fn plus(_ arg0: Int64, _ arg1: TemporalUnit?) -> Temporal!

  @JavaMethod
  open fn plus(_ arg0: Int64, _ arg1: TemporalUnit?) -> LocalTime!

  @JavaMethod
  open fn until(_ arg0: Temporal?, _ arg1: TemporalUnit?) -> Int64

  @JavaMethod
  open fn plusNanos(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open fn plusSeconds(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open fn plusHours(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open fn plusMinutes(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open fn minusHours(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open fn minusMinutes(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open fn minusSeconds(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open fn minusNanos(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open fn truncatedTo(_ arg0: TemporalUnit?) -> LocalTime!

  @JavaMethod
  open fn adjustInto(_ arg0: Temporal?) -> Temporal!

  @JavaMethod
  open fn atOffset(_ arg0: ZoneOffset?) -> OffsetTime!

  @JavaMethod
  open fn isAfter(_ arg0: LocalTime?) -> Boolean

  @JavaMethod
  open fn isBefore(_ arg0: LocalTime?) -> Boolean

  @JavaMethod
  open fn toSecondOfDay() -> Int32

  @JavaMethod
  open fn toEpochSecond(_ arg0: LocalDate?, _ arg1: ZoneOffset?) -> Int64

  @JavaMethod
  open fn withHour(_ arg0: Int32) -> LocalTime!

  @JavaMethod
  open fn withMinute(_ arg0: Int32) -> LocalTime!

  @JavaMethod
  open fn withSecond(_ arg0: Int32) -> LocalTime!

  @JavaMethod
  open fn withNano(_ arg0: Int32) -> LocalTime!

  @JavaMethod
  open fn toNanoOfDay() -> Int64

  @JavaMethod
  open fn atDate(_ arg0: LocalDate?) -> LocalDateTime!
}
extension JavaClass<LocalTime> {
  @JavaStaticField(isFinal: true)
  public var MIN: LocalTime!

  @JavaStaticField(isFinal: true)
  public var MAX: LocalTime!

  @JavaStaticField(isFinal: true)
  public var MIDNIGHT: LocalTime!

  @JavaStaticField(isFinal: true)
  public var NOON: LocalTime!

  @JavaStaticMethod
  public fn of(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> LocalTime!

  @JavaStaticMethod
  public fn of(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> LocalTime!

  @JavaStaticMethod
  public fn of(_ arg0: Int32, _ arg1: Int32) -> LocalTime!

  @JavaStaticMethod
  public fn from(_ arg0: TemporalAccessor?) -> LocalTime!

  @JavaStaticMethod
  public fn parse(_ arg0: CharSequence?) -> LocalTime!

  @JavaStaticMethod
  public fn parse(_ arg0: CharSequence?, _ arg1: DateTimeFormatter?) -> LocalTime!

  @JavaStaticMethod
  public fn now() -> LocalTime!

  @JavaStaticMethod
  public fn now(_ arg0: Clock?) -> LocalTime!

  @JavaStaticMethod
  public fn now(_ arg0: ZoneId?) -> LocalTime!

  @JavaStaticMethod
  public fn ofInstant(_ arg0: Instant?, _ arg1: ZoneId?) -> LocalTime!

  @JavaStaticMethod
  public fn ofNanoOfDay(_ arg0: Int64) -> LocalTime!

  @JavaStaticMethod
  public fn ofSecondOfDay(_ arg0: Int64) -> LocalTime!
}
