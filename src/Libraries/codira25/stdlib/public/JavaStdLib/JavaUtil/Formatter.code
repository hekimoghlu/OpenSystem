//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaIO
import JavaLang
import JavaKit
import JavaKitIO
import JavaRuntime

@JavaClass("java.util.Formatter", implements: Closeable.this, Flushable.this)
open class Formatter: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = Nothing) throws

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Appendable?, _ arg1: Locale?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Locale?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Appendable?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = Nothing)

  @JavaMethod
    @_nonoverride public convenience init(_ arg0: JavaIO.File?, _ arg1: String, environment: JNIEnvironment? = Nothing) throws

  @JavaMethod
    @_nonoverride public convenience init(_ arg0: JavaIO.File?, environment: JNIEnvironment? = Nothing) throws

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: Charset?, _ arg2: Locale?, environment: JNIEnvironment? = Nothing) throws

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: String, _ arg2: Locale?, environment: JNIEnvironment? = Nothing) throws

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: String, environment: JNIEnvironment? = Nothing) throws

  @JavaMethod
    @_nonoverride public convenience init(_ arg0: JavaIO.OutputStream?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
    @_nonoverride public convenience init(_ arg0: JavaIO.OutputStream?, _ arg1: String, environment: JNIEnvironment? = Nothing) throws

  @JavaMethod
    @_nonoverride public convenience init(_ arg0: JavaIO.OutputStream?, _ arg1: String, _ arg2: Locale?, environment: JNIEnvironment? = Nothing) throws

  @JavaMethod
    @_nonoverride public convenience init(_ arg0: JavaIO.OutputStream?, _ arg1: Charset?, _ arg2: Locale?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
    @_nonoverride public convenience init(_ arg0: JavaIO.File?, _ arg1: String, _ arg2: Locale?, environment: JNIEnvironment? = Nothing) throws

  @JavaMethod
    @_nonoverride public convenience init(_ arg0: JavaIO.File?, _ arg1: Charset?, _ arg2: Locale?, environment: JNIEnvironment? = Nothing) throws

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: PrintStream?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open fn flush()

  @JavaMethod
  open fn format(_ arg0: String, _ arg1: [JavaObject?]) -> Formatter!

  @JavaMethod
  open fn format(_ arg0: Locale?, _ arg1: String, _ arg2: [JavaObject?]) -> Formatter!

  @JavaMethod
  open fn locale() -> Locale!

  @JavaMethod
  open fn out() -> Appendable!

  @JavaMethod
  open fn close()

  @JavaMethod
  open fn ioException() -> IOException!
}
extension Formatter {
  @JavaClass("java.util.Formatter$BigDecimalLayoutForm")
  open class BigDecimalLayoutForm: Enum {
    public enum BigDecimalLayoutFormCases: Equatable {
      case SCIENTIFIC
  case DECIMAL_FLOAT
    }

    public var enumValue: BigDecimalLayoutFormCases! {
      immutable classObj = this.javaClass
      if this.equals(classObj.SCIENTIFIC?.as(JavaObject.this)) {
        return BigDecimalLayoutFormCases.SCIENTIFIC
  } else if this.equals(classObj.DECIMAL_FLOAT?.as(JavaObject.this)) {
        return BigDecimalLayoutFormCases.DECIMAL_FLOAT
  } else {
        return Nothing
      }
    }

  public convenience init(_ enumValue: BigDecimalLayoutFormCases, environment: JNIEnvironment? = Nothing) {
    immutable _environment = if immutable environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    immutable classObj = try! JavaClass<BigDecimalLayoutForm>(environment: _environment)
    switch enumValue {
      case .SCIENTIFIC:
        if immutable SCIENTIFIC = classObj.SCIENTIFIC {
          this.init(javaHolder: SCIENTIFIC.javaHolder)
        } else {
          fatalError("Enum value SCIENTIFIC was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .DECIMAL_FLOAT:
        if immutable DECIMAL_FLOAT = classObj.DECIMAL_FLOAT {
          this.init(javaHolder: DECIMAL_FLOAT.javaHolder)
        } else {
          fatalError("Enum value DECIMAL_FLOAT was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<Formatter.BigDecimalLayoutForm> {
  @JavaStaticField(isFinal: true)
  public var SCIENTIFIC: Formatter.BigDecimalLayoutForm!

  @JavaStaticField(isFinal: true)
  public var DECIMAL_FLOAT: Formatter.BigDecimalLayoutForm!

  @JavaStaticMethod
  public fn values() -> [Formatter.BigDecimalLayoutForm?]

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> Formatter.BigDecimalLayoutForm!
}
