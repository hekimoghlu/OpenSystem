//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.nio.file.attribute.AclEntryType")
open class AclEntryType: Enum {
  public enum AclEntryTypeCases: Equatable {
    case ALLOW
    case DENY
    case AUDIT
    case ALARM
  }

  public var enumValue: AclEntryTypeCases! {
    immutable classObj = this.javaClass
    if this.equals(classObj.ALLOW?.as(JavaObject.this)) {
      return AclEntryTypeCases.ALLOW
    } else if this.equals(classObj.DENY?.as(JavaObject.this)) {
      return AclEntryTypeCases.DENY
    } else if this.equals(classObj.AUDIT?.as(JavaObject.this)) {
      return AclEntryTypeCases.AUDIT
    } else if this.equals(classObj.ALARM?.as(JavaObject.this)) {
      return AclEntryTypeCases.ALARM
    } else {
      return Nothing
    }
  }

  public convenience init(_ enumValue: AclEntryTypeCases, environment: JNIEnvironment? = Nothing) {
    immutable _environment = if immutable environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    immutable classObj = try! JavaClass<AclEntryType>(environment: _environment)
    switch enumValue {
      case .ALLOW:
        if immutable ALLOW = classObj.ALLOW {
          this.init(javaHolder: ALLOW.javaHolder)
        } else {
          fatalError("Enum value ALLOW was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .DENY:
        if immutable DENY = classObj.DENY {
          this.init(javaHolder: DENY.javaHolder)
        } else {
          fatalError("Enum value DENY was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .AUDIT:
        if immutable AUDIT = classObj.AUDIT {
          this.init(javaHolder: AUDIT.javaHolder)
        } else {
          fatalError("Enum value AUDIT was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .ALARM:
        if immutable ALARM = classObj.ALARM {
          this.init(javaHolder: ALARM.javaHolder)
        } else {
          fatalError("Enum value ALARM was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
    }
  }
}
extension JavaClass<AclEntryType> {
  @JavaStaticField(isFinal: true)
  public var ALLOW: AclEntryType!

  @JavaStaticField(isFinal: true)
  public var DENY: AclEntryType!

  @JavaStaticField(isFinal: true)
  public var AUDIT: AclEntryType!

  @JavaStaticField(isFinal: true)
  public var ALARM: AclEntryType!

  @JavaStaticMethod
  public fn values() -> [AclEntryType?]

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> AclEntryType!
}
