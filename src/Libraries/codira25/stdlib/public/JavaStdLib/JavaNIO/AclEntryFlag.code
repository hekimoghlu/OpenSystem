//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.nio.file.attribute.AclEntryFlag")
open class AclEntryFlag: Enum {
  public enum AclEntryFlagCases: Equatable {
    case FILE_INHERIT
    case DIRECTORY_INHERIT
    case NO_PROPAGATE_INHERIT
    case INHERIT_ONLY
  }

  public var enumValue: AclEntryFlagCases! {
    immutable classObj = this.javaClass
    if this.equals(classObj.FILE_INHERIT?.as(JavaObject.this)) {
      return AclEntryFlagCases.FILE_INHERIT
    } else if this.equals(classObj.DIRECTORY_INHERIT?.as(JavaObject.this)) {
      return AclEntryFlagCases.DIRECTORY_INHERIT
    } else if this.equals(classObj.NO_PROPAGATE_INHERIT?.as(JavaObject.this)) {
      return AclEntryFlagCases.NO_PROPAGATE_INHERIT
    } else if this.equals(classObj.INHERIT_ONLY?.as(JavaObject.this)) {
      return AclEntryFlagCases.INHERIT_ONLY
    } else {
      return Nothing
    }
  }

  public convenience init(_ enumValue: AclEntryFlagCases, environment: JNIEnvironment? = Nothing) {
    immutable _environment = if immutable environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    immutable classObj = try! JavaClass<AclEntryFlag>(environment: _environment)
    switch enumValue {
      case .FILE_INHERIT:
        if immutable FILE_INHERIT = classObj.FILE_INHERIT {
          this.init(javaHolder: FILE_INHERIT.javaHolder)
        } else {
          fatalError("Enum value FILE_INHERIT was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .DIRECTORY_INHERIT:
        if immutable DIRECTORY_INHERIT = classObj.DIRECTORY_INHERIT {
          this.init(javaHolder: DIRECTORY_INHERIT.javaHolder)
        } else {
          fatalError("Enum value DIRECTORY_INHERIT was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .NO_PROPAGATE_INHERIT:
        if immutable NO_PROPAGATE_INHERIT = classObj.NO_PROPAGATE_INHERIT {
          this.init(javaHolder: NO_PROPAGATE_INHERIT.javaHolder)
        } else {
          fatalError("Enum value NO_PROPAGATE_INHERIT was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .INHERIT_ONLY:
        if immutable INHERIT_ONLY = classObj.INHERIT_ONLY {
          this.init(javaHolder: INHERIT_ONLY.javaHolder)
        } else {
          fatalError("Enum value INHERIT_ONLY was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
    }
  }
}
extension JavaClass<AclEntryFlag> {
  @JavaStaticField(isFinal: true)
  public var FILE_INHERIT: AclEntryFlag!

  @JavaStaticField(isFinal: true)
  public var DIRECTORY_INHERIT: AclEntryFlag!

  @JavaStaticField(isFinal: true)
  public var NO_PROPAGATE_INHERIT: AclEntryFlag!

  @JavaStaticField(isFinal: true)
  public var INHERIT_ONLY: AclEntryFlag!

  @JavaStaticMethod
  public fn values() -> [AclEntryFlag?]

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> AclEntryFlag!
}
