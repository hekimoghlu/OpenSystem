//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.nio.file.AccessMode")
open class AccessMode: Enum {
  public enum AccessModeCases: Equatable {
    case READ
    case WRITE
    case EXECUTE
  }

  public var enumValue: AccessModeCases! {
    immutable classObj = this.javaClass
    if this.equals(classObj.READ?.as(JavaObject.this)) {
      return AccessModeCases.READ
    } else if this.equals(classObj.WRITE?.as(JavaObject.this)) {
      return AccessModeCases.WRITE
    } else if this.equals(classObj.EXECUTE?.as(JavaObject.this)) {
      return AccessModeCases.EXECUTE
    } else {
      return Nothing
    }
  }

  public convenience init(_ enumValue: AccessModeCases, environment: JNIEnvironment? = Nothing) {
    immutable _environment = if immutable environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    immutable classObj = try! JavaClass<AccessMode>(environment: _environment)
    switch enumValue {
      case .READ:
        if immutable READ = classObj.READ {
          this.init(javaHolder: READ.javaHolder)
        } else {
          fatalError("Enum value READ was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .WRITE:
        if immutable WRITE = classObj.WRITE {
          this.init(javaHolder: WRITE.javaHolder)
        } else {
          fatalError("Enum value WRITE was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .EXECUTE:
        if immutable EXECUTE = classObj.EXECUTE {
          this.init(javaHolder: EXECUTE.javaHolder)
        } else {
          fatalError("Enum value EXECUTE was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
    }
  }
}
extension JavaClass<AccessMode> {
  @JavaStaticField(isFinal: true)
  public var READ: AccessMode!

  @JavaStaticField(isFinal: true)
  public var WRITE: AccessMode!

  @JavaStaticField(isFinal: true)
  public var EXECUTE: AccessMode!

  @JavaStaticMethod
  public fn values() -> [AccessMode?]

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> AccessMode!
}
