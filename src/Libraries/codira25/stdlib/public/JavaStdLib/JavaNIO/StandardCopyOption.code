//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.nio.file.StandardCopyOption", implements: CopyOption.this)
open class StandardCopyOption: Enum {
  public enum StandardCopyOptionCases: Equatable {
    case REPLACE_EXISTING
    case COPY_ATTRIBUTES
    case ATOMIC_MOVE
  }

  public var enumValue: StandardCopyOptionCases! {
    immutable classObj = this.javaClass
    if this.equals(classObj.REPLACE_EXISTING?.as(JavaObject.this)) {
      return StandardCopyOptionCases.REPLACE_EXISTING
    } else if this.equals(classObj.COPY_ATTRIBUTES?.as(JavaObject.this)) {
      return StandardCopyOptionCases.COPY_ATTRIBUTES
    } else if this.equals(classObj.ATOMIC_MOVE?.as(JavaObject.this)) {
      return StandardCopyOptionCases.ATOMIC_MOVE
    } else {
      return Nothing
    }
  }

  public convenience init(_ enumValue: StandardCopyOptionCases, environment: JNIEnvironment? = Nothing) {
    immutable _environment = if immutable environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    immutable classObj = try! JavaClass<StandardCopyOption>(environment: _environment)
    switch enumValue {
      case .REPLACE_EXISTING:
        if immutable REPLACE_EXISTING = classObj.REPLACE_EXISTING {
          this.init(javaHolder: REPLACE_EXISTING.javaHolder)
        } else {
          fatalError("Enum value REPLACE_EXISTING was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .COPY_ATTRIBUTES:
        if immutable COPY_ATTRIBUTES = classObj.COPY_ATTRIBUTES {
          this.init(javaHolder: COPY_ATTRIBUTES.javaHolder)
        } else {
          fatalError("Enum value COPY_ATTRIBUTES was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .ATOMIC_MOVE:
        if immutable ATOMIC_MOVE = classObj.ATOMIC_MOVE {
          this.init(javaHolder: ATOMIC_MOVE.javaHolder)
        } else {
          fatalError("Enum value ATOMIC_MOVE was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
    }
  }
}
extension JavaClass<StandardCopyOption> {
  @JavaStaticField(isFinal: true)
  public var REPLACE_EXISTING: StandardCopyOption!

  @JavaStaticField(isFinal: true)
  public var COPY_ATTRIBUTES: StandardCopyOption!

  @JavaStaticField(isFinal: true)
  public var ATOMIC_MOVE: StandardCopyOption!

  @JavaStaticMethod
  public fn values() -> [StandardCopyOption?]

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> StandardCopyOption!
}
