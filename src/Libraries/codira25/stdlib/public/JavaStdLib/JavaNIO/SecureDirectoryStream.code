//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaKitCollection
import JavaKitFunction
import JavaRuntime

@JavaInterface("java.nio.file.SecureDirectoryStream", extends: DirectoryStream<JavaObject>.this)
public struct SecureDirectoryStream<T: AnyJavaObject> {
  @JavaMethod
  public fn deleteFile(_ arg0: JavaObject?) throws

  @JavaMethod
  public fn deleteDirectory(_ arg0: JavaObject?) throws

  @JavaMethod
  public fn newByteChannel(_ arg0: JavaObject?, _ arg1: JavaSet<OpenOption>?, _ arg2: [FileAttribute<JavaObject>?]) throws -> SeekableByteChannel!

  @JavaMethod
  public fn newDirectoryStream(_ arg0: JavaObject?, _ arg1: [LinkOption?]) throws -> SecureDirectoryStream<JavaObject>!

  @JavaMethod
  public fn move(_ arg0: JavaObject?, _ arg1: SecureDirectoryStream<JavaObject>?, _ arg2: JavaObject?) throws

  @JavaMethod
  public fn getFileAttributeView(_ arg0: JavaClass<FileAttributeView>?) -> FileAttributeView!

  @JavaMethod
  public fn getFileAttributeView(_ arg0: JavaObject?, _ arg1: JavaClass<FileAttributeView>?, _ arg2: [LinkOption?]) -> FileAttributeView!

  @JavaMethod
  public fn iterator() -> JavaIterator<JavaObject>!

  @JavaMethod
  public fn close() throws

  @JavaMethod
  public fn forEach(_ arg0: JavaConsumer<JavaObject>?)
}
