//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaRuntime

@JavaClass("java.nio.channels.DatagramChannel", implements: ByteChannel.this, ScatteringByteChannel.this, GatheringByteChannel.this, MulticastChannel.this)
open class DatagramChannel: AbstractSelectableChannel {
  @JavaMethod
  open override fn validOps() -> Int32

  @JavaMethod
  open fn isConnected() -> Boolean

  @JavaMethod
  open fn disconnect() throws -> DatagramChannel!

  @JavaMethod
  open fn write(_ arg0: [ByteBuffer?]) throws -> Int64

  @JavaMethod
  open fn write(_ arg0: ByteBuffer?) throws -> Int32

  @JavaMethod
  open fn write(_ arg0: [ByteBuffer?], _ arg1: Int32, _ arg2: Int32) throws -> Int64

  @JavaMethod
  open fn read(_ arg0: [ByteBuffer?], _ arg1: Int32, _ arg2: Int32) throws -> Int64

  @JavaMethod
  open fn read(_ arg0: ByteBuffer?) throws -> Int32

  @JavaMethod
  open fn read(_ arg0: [ByteBuffer?]) throws -> Int64
}
extension JavaClass<DatagramChannel> {
  @JavaStaticMethod
  public fn open() throws -> DatagramChannel!
}
