//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaRuntime

@JavaClass("java.io.ObjectInputStream", implements: ObjectInput.this, ObjectStreamConstants.this)
open class ObjectInputStream: InputStream {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: InputStream?, environment: JNIEnvironment? = Nothing) throws

  @JavaMethod
  open fn readStreamHeader() throws

  @JavaMethod
  open fn readObjectOverride() throws -> JavaObject!

  @JavaMethod
  open fn readUnshared() throws -> JavaObject!

  @JavaMethod
  open fn resolveObject(_ arg0: JavaObject?) throws -> JavaObject!

  @JavaMethod
  open fn resolveProxyClass(_ arg0: [String]) throws -> JavaClass<JavaObject>!

  @JavaMethod
  open fn readClassDescriptor() throws -> ObjectStreamClass!

  @JavaMethod
  open fn registerValidation(_ arg0: ObjectInputValidation?, _ arg1: Int32) throws

  @JavaMethod
  open fn enableResolveObject(_ arg0: Boolean) -> Boolean

  @JavaMethod
  open fn resolveClass(_ arg0: ObjectStreamClass?) throws -> JavaClass<JavaObject>!

  @JavaMethod
  open fn defaultReadObject() throws

  @JavaMethod
  open fn readObject() throws -> JavaObject!

  @JavaMethod
  open fn readFields() throws -> ObjectInputStream.GetField!

  @JavaMethod
  open fn readLine() throws -> String

  @JavaMethod
  open override fn close() throws

  @JavaMethod
  open fn readInt() throws -> Int32

  @JavaMethod
  open override fn read(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) throws -> Int32

  @JavaMethod
  open override fn read() throws -> Int32

  @JavaMethod
  open override fn available() throws -> Int32

  @JavaMethod
  open fn readUTF() throws -> String

  @JavaMethod
  open fn readLong() throws -> Int64

  @JavaMethod
  open fn readByte() throws -> Int8

  @JavaMethod
  open fn readShort() throws -> Int16

  @JavaMethod
  open fn readUnsignedShort() throws -> Int32

  @JavaMethod
  open fn readChar() throws -> UInt16

  @JavaMethod
  open fn readFloat() throws -> Float

  @JavaMethod
  open fn readDouble() throws -> Double

  @JavaMethod
  open fn readFully(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) throws

  @JavaMethod
  open fn readFully(_ arg0: [Int8]) throws

  @JavaMethod
  open fn skipBytes(_ arg0: Int32) throws -> Int32

  @JavaMethod
  open fn readBoolean() throws -> Boolean

  @JavaMethod
  open fn readUnsignedByte() throws -> Int32
}
extension JavaClass<ObjectInputStream> {
  @JavaStaticField(isFinal: true)
  public var STREAM_MAGIC: Int16

  @JavaStaticField(isFinal: true)
  public var STREAM_VERSION: Int16

  @JavaStaticField(isFinal: true)
  public var TC_BASE: Int8

  @JavaStaticField(isFinal: true)
  public var TC_NULL: Int8

  @JavaStaticField(isFinal: true)
  public var TC_REFERENCE: Int8

  @JavaStaticField(isFinal: true)
  public var TC_CLASSDESC: Int8

  @JavaStaticField(isFinal: true)
  public var TC_OBJECT: Int8

  @JavaStaticField(isFinal: true)
  public var TC_STRING: Int8

  @JavaStaticField(isFinal: true)
  public var TC_ARRAY: Int8

  @JavaStaticField(isFinal: true)
  public var TC_CLASS: Int8

  @JavaStaticField(isFinal: true)
  public var TC_BLOCKDATA: Int8

  @JavaStaticField(isFinal: true)
  public var TC_ENDBLOCKDATA: Int8

  @JavaStaticField(isFinal: true)
  public var TC_RESET: Int8

  @JavaStaticField(isFinal: true)
  public var TC_BLOCKDATALONG: Int8

  @JavaStaticField(isFinal: true)
  public var TC_EXCEPTION: Int8

  @JavaStaticField(isFinal: true)
  public var TC_LONGSTRING: Int8

  @JavaStaticField(isFinal: true)
  public var TC_PROXYCLASSDESC: Int8

  @JavaStaticField(isFinal: true)
  public var TC_ENUM: Int8

  @JavaStaticField(isFinal: true)
  public var TC_MAX: Int8

  @JavaStaticField(isFinal: true)
  public var baseWireHandle: Int32

  @JavaStaticField(isFinal: true)
  public var SC_WRITE_METHOD: Int8

  @JavaStaticField(isFinal: true)
  public var SC_BLOCK_DATA: Int8

  @JavaStaticField(isFinal: true)
  public var SC_SERIALIZABLE: Int8

  @JavaStaticField(isFinal: true)
  public var SC_EXTERNALIZABLE: Int8

  @JavaStaticField(isFinal: true)
  public var SC_ENUM: Int8

  @JavaStaticField(isFinal: true)
  public var SUBSTITUTION_PERMISSION: SerializablePermission!

  @JavaStaticField(isFinal: true)
  public var SUBCLASS_IMPLEMENTATION_PERMISSION: SerializablePermission!

  @JavaStaticField(isFinal: true)
  public var SERIAL_FILTER_PERMISSION: SerializablePermission!

  @JavaStaticField(isFinal: true)
  public var PROTOCOL_VERSION_1: Int32

  @JavaStaticField(isFinal: true)
  public var PROTOCOL_VERSION_2: Int32
}
