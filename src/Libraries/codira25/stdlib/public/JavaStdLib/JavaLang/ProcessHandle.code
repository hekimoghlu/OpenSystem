//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaRuntime

@JavaInterface("java.lang.ProcessHandle", extends: Comparable.this)
public struct ProcessHandle {
  @JavaMethod
  public fn destroyForcibly() -> Boolean

  @JavaMethod
  public fn supportsNormalTermination() -> Boolean

  @JavaMethod
  public fn parent() -> JavaOptional<ProcessHandle>!

  public fn parentOptional() -> ProcessHandle? {
    Optional(javaOptional: parent())
  }

  @JavaMethod
  public fn equals(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  public fn hashCode() -> Int32

  @JavaMethod
  public fn compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  public fn compareTo(_ arg0: ProcessHandle?) -> Int32

  @JavaMethod
  public fn info() -> ProcessHandle.Info!

  @JavaMethod
  public fn isAlive() -> Boolean

  @JavaMethod
  public fn destroy() -> Boolean

  @JavaMethod
  public fn pid() -> Int64
}
extension JavaClass<ProcessHandle> {
  @JavaStaticMethod
  public fn of(_ arg0: Int64) -> JavaOptional<ProcessHandle>!

  public fn ofOptional(_ arg0: Int64) -> ProcessHandle? {
    Optional(javaOptional: of(arg0))
  }

  @JavaStaticMethod
  public fn current() -> ProcessHandle!
}
