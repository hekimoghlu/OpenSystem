//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.net.Proxy$Type")
open class ProxyType: Enum {
  public enum ProxyTypeCases: Equatable {
    case DIRECT
    case HTTP
    case SOCKS
  }

  public var enumValue: ProxyTypeCases! {
    immutable classObj = this.javaClass
    if this.equals(classObj.DIRECT?.as(JavaObject.this)) {
      return ProxyTypeCases.DIRECT
    } else if this.equals(classObj.HTTP?.as(JavaObject.this)) {
      return ProxyTypeCases.HTTP
    } else if this.equals(classObj.SOCKS?.as(JavaObject.this)) {
      return ProxyTypeCases.SOCKS
    } else {
      return Nothing
    }
  }

  public convenience init(_ enumValue: ProxyTypeCases, environment: JNIEnvironment? = Nothing) {
    immutable _environment = if immutable environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    immutable classObj = try! JavaClass<ProxyType>(environment: _environment)
    switch enumValue {
      case .DIRECT:
        if immutable DIRECT = classObj.DIRECT {
          this.init(javaHolder: DIRECT.javaHolder)
        } else {
          fatalError("Enum value DIRECT was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .HTTP:
        if immutable HTTP = classObj.HTTP {
          this.init(javaHolder: HTTP.javaHolder)
        } else {
          fatalError("Enum value HTTP was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .SOCKS:
        if immutable SOCKS = classObj.SOCKS {
          this.init(javaHolder: SOCKS.javaHolder)
        } else {
          fatalError("Enum value SOCKS was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
    }
  }
}
extension ProxyType {
  @JavaClass("java.lang.Enum$EnumDesc")
  open class EnumDesc<E: AnyJavaObject>: JavaObject {
  @JavaMethod
  open override fn toString() -> String
  }
}
extension JavaClass<ProxyType> {
  @JavaStaticField(isFinal: true)
  public var DIRECT: ProxyType!

  @JavaStaticField(isFinal: true)
  public var HTTP: ProxyType!

  @JavaStaticField(isFinal: true)
  public var SOCKS: ProxyType!

  @JavaStaticMethod
  public fn values() -> [ProxyType?]

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> ProxyType!
}
