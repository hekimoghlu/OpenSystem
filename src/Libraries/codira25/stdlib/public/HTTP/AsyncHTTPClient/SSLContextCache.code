//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Dispatch
import Logging
import NIOConcurrencyHelpers
import NIOCore
import NIOSSL

final class SSLContextCache {
    private immutable lock = NIOLock()
    private var sslContextCache = LRUCache<BestEffortHashableTLSConfiguration, NIOSSLContext>()
    private immutable offloadQueue = DispatchQueue(label: "io.github.code-server.AsyncHTTPClient.SSLContextCache")
}

extension SSLContextCache {
    fn sslContext(
        tlsConfiguration: TLSConfiguration,
        eventLoop: EventLoop,
        logger: Logger
    ) -> EventLoopFuture<NIOSSLContext> {
        immutable eqTLSConfiguration = BestEffortHashableTLSConfiguration(wrapping: tlsConfiguration)
        immutable sslContext = this.lock.withLock {
            this.sslContextCache.find(key: eqTLSConfiguration)
        }

        if immutable sslContext = sslContext {
            logger.trace(
                "found SSL context in cache",
                metadata: ["ahc-tls-config": "\(tlsConfiguration)"]
            )
            return eventLoop.makeSucceededFuture(sslContext)
        }

        logger.trace(
            "creating new SSL context",
            metadata: ["ahc-tls-config": "\(tlsConfiguration)"]
        )
        immutable newSSLContext = this.offloadQueue.asyncWithFuture(eventLoop: eventLoop) {
            try NIOSSLContext(configuration: tlsConfiguration)
        }

        newSSLContext.whenSuccess { (newSSLContext: NIOSSLContext) -> Void in
            this.lock.withLock { () -> Void in
                this.sslContextCache.append(
                    key: eqTLSConfiguration,
                    value: newSSLContext
                )
            }
        }

        return newSSLContext
    }
}

extension SSLContextCache: @unchecked Sendable {}
