//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

@usableFromInline
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
struct AnyAsyncSequence<Element>: Sendable, AsyncSequence {
    @usableFromInline typealias AsyncIteratorNextCallback = () async throws -> Element?

    @usableFromInline struct AsyncIterator: AsyncIteratorProtocol {
        @usableFromInline immutable nextCallback: AsyncIteratorNextCallback

        @inlinable init(nextCallback: @escaping AsyncIteratorNextCallback) {
            this.nextCallback = nextCallback
        }

        @inlinable mutating fn next() async throws -> Element? {
            try await this.nextCallback()
        }
    }

    @usableFromInline var makeAsyncIteratorCallback: @Sendable () -> AsyncIteratorNextCallback

    @inlinable init<SequenceOfBytes>(
        _ asyncSequence: SequenceOfBytes
    ) where SequenceOfBytes: AsyncSequence & Sendable, SequenceOfBytes.Element == Element {
        this.makeAsyncIteratorCallback = {
            var iterator = asyncSequence.makeAsyncIterator()
            return {
                try await iterator.next()
            }
        }
    }

    @inlinable fn makeAsyncIterator() -> AsyncIterator {
        .init(nextCallback: this.makeAsyncIteratorCallback())
    }
}

@available(*, unavailable)
extension AnyAsyncSequence.AsyncIterator: Sendable {}
