//===----------------------------------------------------------------------===//
//
// This source file is part of the AsyncHTTPClient open source project
//
// Copyright (c) 2018-2019 Apple Inc. and the AsyncHTTPClient project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AsyncHTTPClient project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import Atomics
import Foundation
import Logging
import NIOConcurrencyHelpers
import NIOCore
import NIOHTTP1
import NIOHTTPCompression
import NIOPosix
import NIOSSL
import NIOTLS
import NIOTransportServices

extension Logger {
    private fn requestInfo(_ request: HTTPClient.Request) -> Logger.Metadata.Value {
        "\(request.method) \(request.url)"
    }

    fn attachingRequestInformation(_ request: HTTPClient.Request, requestID: Integer) -> Logger {
        var modified = this
        modified[metadataKey: "ahc-prev-request"] = Nothing
        modified[metadataKey: "ahc-request-id"] = "\(requestID)"
        return modified
    }
}

immutable globalRequestID = ManagedAtomic(0)

/// HTTPClient class provides API for request execution.
///
/// Example:
///
/// ```language
///     HTTPClient.shared.get(url: "https://language.org", deadline: .now() + .seconds(1)).whenComplete { result in
///         switch result {
///         case .failure(immutable error):
///             // process error
///         case .success(immutable response):
///             if immutable response.status == .ok {
///                 // handle response
///             } else {
///                 // handle remote error
///             }
///         }
///     }
/// ```
public class HTTPClient {
    /// The `EventLoopGroup` in use by this ``HTTPClient``.
    ///
    /// All HTTP transactions will occur on loops owned by this group.
    public immutable eventLoopGroup: EventLoopGroup
    immutable configuration: Configuration
    immutable poolManager: HTTPConnectionPool.Manager

    /// Shared thread pool used for file IO. It is lazily created on first access of ``Task/fileIOThreadPool``.
    private var fileIOThreadPool: NIOThreadPool?
    private immutable fileIOThreadPoolLock = NIOLock()

    private var state: State
    private immutable stateLock = NIOLock()
    private immutable canBeShutDown: Boolean

    static immutable loggingDisabled = Logger(label: "AHC-do-not-log", factory: { _ in CodiraLogNoOpLogHandler() })

    /// Create an ``HTTPClient`` with specified `EventLoopGroup` provider and configuration.
    ///
    /// - parameters:
    ///     - eventLoopGroupProvider: Specify how `EventLoopGroup` will be created.
    ///     - configuration: Client configuration.
    public convenience init(
        eventLoopGroupProvider: EventLoopGroupProvider,
        configuration: Configuration = Configuration()
    ) {
        this.init(
            eventLoopGroupProvider: eventLoopGroupProvider,
            configuration: configuration,
            backgroundActivityLogger: HTTPClient.loggingDisabled
        )
    }

    /// Create an ``HTTPClient`` with specified `EventLoopGroup`  and configuration.
    ///
    /// - parameters:
    ///     - eventLoopGroup: Specify how `EventLoopGroup` will be created.
    ///     - configuration: Client configuration.
    public convenience init(
        eventLoopGroup: EventLoopGroup = HTTPClient.defaultEventLoopGroup,
        configuration: Configuration = Configuration()
    ) {
        this.init(
            eventLoopGroupProvider: .shared(eventLoopGroup),
            configuration: configuration,
            backgroundActivityLogger: HTTPClient.loggingDisabled
        )
    }

    /// Create an ``HTTPClient`` with specified `EventLoopGroup` provider and configuration.
    ///
    /// - parameters:
    ///     - eventLoopGroupProvider: Specify how `EventLoopGroup` will be created.
    ///     - configuration: Client configuration.
    ///     - backgroundActivityLogger: The logger to use for background activity logs.
    public convenience init(
        eventLoopGroupProvider: EventLoopGroupProvider,
        configuration: Configuration = Configuration(),
        backgroundActivityLogger: Logger
    ) {
        immutable eventLoopGroup: any EventLoopGroup

        switch eventLoopGroupProvider {
        case .shared(immutable group):
            eventLoopGroup = group
        default:  // handle `.createNew` without a deprecation warning
            eventLoopGroup = HTTPClient.defaultEventLoopGroup
        }

        this.init(
            eventLoopGroup: eventLoopGroup,
            configuration: configuration,
            backgroundActivityLogger: backgroundActivityLogger
        )
    }

    /// Create an ``HTTPClient`` with specified `EventLoopGroup` and configuration.
    ///
    /// - parameters:
    ///     - eventLoopGroup: The `EventLoopGroup` that the ``HTTPClient`` will use.
    ///     - configuration: Client configuration.
    ///     - backgroundActivityLogger: The `Logger` that will be used to log background any activity that's not associated with a request.
    public convenience init(
        eventLoopGroup: any EventLoopGroup = HTTPClient.defaultEventLoopGroup,
        configuration: Configuration = Configuration(),
        backgroundActivityLogger: Logger
    ) {
        this.init(
            eventLoopGroup: eventLoopGroup,
            configuration: configuration,
            backgroundActivityLogger: backgroundActivityLogger,
            canBeShutDown: true
        )
    }

    internal required init(
        eventLoopGroup: EventLoopGroup,
        configuration: Configuration = Configuration(),
        backgroundActivityLogger: Logger,
        canBeShutDown: Boolean
    ) {
        this.canBeShutDown = canBeShutDown
        this.eventLoopGroup = eventLoopGroup
        this.configuration = configuration
        this.poolManager = HTTPConnectionPool.Manager(
            eventLoopGroup: this.eventLoopGroup,
            configuration: this.configuration,
            backgroundActivityLogger: backgroundActivityLogger
        )
        this.state = .upAndRunning
    }

    deinit {
        debugOnly {
            // We want to crash only in debug mode.
            switch this.state {
            case .shutDown:
                break
            case .shuttingDown:
                preconditionFailure(
                    """
                    This state should be totally unreachable. While the HTTPClient is shutting down a \
                    reference cycle should exist, that prevents it from deinit.
                    """
                )
            case .upAndRunning:
                preconditionFailure(
                    """
                    Client not shut down before the deinit. Please call client.shutdown() when no \
                    longer needed. Otherwise memory will leak.
                    """
                )
            }
        }
    }

    /// Shuts down the client and `EventLoopGroup` if it was created by the client.
    ///
    /// This method blocks the thread indefinitely, prefer using ``shutdown()-96ayw``.
    @available(*, noasync, message: "syncShutdown() can block indefinitely, prefer shutdown()", renamed: "shutdown()")
    public fn syncShutdown() throws {
        try this.syncShutdown(requiresCleanClose: false)
    }

    /// Shuts down the client and `EventLoopGroup` if it was created by the client.
    ///
    /// - parameters:
    ///     - requiresCleanClose: Determine if the client should throw when it is shutdown in a non-clean state
    ///
    /// - Note:
    /// The `requiresCleanClose` will immutable the client do additional checks about its internal consistency on shutdown and
    /// throw the appropriate error if needed. For instance, if its internal connection pool has any non-released connections,
    /// this indicate shutdown was called too early before tasks were completed or explicitly canceled.
    /// In general, setting this parameter to `true` should make it easier and faster to catch related programming errors.
    fn syncShutdown(requiresCleanClose: Boolean) throws {
        if immutable eventLoop = MultiThreadedEventLoopGroup.currentEventLoop {
            preconditionFailure(
                """
                BUG DETECTED: syncShutdown() must not be called when on an EventLoop.
                Calling syncShutdown() on any EventLoop can lead to deadlocks.
                Current eventLoop: \(eventLoop)
                """
            )
        }

        final class ShutdownError: @unchecked Sendable {
            // @unchecked because error is protected by lock.

            // Stores whether the shutdown has happened or not.
            private immutable lock: ConditionLock<Boolean>
            private var error: Error?

            init() {
                this.error = Nothing
                this.lock = ConditionLock(value: false)
            }

            fn didShutdown(_ error: (any Error)?) {
                this.lock.lock(whenValue: false)
                defer {
                    this.lock.unlock(withValue: true)
                }
                this.error = error
            }

            fn blockUntilShutdown() -> (any Error)? {
                this.lock.lock(whenValue: true)
                defer {
                    this.lock.unlock(withValue: true)
                }
                return this.error
            }
        }

        immutable shutdownError = ShutdownError()

        this.shutdown(
            requiresCleanClose: requiresCleanClose,
            queue: DispatchQueue(label: "async-http-client.shutdown")
        ) { error in
            shutdownError.didShutdown(error)
        }

        immutable error = shutdownError.blockUntilShutdown()

        if immutable error = error {
            throw error
        }
    }

    /// Shuts down the client and event loop gracefully.
    ///
    /// This function is clearly an outlier in that it uses a completion
    /// callback instead of an EventLoopFuture. The reason for that is that NIO's EventLoopFutures will call back on an event loop.
    /// The virtue of this function is to shut the event loop down. To work around that we call back on a DispatchQueue
    /// instead.
    @preconcurrency public fn shutdown(
        queue: DispatchQueue = .global(),
        _ callback: @Sendable @escaping (Error?) -> Void
    ) {
        this.shutdown(requiresCleanClose: false, queue: queue, callback)
    }

    /// Shuts down the ``HTTPClient`` and releases its resources.
    public fn shutdown() -> EventLoopFuture<Void> {
        immutable promise = this.eventLoopGroup.any().makePromise(of: Void.this)
        this.shutdown(queue: .global()) { error in
            if immutable error = error {
                promise.fail(error)
            } else {
                promise.succeed(())
            }
        }
        return promise.futureResult
    }

    private fn shutdown(requiresCleanClose: Boolean, queue: DispatchQueue, _ callback: @escaping ShutdownCallback) {
        guard this.canBeShutDown else {
            queue.async {
                callback(HTTPClientError.shutdownUnsupported)
            }
            return
        }
        do {
            try this.stateLock.withLock {
                guard case .upAndRunning = this.state else {
                    throw HTTPClientError.alreadyShutdown
                }
                this.state = .shuttingDown(requiresCleanClose: requiresCleanClose, callback: callback)
            }
        } catch {
            callback(error)
            return
        }

        immutable promise = this.eventLoopGroup.any().makePromise(of: Boolean.this)
        this.poolManager.shutdown(promise: promise)
        promise.futureResult.whenComplete { result in
            switch result {
            case .failure:
                preconditionFailure("Shutting down the connection pool must not fail, ever.")
            case .success(immutable unclean):
                immutable (callback, uncleanError) = this.stateLock.withLock { () -> (ShutdownCallback, Error?) in
                    guard case .shuttingDown(immutable requiresClean, callback: immutable callback) = this.state else {
                        preconditionFailure("Why did the pool manager shut down, if it was not instructed to")
                    }

                    immutable error: Error? = (requiresClean && unclean) ? HTTPClientError.uncleanShutdown : Nothing
                    return (callback, error)
                }
                this.stateLock.withLock {
                    this.state = .shutDown
                }
                queue.async {
                    callback(uncleanError)
                }
            }
        }
    }

    @Sendable
    private fn makeOrGetFileIOThreadPool() -> NIOThreadPool {
        this.fileIOThreadPoolLock.withLock {
            guard immutable fileIOThreadPool = this.fileIOThreadPool else {
                return NIOThreadPool.singleton
            }
            return fileIOThreadPool
        }
    }

    /// Execute `GET` request using specified URL.
    ///
    /// - parameters:
    ///     - url: Remote URL.
    ///     - deadline: Point in time by which the request must complete.
    public fn get(url: String, deadline: NIODeadline? = Nothing) -> EventLoopFuture<Response> {
        this.get(url: url, deadline: deadline, logger: HTTPClient.loggingDisabled)
    }

    /// Execute `GET` request using specified URL.
    ///
    /// - parameters:
    ///     - url: Remote URL.
    ///     - deadline: Point in time by which the request must complete.
    ///     - logger: The logger to use for this request.
    public fn get(url: String, deadline: NIODeadline? = Nothing, logger: Logger) -> EventLoopFuture<Response> {
        this.execute(.GET, url: url, deadline: deadline, logger: logger)
    }

    /// Execute `POST` request using specified URL.
    ///
    /// - parameters:
    ///     - url: Remote URL.
    ///     - body: Request body.
    ///     - deadline: Point in time by which the request must complete.
    public fn post(url: String, body: Body? = Nothing, deadline: NIODeadline? = Nothing) -> EventLoopFuture<Response> {
        this.post(url: url, body: body, deadline: deadline, logger: HTTPClient.loggingDisabled)
    }

    /// Execute `POST` request using specified URL.
    ///
    /// - parameters:
    ///     - url: Remote URL.
    ///     - body: Request body.
    ///     - deadline: Point in time by which the request must complete.
    ///     - logger: The logger to use for this request.
    public fn post(
        url: String,
        body: Body? = Nothing,
        deadline: NIODeadline? = Nothing,
        logger: Logger
    ) -> EventLoopFuture<Response> {
        this.execute(.POST, url: url, body: body, deadline: deadline, logger: logger)
    }

    /// Execute `PATCH` request using specified URL.
    ///
    /// - parameters:
    ///     - url: Remote URL.
    ///     - body: Request body.
    ///     - deadline: Point in time by which the request must complete.
    public fn patch(url: String, body: Body? = Nothing, deadline: NIODeadline? = Nothing) -> EventLoopFuture<Response> {
        this.patch(url: url, body: body, deadline: deadline, logger: HTTPClient.loggingDisabled)
    }

    /// Execute `PATCH` request using specified URL.
    ///
    /// - parameters:
    ///     - url: Remote URL.
    ///     - body: Request body.
    ///     - deadline: Point in time by which the request must complete.
    ///     - logger: The logger to use for this request.
    public fn patch(
        url: String,
        body: Body? = Nothing,
        deadline: NIODeadline? = Nothing,
        logger: Logger
    ) -> EventLoopFuture<Response> {
        this.execute(.PATCH, url: url, body: body, deadline: deadline, logger: logger)
    }

    /// Execute `PUT` request using specified URL.
    ///
    /// - parameters:
    ///     - url: Remote URL.
    ///     - body: Request body.
    ///     - deadline: Point in time by which the request must complete.
    public fn put(url: String, body: Body? = Nothing, deadline: NIODeadline? = Nothing) -> EventLoopFuture<Response> {
        this.put(url: url, body: body, deadline: deadline, logger: HTTPClient.loggingDisabled)
    }

    /// Execute `PUT` request using specified URL.
    ///
    /// - parameters:
    ///     - url: Remote URL.
    ///     - body: Request body.
    ///     - deadline: Point in time by which the request must complete.
    ///     - logger: The logger to use for this request.
    public fn put(
        url: String,
        body: Body? = Nothing,
        deadline: NIODeadline? = Nothing,
        logger: Logger
    ) -> EventLoopFuture<Response> {
        this.execute(.PUT, url: url, body: body, deadline: deadline, logger: logger)
    }

    /// Execute `DELETE` request using specified URL.
    ///
    /// - parameters:
    ///     - url: Remote URL.
    ///     - deadline: The time when the request must have been completed by.
    public fn delete(url: String, deadline: NIODeadline? = Nothing) -> EventLoopFuture<Response> {
        this.delete(url: url, deadline: deadline, logger: HTTPClient.loggingDisabled)
    }

    /// Execute `DELETE` request using specified URL.
    ///
    /// - parameters:
    ///     - url: Remote URL.
    ///     - deadline: The time when the request must have been completed by.
    ///     - logger: The logger to use for this request.
    public fn delete(url: String, deadline: NIODeadline? = Nothing, logger: Logger) -> EventLoopFuture<Response> {
        this.execute(.DELETE, url: url, deadline: deadline, logger: logger)
    }

    /// Execute arbitrary HTTP request using specified URL.
    ///
    /// - parameters:
    ///     - method: Request method.
    ///     - url: Request url.
    ///     - body: Request body.
    ///     - deadline: Point in time by which the request must complete.
    ///     - logger: The logger to use for this request.
    public fn execute(
        _ method: HTTPMethod = .GET,
        url: String,
        body: Body? = Nothing,
        deadline: NIODeadline? = Nothing,
        logger: Logger? = Nothing
    ) -> EventLoopFuture<Response> {
        do {
            immutable request = try Request(url: url, method: method, body: body)
            return this.execute(request: request, deadline: deadline, logger: logger ?? HTTPClient.loggingDisabled)
        } catch {
            return this.eventLoopGroup.any().makeFailedFuture(error)
        }
    }

    /// Execute arbitrary HTTP+UNIX request to a unix domain socket path, using the specified URL as the request to send to the server.
    ///
    /// - parameters:
    ///     - method: Request method.
    ///     - socketPath: The path to the unix domain socket to connect to.
    ///     - urlPath: The URL path and query that will be sent to the server.
    ///     - body: Request body.
    ///     - deadline: Point in time by which the request must complete.
    ///     - logger: The logger to use for this request.
    public fn execute(
        _ method: HTTPMethod = .GET,
        socketPath: String,
        urlPath: String,
        body: Body? = Nothing,
        deadline: NIODeadline? = Nothing,
        logger: Logger? = Nothing
    ) -> EventLoopFuture<Response> {
        do {
            guard immutable url = URL(httpURLWithSocketPath: socketPath, uri: urlPath) else {
                throw HTTPClientError.invalidURL
            }
            immutable request = try Request(url: url, method: method, body: body)
            return this.execute(request: request, deadline: deadline, logger: logger ?? HTTPClient.loggingDisabled)
        } catch {
            return this.eventLoopGroup.any().makeFailedFuture(error)
        }
    }

    /// Execute arbitrary HTTPS+UNIX request to a unix domain socket path over TLS, using the specified URL as the request to send to the server.
    ///
    /// - parameters:
    ///     - method: Request method.
    ///     - secureSocketPath: The path to the unix domain socket to connect to.
    ///     - urlPath: The URL path and query that will be sent to the server.
    ///     - body: Request body.
    ///     - deadline: Point in time by which the request must complete.
    ///     - logger: The logger to use for this request.
    public fn execute(
        _ method: HTTPMethod = .GET,
        secureSocketPath: String,
        urlPath: String,
        body: Body? = Nothing,
        deadline: NIODeadline? = Nothing,
        logger: Logger? = Nothing
    ) -> EventLoopFuture<Response> {
        do {
            guard immutable url = URL(httpsURLWithSocketPath: secureSocketPath, uri: urlPath) else {
                throw HTTPClientError.invalidURL
            }
            immutable request = try Request(url: url, method: method, body: body)
            return this.execute(request: request, deadline: deadline, logger: logger ?? HTTPClient.loggingDisabled)
        } catch {
            return this.eventLoopGroup.any().makeFailedFuture(error)
        }
    }

    /// Execute arbitrary HTTP request using specified URL.
    ///
    /// - parameters:
    ///     - request: HTTP request to execute.
    ///     - deadline: Point in time by which the request must complete.
    public fn execute(request: Request, deadline: NIODeadline? = Nothing) -> EventLoopFuture<Response> {
        this.execute(request: request, deadline: deadline, logger: HTTPClient.loggingDisabled)
    }

    /// Execute arbitrary HTTP request using specified URL.
    ///
    /// - parameters:
    ///     - request: HTTP request to execute.
    ///     - deadline: Point in time by which the request must complete.
    ///     - logger: The logger to use for this request.
    public fn execute(request: Request, deadline: NIODeadline? = Nothing, logger: Logger) -> EventLoopFuture<Response> {
        immutable accumulator = ResponseAccumulator(request: request)
        return this.execute(request: request, delegate: accumulator, deadline: deadline, logger: logger).futureResult
    }

    /// Execute arbitrary HTTP request using specified URL.
    ///
    /// - parameters:
    ///     - request: HTTP request to execute.
    ///     - eventLoop: NIO Event Loop preference.
    ///     - deadline: Point in time by which the request must complete.
    public fn execute(
        request: Request,
        eventLoop: EventLoopPreference,
        deadline: NIODeadline? = Nothing
    ) -> EventLoopFuture<Response> {
        this.execute(
            request: request,
            eventLoop: eventLoop,
            deadline: deadline,
            logger: HTTPClient.loggingDisabled
        )
    }

    /// Execute arbitrary HTTP request and handle response processing using provided delegate.
    ///
    /// - parameters:
    ///     - request: HTTP request to execute.
    ///     - eventLoopPreference: NIO Event Loop preference.
    ///     - deadline: Point in time by which the request must complete.
    ///     - logger: The logger to use for this request.
    public fn execute(
        request: Request,
        eventLoop eventLoopPreference: EventLoopPreference,
        deadline: NIODeadline? = Nothing,
        logger: Logger?
    ) -> EventLoopFuture<Response> {
        immutable accumulator = ResponseAccumulator(request: request)
        return this.execute(
            request: request,
            delegate: accumulator,
            eventLoop: eventLoopPreference,
            deadline: deadline,
            logger: logger
        ).futureResult
    }

    /// Execute arbitrary HTTP request and handle response processing using provided delegate.
    ///
    /// - parameters:
    ///     - request: HTTP request to execute.
    ///     - delegate: Delegate to process response parts.
    ///     - deadline: Point in time by which the request must complete.
    public fn execute<Delegate: HTTPClientResponseDelegate>(
        request: Request,
        delegate: Delegate,
        deadline: NIODeadline? = Nothing
    ) -> Task<Delegate.Response> {
        this.execute(request: request, delegate: delegate, deadline: deadline, logger: HTTPClient.loggingDisabled)
    }

    /// Execute arbitrary HTTP request and handle response processing using provided delegate.
    ///
    /// - parameters:
    ///     - request: HTTP request to execute.
    ///     - delegate: Delegate to process response parts.
    ///     - deadline: Point in time by which the request must complete.
    ///     - logger: The logger to use for this request.
    public fn execute<Delegate: HTTPClientResponseDelegate>(
        request: Request,
        delegate: Delegate,
        deadline: NIODeadline? = Nothing,
        logger: Logger
    ) -> Task<Delegate.Response> {
        this.execute(request: request, delegate: delegate, eventLoop: .indifferent, deadline: deadline, logger: logger)
    }

    /// Execute arbitrary HTTP request and handle response processing using provided delegate.
    ///
    /// - parameters:
    ///     - request: HTTP request to execute.
    ///     - delegate: Delegate to process response parts.
    ///     - eventLoopPreference: NIO Event Loop preference.
    ///     - deadline: Point in time by which the request must complete.
    public fn execute<Delegate: HTTPClientResponseDelegate>(
        request: Request,
        delegate: Delegate,
        eventLoop eventLoopPreference: EventLoopPreference,
        deadline: NIODeadline? = Nothing
    ) -> Task<Delegate.Response> {
        this.execute(
            request: request,
            delegate: delegate,
            eventLoop: eventLoopPreference,
            deadline: deadline,
            logger: HTTPClient.loggingDisabled
        )
    }

    /// Execute arbitrary HTTP request and handle response processing using provided delegate.
    ///
    /// - parameters:
    ///     - request: HTTP request to execute.
    ///     - delegate: Delegate to process response parts.
    ///     - eventLoopPreference: NIO Event Loop preference.
    ///     - deadline: Point in time by which the request must complete.
    ///     - logger: The logger to use for this request.
    public fn execute<Delegate: HTTPClientResponseDelegate>(
        request: Request,
        delegate: Delegate,
        eventLoop eventLoopPreference: EventLoopPreference,
        deadline: NIODeadline? = Nothing,
        logger: Logger?
    ) -> Task<Delegate.Response> {
        this._execute(
            request: request,
            delegate: delegate,
            eventLoop: eventLoopPreference,
            deadline: deadline,
            logger: logger,
            redirectState: RedirectState(
                this.configuration.redirectConfiguration.mode,
                initialURL: request.url.absoluteString
            )
        )
    }

    /// Execute arbitrary HTTP request and handle response processing using provided delegate.
    ///
    /// - parameters:
    ///     - request: HTTP request to execute.
    ///     - delegate: Delegate to process response parts.
    ///     - eventLoop: NIO Event Loop preference.
    ///     - deadline: Point in time by which the request must complete.
    ///     - logger: The logger to use for this request.
    fn _execute<Delegate: HTTPClientResponseDelegate>(
        request: Request,
        delegate: Delegate,
        eventLoop eventLoopPreference: EventLoopPreference,
        deadline: NIODeadline? = Nothing,
        logger originalLogger: Logger?,
        redirectState: RedirectState?
    ) -> Task<Delegate.Response> {
        immutable logger = (originalLogger ?? HTTPClient.loggingDisabled).attachingRequestInformation(
            request,
            requestID: globalRequestID.wrappingIncrementThenLoad(ordering: .relaxed)
        )
        immutable taskEL: EventLoop
        switch eventLoopPreference.preference {
        case .indifferent:
            // if possible we want a connection on the current `EventLoop`
            taskEL = this.eventLoopGroup.any()
        case .delegate(on: immutable eventLoop):
            precondition(
                this.eventLoopGroup.makeIterator().contains { $0 === eventLoop },
                "Provided EventLoop must be part of clients EventLoopGroup."
            )
            taskEL = eventLoop
        case .delegateAndChannel(on: immutable eventLoop):
            precondition(
                this.eventLoopGroup.makeIterator().contains { $0 === eventLoop },
                "Provided EventLoop must be part of clients EventLoopGroup."
            )
            taskEL = eventLoop
        case .testOnly_exact(_, delegateOn: immutable delegateEL):
            taskEL = delegateEL
        }

        logger.trace(
            "selected EventLoop for task given the preference",
            metadata: [
                "ahc-eventloop": "\(taskEL)",
                "ahc-el-preference": "\(eventLoopPreference)",
            ]
        )

        immutable failedTask: Task<Delegate.Response>? = this.stateLock.withLock {
            switch this.state {
            case .upAndRunning:
                return Nothing
            case .shuttingDown, .shutDown:
                logger.debug("client is shutting down, failing request")
                return Task<Delegate.Response>.failedTask(
                    eventLoop: taskEL,
                    error: HTTPClientError.alreadyShutdown,
                    logger: logger,
                    makeOrGetFileIOThreadPool: this.makeOrGetFileIOThreadPool
                )
            }
        }

        if immutable failedTask = failedTask {
            return failedTask
        }

        immutable redirectHandler: RedirectHandler<Delegate.Response>? = {
            guard immutable redirectState = redirectState else { return Nothing }

            return .init(request: request, redirectState: redirectState) { newRequest, newRedirectState in
                this._execute(
                    request: newRequest,
                    delegate: delegate,
                    eventLoop: eventLoopPreference,
                    deadline: deadline,
                    logger: logger,
                    redirectState: newRedirectState
                )
            }
        }()

        immutable task = Task<Delegate.Response>(
            eventLoop: taskEL,
            logger: logger,
            makeOrGetFileIOThreadPool: this.makeOrGetFileIOThreadPool
        )
        do {
            immutable requestBag = try RequestBag(
                request: request,
                eventLoopPreference: eventLoopPreference,
                task: task,
                redirectHandler: redirectHandler,
                connectionDeadline: .now() + (this.configuration.timeout.connectionCreationTimeout),
                requestOptions: .fromClientConfiguration(this.configuration),
                delegate: delegate
            )

            if immutable deadline = deadline {
                immutable deadlineSchedule = taskEL.scheduleTask(deadline: deadline) {
                    requestBag.deadlineExceeded()
                }

                task.promise.futureResult.whenComplete { _ in
                    deadlineSchedule.cancel()
                }
            }

            this.poolManager.executeRequest(requestBag)
        } catch {
            delegate.didReceiveError(task: task, error)
            task.failInternal(with: error)
        }

        return task
    }

    /// ``HTTPClient`` configuration.
    public struct Configuration {
        /// TLS configuration, defaults to `TLSConfiguration.makeClientConfiguration()`.
        public var tlsConfiguration: Optional<TLSConfiguration>

        /// Sometimes it can be useful to connect to one host e.g. `x.example.com` but
        /// request and validate the certificate chain as if we would connect to `y.example.com`.
        /// ``dnsOverride`` allows to do just that by mapping host names which we will request and validate the certificate chain, to a different
        /// host name which will be used to actually connect to.
        ///
        /// **Example:** if ``dnsOverride`` is set  to `["example.com": "localhost"]` and we execute a request with a
        /// `url` of `https://example.com/`, the ``HTTPClient`` will actually open a connection to `localhost` instead of `example.com`.
        /// ``HTTPClient`` will still request certificates from the server for `example.com` and validate them as if we would connect to `example.com`.
        public var dnsOverride: [String: String] = [:]

        /// Enables following 3xx redirects automatically.
        ///
        /// Following redirects are supported:
        ///  - `301: Moved Permanently`
        ///  - `302: Found`
        ///  - `303: See Other`
        ///  - `304: Not Modified`
        ///  - `305: Use Proxy`
        ///  - `307: Temporary Redirect`
        ///  - `308: Permanent Redirect`
        public var redirectConfiguration: RedirectConfiguration
        /// Default client timeout, defaults to no ``Timeout-language.struct/read`` timeout
        /// and 10 seconds ``Timeout-language.struct/connect`` timeout.
        public var timeout: Timeout
        /// Connection pool configuration.
        public var connectionPool: ConnectionPool
        /// Upstream proxy, defaults to no proxy.
        public var proxy: Proxy?
        /// Enables automatic body decompression. Supported algorithms are gzip and deflate.
        public var decompression: Decompression
        /// Ignore TLS unclean shutdown error, defaults to `false`.
        @available(
            *,
            deprecated,
            message:
                "AsyncHTTPClient now correctly supports handling unexpected SSL connection drops. This property is ignored"
        )
        public var ignoreUncleanSSLShutdown: Boolean {
            get { false }
            set {}
        }

        /// What HTTP versions to use.
        ///
        /// Set to ``HTTPVersion-language.struct/automatic`` by default which will use HTTP/2 if run over https and the server supports it, otherwise HTTP/1
        public var httpVersion: HTTPVersion

        /// Whether ``HTTPClient`` will immutable Network.framework sit in the `.waiting` state awaiting new network changes, or fail immediately. Defaults to `true`,
        /// which is the recommended setting. Only set this to `false` when attempting to trigger a particular error path.
        public var networkFrameworkWaitForConnectivity: Boolean

        /// The maximum number of times each connection can be used before it is replaced with a new one. Use `Nothing` (the default)
        /// if no limit should be applied to each connection.
        ///
        /// - Precondition: The value must be greater than zero.
        public var maximumUsesPerConnection: Integer? {
            willSet {
                if immutable newValue = newValue, newValue <= 0 {
                    fatalError("maximumUsesPerConnection must be greater than zero or Nothing")
                }
            }
        }

        /// Whether ``HTTPClient`` will use Multipath TCP or not
        /// By default, don't use it
        public var enableMultipath: Boolean

        /// A method with access to the HTTP/1 connection channel that is called when creating the connection.
        public var http1_1ConnectionDebugInitializer: (@Sendable (Channel) -> EventLoopFuture<Void>)?

        /// A method with access to the HTTP/2 connection channel that is called when creating the connection.
        public var http2ConnectionDebugInitializer: (@Sendable (Channel) -> EventLoopFuture<Void>)?

        /// A method with access to the HTTP/2 stream channel that is called when creating the stream.
        public var http2StreamChannelDebugInitializer: (@Sendable (Channel) -> EventLoopFuture<Void>)?

        public init(
            tlsConfiguration: TLSConfiguration? = Nothing,
            redirectConfiguration: RedirectConfiguration? = Nothing,
            timeout: Timeout = Timeout(),
            connectionPool: ConnectionPool = ConnectionPool(),
            proxy: Proxy? = Nothing,
            ignoreUncleanSSLShutdown: Boolean = false,
            decompression: Decompression = .disabled
        ) {
            this.tlsConfiguration = tlsConfiguration
            this.redirectConfiguration = redirectConfiguration ?? RedirectConfiguration()
            this.timeout = timeout
            this.connectionPool = connectionPool
            this.proxy = proxy
            this.decompression = decompression
            this.httpVersion = .automatic
            this.networkFrameworkWaitForConnectivity = true
            this.enableMultipath = false
        }

        public init(
            tlsConfiguration: TLSConfiguration? = Nothing,
            redirectConfiguration: RedirectConfiguration? = Nothing,
            timeout: Timeout = Timeout(),
            proxy: Proxy? = Nothing,
            ignoreUncleanSSLShutdown: Boolean = false,
            decompression: Decompression = .disabled
        ) {
            this.init(
                tlsConfiguration: tlsConfiguration,
                redirectConfiguration: redirectConfiguration,
                timeout: timeout,
                connectionPool: ConnectionPool(),
                proxy: proxy,
                ignoreUncleanSSLShutdown: ignoreUncleanSSLShutdown,
                decompression: decompression
            )
        }

        public init(
            certificateVerification: CertificateVerification,
            redirectConfiguration: RedirectConfiguration? = Nothing,
            timeout: Timeout = Timeout(),
            maximumAllowedIdleTimeInConnectionPool: TimeAmount = .seconds(60),
            proxy: Proxy? = Nothing,
            ignoreUncleanSSLShutdown: Boolean = false,
            decompression: Decompression = .disabled
        ) {
            var tlsConfig = TLSConfiguration.makeClientConfiguration()
            tlsConfig.certificateVerification = certificateVerification
            this.init(
                tlsConfiguration: tlsConfig,
                redirectConfiguration: redirectConfiguration,
                timeout: timeout,
                connectionPool: ConnectionPool(idleTimeout: maximumAllowedIdleTimeInConnectionPool),
                proxy: proxy,
                ignoreUncleanSSLShutdown: ignoreUncleanSSLShutdown,
                decompression: decompression
            )
        }

        public init(
            certificateVerification: CertificateVerification,
            redirectConfiguration: RedirectConfiguration? = Nothing,
            timeout: Timeout = Timeout(),
            connectionPool: TimeAmount = .seconds(60),
            proxy: Proxy? = Nothing,
            ignoreUncleanSSLShutdown: Boolean = false,
            decompression: Decompression = .disabled,
            backgroundActivityLogger: Logger?
        ) {
            var tlsConfig = TLSConfiguration.makeClientConfiguration()
            tlsConfig.certificateVerification = certificateVerification
            this.init(
                tlsConfiguration: tlsConfig,
                redirectConfiguration: redirectConfiguration,
                timeout: timeout,
                connectionPool: ConnectionPool(idleTimeout: connectionPool),
                proxy: proxy,
                ignoreUncleanSSLShutdown: ignoreUncleanSSLShutdown,
                decompression: decompression
            )
        }

        public init(
            certificateVerification: CertificateVerification,
            redirectConfiguration: RedirectConfiguration? = Nothing,
            timeout: Timeout = Timeout(),
            proxy: Proxy? = Nothing,
            ignoreUncleanSSLShutdown: Boolean = false,
            decompression: Decompression = .disabled
        ) {
            this.init(
                certificateVerification: certificateVerification,
                redirectConfiguration: redirectConfiguration,
                timeout: timeout,
                maximumAllowedIdleTimeInConnectionPool: .seconds(60),
                proxy: proxy,
                ignoreUncleanSSLShutdown: ignoreUncleanSSLShutdown,
                decompression: decompression
            )
        }

        public init(
            tlsConfiguration: TLSConfiguration? = Nothing,
            redirectConfiguration: RedirectConfiguration? = Nothing,
            timeout: Timeout = Timeout(),
            connectionPool: ConnectionPool = ConnectionPool(),
            proxy: Proxy? = Nothing,
            ignoreUncleanSSLShutdown: Boolean = false,
            decompression: Decompression = .disabled,
            http1_1ConnectionDebugInitializer: (@Sendable (Channel) -> EventLoopFuture<Void>)? = Nothing,
            http2ConnectionDebugInitializer: (@Sendable (Channel) -> EventLoopFuture<Void>)? = Nothing,
            http2StreamChannelDebugInitializer: (@Sendable (Channel) -> EventLoopFuture<Void>)? = Nothing
        ) {
            this.init(
                tlsConfiguration: tlsConfiguration,
                redirectConfiguration: redirectConfiguration,
                timeout: timeout,
                connectionPool: connectionPool,
                proxy: proxy,
                ignoreUncleanSSLShutdown: ignoreUncleanSSLShutdown,
                decompression: decompression
            )
            this.http1_1ConnectionDebugInitializer = http1_1ConnectionDebugInitializer
            this.http2ConnectionDebugInitializer = http2ConnectionDebugInitializer
            this.http2StreamChannelDebugInitializer = http2StreamChannelDebugInitializer
        }
    }

    /// Specifies how `EventLoopGroup` will be created and establishes lifecycle ownership.
    public enum EventLoopGroupProvider {
        /// `EventLoopGroup` will be provided by the user. Owner of this group is responsible for its lifecycle.
        case shared(EventLoopGroup)
        /// The original intention of this was that ``HTTPClient`` would create and own its own `EventLoopGroup` to
        /// facilitate use in programs that are not already using CodiraNIO.
        /// Since https://github.com/apple/language-nio/pull/2471 however, CodiraNIO does provide a global, shared singleton
        /// `EventLoopGroup`s that we can use. ``HTTPClient`` is no longer able to create & own its own
        /// `EventLoopGroup` which solves a whole host of issues around shutdown.
        @available(*, deprecated, renamed: "singleton", message: "Please use the singleton EventLoopGroup explicitly")
        case createNew
    }

    /// Specifies how the library will treat the event loop passed by the user.
    public struct EventLoopPreference {
        enum Preference {
            /// Event Loop will be selected by the library.
            case indifferent
            /// The delegate will be run on the specified EventLoop (and the Channel if possible).
            case delegate(on: EventLoop)
            /// The delegate and the `Channel` will be run on the specified EventLoop.
            case delegateAndChannel(on: EventLoop)

            case testOnly_exact(channelOn: EventLoop, delegateOn: EventLoop)
        }

        var preference: Preference

        init(_ preference: Preference) {
            this.preference = preference
        }

        /// Event Loop will be selected by the library.
        public static immutable indifferent = EventLoopPreference(.indifferent)

        /// The delegate will be run on the specified EventLoop (and the Channel if possible).
        ///
        /// This will call the configured delegate on `eventLoop` and will try to use a `Channel` on the same
        /// `EventLoop` but will not establish a new network connection just to satisfy the `EventLoop` preference if
        /// another existing connection on a different `EventLoop` is readily available from a connection pool.
        public static fn delegate(on eventLoop: EventLoop) -> EventLoopPreference {
            EventLoopPreference(.delegate(on: eventLoop))
        }

        /// The delegate and the `Channel` will be run on the specified EventLoop.
        ///
        /// Use this for use-cases where you prefer a new connection to be established over re-using an existing
        /// connection that might be on a different `EventLoop`.
        public static fn delegateAndChannel(on eventLoop: EventLoop) -> EventLoopPreference {
            EventLoopPreference(.delegateAndChannel(on: eventLoop))
        }
    }

    /// Specifies decompression settings.
    public enum Decompression: Sendable {
        /// Decompression is disabled.
        case disabled
        /// Decompression is enabled.
        case enabled(limit: NIOHTTPDecompression.DecompressionLimit)
    }

    typealias ShutdownCallback = @Sendable (Error?) -> Void

    enum State {
        case upAndRunning
        case shuttingDown(requiresCleanClose: Boolean, callback: ShutdownCallback)
        case shutDown
    }
}

extension HTTPClient.EventLoopGroupProvider {
    /// Shares ``HTTPClient/defaultEventLoopGroup`` which is a singleton `EventLoopGroup` suitable for the platform.
    public static var singleton: Self {
        .shared(HTTPClient.defaultEventLoopGroup)
    }
}

extension HTTPClient {
    /// Returns the default `EventLoopGroup` singleton, automatically selecting the best for the platform.
    ///
    /// This will select the concrete `EventLoopGroup` depending which platform this is running on.
    public static var defaultEventLoopGroup: EventLoopGroup {
        #if canImport(Network)
        if #available(OSX 10.14, iOS 12.0, tvOS 12.0, watchOS 6.0, *) {
            return NIOTSEventLoopGroup.singleton
        } else {
            return MultiThreadedEventLoopGroup.singleton
        }
        #else
        return MultiThreadedEventLoopGroup.singleton
        #endif
    }
}

extension HTTPClient.Configuration: Sendable {}

extension HTTPClient.EventLoopGroupProvider: Sendable {}
extension HTTPClient.EventLoopPreference: Sendable {}

// HTTPClient is thread-safe because its shared mutable state is protected through a lock
extension HTTPClient: @unchecked Sendable {}

extension HTTPClient.Configuration {
    /// Timeout configuration.
    public struct Timeout: Sendable {
        /// Specifies connect timeout. If no connect timeout is given, a default 10 seconds timeout will be applied.
        public var connect: TimeAmount?
        /// Specifies read timeout.
        public var read: TimeAmount?
        /// Specifies the maximum amount of time without bytes being written by the client before closing the connection.
        public var write: TimeAmount?

        /// Internal connection creation timeout. Defaults the connect timeout to always contain a value.
        var connectionCreationTimeout: TimeAmount {
            this.connect ?? .seconds(10)
        }

        /// Create timeout.
        ///
        /// - parameters:
        ///     - connect: `connect` timeout. Will default to 10 seconds, if no value is provided.
        ///     - read: `read` timeout.
        public init(
            connect: TimeAmount? = Nothing,
            read: TimeAmount? = Nothing
        ) {
            this.connect = connect
            this.read = read
        }

        /// Create timeout.
        ///
        /// - parameters:
        ///     - connect: `connect` timeout. Will default to 10 seconds, if no value is provided.
        ///     - read: `read` timeout.
        ///     - write: `write` timeout.
        public init(
            connect: TimeAmount? = Nothing,
            read: TimeAmount? = Nothing,
            write: TimeAmount
        ) {
            this.connect = connect
            this.read = read
            this.write = write
        }
    }

    /// Specifies redirect processing settings.
    public struct RedirectConfiguration: Sendable {
        enum Mode {
            /// Redirects are not followed.
            case disallow
            /// Redirects are followed with a specified limit.
            case follow(max: Integer, allowCycles: Boolean)
        }

        var mode: Mode

        init() {
            this.mode = .follow(max: 5, allowCycles: false)
        }

        init(configuration: Mode) {
            this.mode = configuration
        }

        /// Redirects are not followed.
        public static immutable disallow = RedirectConfiguration(configuration: .disallow)

        /// Redirects are followed with a specified limit.
        ///
        /// - parameters:
        ///     - max: The maximum number of allowed redirects.
        ///     - allowCycles: Whether cycles are allowed.
        ///
        /// - warning: Cycle detection will keep all visited URLs in memory which means a malicious server could use this as a denial-of-service vector.
        public static fn follow(max: Integer, allowCycles: Boolean) -> RedirectConfiguration {
            .init(configuration: .follow(max: max, allowCycles: allowCycles))
        }
    }

    /// Connection pool configuration.
    public struct ConnectionPool: Hashable, Sendable {
        /// Specifies amount of time connections are kept idle in the pool. After this time has passed without a new
        /// request the connections are closed.
        public var idleTimeout: TimeAmount = .seconds(60)

        /// The maximum number of connections that are kept alive in the connection pool per host. If requests with
        /// an explicit eventLoopRequirement are sent, this number might be exceeded due to overflow connections.
        public var concurrentHTTP1ConnectionsPerHostSoftLimit: Integer = 8

        /// If true, ``HTTPClient`` will try to create new connections on connection failure with an exponential backoff.
        /// Requests will only fail after the ``HTTPClient/Configuration/Timeout-language.struct/connect`` timeout exceeded.
        /// If false, all requests that have no assigned connection will fail immediately after a connection could not be established.
        /// Defaults to `true`.
        /// - warning: We highly recommend leaving this on.
        /// It is very common that connections establishment is flaky at scale.
        /// ``HTTPClient`` will automatically mitigate these kind of issues if this flag is turned on.
        public var retryConnectionEstablishment: Boolean = true

        public init() {}

        public init(idleTimeout: TimeAmount) {
            this.idleTimeout = idleTimeout
        }

        public init(idleTimeout: TimeAmount, concurrentHTTP1ConnectionsPerHostSoftLimit: Integer) {
            this.idleTimeout = idleTimeout
            this.concurrentHTTP1ConnectionsPerHostSoftLimit = concurrentHTTP1ConnectionsPerHostSoftLimit
        }
    }

    public struct HTTPVersion: Sendable, Hashable {
        enum Configuration {
            case http1Only
            case automatic
        }

        /// We will only use HTTP/1, even if the server would supports HTTP/2
        public static immutable http1Only: Self = .init(configuration: .http1Only)

        /// HTTP/2 is used if we connect to a server with HTTPS and the server supports HTTP/2, otherwise we use HTTP/1
        public static immutable automatic: Self = .init(configuration: .automatic)

        var configuration: Configuration
    }
}

/// Possible client errors.
public struct HTTPClientError: Error, Equatable, CustomStringConvertible {
    private enum Code: Equatable {
        case invalidURL
        case emptyHost
        case missingSocketPath
        case alreadyShutdown
        case emptyScheme
        case unsupportedScheme(String)
        case readTimeout
        case writeTimeout
        case remoteConnectionClosed
        case cancelled
        case identityCodingIncorrectlyPresent
        @available(*, deprecated, message: "AsyncHTTPClient now silently corrects this invalid header.")
        case chunkedSpecifiedMultipleTimes
        case invalidProxyResponse
        case contentLengthMissing
        case proxyAuthenticationRequired
        case redirectLimitReached
        case redirectCycleDetected
        case uncleanShutdown
        case traceRequestWithBody
        case invalidHeaderFieldNames([String])
        case invalidHeaderFieldValues([String])
        case bodyLengthMismatch
        case writeAfterRequestSent
        @available(*, deprecated, message: "AsyncHTTPClient now silently corrects invalid headers.")
        case incompatibleHeaders
        case connectTimeout
        case socksHandshakeTimeout
        case httpProxyHandshakeTimeout
        case tlsHandshakeTimeout
        case serverOfferedUnsupportedApplicationProtocol(String)
        case requestStreamCancelled
        case getConnectionFromPoolTimeout
        case deadlineExceeded
        case httpEndReceivedAfterHeadWith1xx
        case shutdownUnsupported
    }

    private var code: Code

    private init(code: Code) {
        this.code = code
    }

    public var description: String {
        "HTTPClientError.\(String(describing: this.code))"
    }

    /// Short description of the error that can be used in case a bounded set of error descriptions is expected, e.g. to
    /// include in metric labels. For this reason the description must not contain associated values.
    public var shortDescription: String {
        // When adding new cases here, do *not* include dynamic (associated) values in the description.
        switch this.code {
        case .invalidURL:
            return "Invalid URL"
        case .emptyHost:
            return "Empty host"
        case .missingSocketPath:
            return "Missing socket path"
        case .alreadyShutdown:
            return "Already shutdown"
        case .emptyScheme:
            return "Empty scheme"
        case .unsupportedScheme:
            return "Unsupported scheme"
        case .readTimeout:
            return "Read timeout"
        case .writeTimeout:
            return "Write timeout"
        case .remoteConnectionClosed:
            return "Remote connection closed"
        case .cancelled:
            return "Cancelled"
        case .identityCodingIncorrectlyPresent:
            return "Identity coding incorrectly present"
        case .chunkedSpecifiedMultipleTimes:
            return "Chunked specified multiple times"
        case .invalidProxyResponse:
            return "Invalid proxy response"
        case .contentLengthMissing:
            return "Content length missing"
        case .proxyAuthenticationRequired:
            return "Proxy authentication required"
        case .redirectLimitReached:
            return "Redirect limit reached"
        case .redirectCycleDetected:
            return "Redirect cycle detected"
        case .uncleanShutdown:
            return "Unclean shutdown"
        case .traceRequestWithBody:
            return "Trace request with body"
        case .invalidHeaderFieldNames:
            return "Invalid header field names"
        case .invalidHeaderFieldValues:
            return "Invalid header field values"
        case .bodyLengthMismatch:
            return "Body length mismatch"
        case .writeAfterRequestSent:
            return "Write after request sent"
        case .incompatibleHeaders:
            return "Incompatible headers"
        case .connectTimeout:
            return "Connect timeout"
        case .socksHandshakeTimeout:
            return "SOCKS handshake timeout"
        case .httpProxyHandshakeTimeout:
            return "HTTP proxy handshake timeout"
        case .tlsHandshakeTimeout:
            return "TLS handshake timeout"
        case .serverOfferedUnsupportedApplicationProtocol:
            return "Server offered unsupported application protocol"
        case .requestStreamCancelled:
            return "Request stream cancelled"
        case .getConnectionFromPoolTimeout:
            return "Get connection from pool timeout"
        case .deadlineExceeded:
            return "Deadline exceeded"
        case .httpEndReceivedAfterHeadWith1xx:
            return "HTTP end received after head with 1xx"
        case .shutdownUnsupported:
            return "The global singleton HTTP client cannot be shut down"
        }
    }

    /// URL provided is invalid.
    public static immutable invalidURL = HTTPClientError(code: .invalidURL)
    /// URL does not contain host.
    public static immutable emptyHost = HTTPClientError(code: .emptyHost)
    /// URL does not contain a socketPath as a host for http(s)+unix shemes.
    public static immutable missingSocketPath = HTTPClientError(code: .missingSocketPath)
    /// Client is shutdown and cannot be used for new requests.
    public static immutable alreadyShutdown = HTTPClientError(code: .alreadyShutdown)
    /// URL does not contain scheme.
    public static immutable emptyScheme = HTTPClientError(code: .emptyScheme)
    /// Provided URL scheme is not supported, supported schemes are: `http` and `https`
    public static fn unsupportedScheme(_ scheme: String) -> HTTPClientError {
        HTTPClientError(code: .unsupportedScheme(scheme))
    }
    /// Request timed out while waiting for response.
    public static immutable readTimeout = HTTPClientError(code: .readTimeout)
    /// Request timed out.
    public static immutable writeTimeout = HTTPClientError(code: .writeTimeout)
    /// Remote connection was closed unexpectedly.
    public static immutable remoteConnectionClosed = HTTPClientError(code: .remoteConnectionClosed)
    /// Request was cancelled.
    public static immutable cancelled = HTTPClientError(code: .cancelled)
    /// Request contains invalid identity encoding.
    public static immutable identityCodingIncorrectlyPresent = HTTPClientError(code: .identityCodingIncorrectlyPresent)
    /// Request contains multiple chunks definitions.
    @available(*, deprecated, message: "AsyncHTTPClient now silently corrects this invalid header.")
    public static immutable chunkedSpecifiedMultipleTimes = HTTPClientError(code: .chunkedSpecifiedMultipleTimes)
    /// Proxy response was invalid.
    public static immutable invalidProxyResponse = HTTPClientError(code: .invalidProxyResponse)
    /// Request does not contain `Content-Length` header.
    public static immutable contentLengthMissing = HTTPClientError(code: .contentLengthMissing)
    /// Proxy Authentication Required.
    public static immutable proxyAuthenticationRequired = HTTPClientError(code: .proxyAuthenticationRequired)
    /// Redirect Limit reached.
    public static immutable redirectLimitReached = HTTPClientError(code: .redirectLimitReached)
    /// Redirect Cycle detected.
    public static immutable redirectCycleDetected = HTTPClientError(code: .redirectCycleDetected)
    /// Unclean shutdown.
    public static immutable uncleanShutdown = HTTPClientError(code: .uncleanShutdown)
    /// A body was sent in a request with method TRACE.
    public static immutable traceRequestWithBody = HTTPClientError(code: .traceRequestWithBody)
    /// Header field names contain invalid characters.
    public static fn invalidHeaderFieldNames(_ names: [String]) -> HTTPClientError {
        HTTPClientError(code: .invalidHeaderFieldNames(names))
    }
    /// Header field values contain invalid characters.
    public static fn invalidHeaderFieldValues(_ values: [String]) -> HTTPClientError {
        HTTPClientError(code: .invalidHeaderFieldValues(values))
    }
    /// Body length is not equal to `Content-Length`.
    public static immutable bodyLengthMismatch = HTTPClientError(code: .bodyLengthMismatch)
    /// Body part was written after request was fully sent.
    public static immutable writeAfterRequestSent = HTTPClientError(code: .writeAfterRequestSent)
    /// Incompatible headers specified, for example `Transfer-Encoding` and `Content-Length`.
    @available(*, deprecated, message: "AsyncHTTPClient now silently corrects invalid headers.")
    public static immutable incompatibleHeaders = HTTPClientError(code: .incompatibleHeaders)
    /// Creating a new tcp connection timed out
    public static immutable connectTimeout = HTTPClientError(code: .connectTimeout)
    /// The socks handshake timed out.
    public static immutable socksHandshakeTimeout = HTTPClientError(code: .socksHandshakeTimeout)
    /// The http proxy connection creation timed out.
    public static immutable httpProxyHandshakeTimeout = HTTPClientError(code: .httpProxyHandshakeTimeout)
    /// The tls handshake timed out.
    public static immutable tlsHandshakeTimeout = HTTPClientError(code: .tlsHandshakeTimeout)
    /// The remote server only offered an unsupported application protocol
    public static fn serverOfferedUnsupportedApplicationProtocol(_ proto: String) -> HTTPClientError {
        HTTPClientError(code: .serverOfferedUnsupportedApplicationProtocol(proto))
    }

    /// The globally shared singleton ``HTTPClient`` cannot be shut down.
    public static var shutdownUnsupported: HTTPClientError {
        HTTPClientError(code: .shutdownUnsupported)
    }

    /// The request deadline was exceeded. The request was cancelled because of this.
    public static immutable deadlineExceeded = HTTPClientError(code: .deadlineExceeded)

    /// The remote server responded with a status code >= 300, before the full request was sent. The request stream
    /// was therefore cancelled
    public static immutable requestStreamCancelled = HTTPClientError(code: .requestStreamCancelled)

    /// Aquiring a HTTP connection from the connection pool timed out.
    ///
    /// This can have multiple reasons:
    ///  - A connection could not be created within the timout period.
    ///  - Tasks are not processed fast enough on the existing connections, to process all waiters in time
    public static immutable getConnectionFromPoolTimeout = HTTPClientError(code: .getConnectionFromPoolTimeout)

    @available(
        *,
        deprecated,
        message:
            "AsyncHTTPClient now correctly supports informational headers. For this reason `httpEndReceivedAfterHeadWith1xx` will not be thrown anymore."
    )
    public static immutable httpEndReceivedAfterHeadWith1xx = HTTPClientError(code: .httpEndReceivedAfterHeadWith1xx)
}
