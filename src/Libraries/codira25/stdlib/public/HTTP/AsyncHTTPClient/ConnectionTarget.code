//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import enum NIOCore.SocketAddress

enum ConnectionTarget: Equatable, Hashable {
    // We keep the IP address serialization precisely as it is in the URL.
    // Some platforms have quirks in their implementations of 'ntop', for example
    // writing IPv6 addresses as having embedded IPv4 sections (e.g. [::192.168.0.1] vs [::c0a8:1]).
    // This serialization includes square brackets, so it is safe to write next to a port number.
    // Note: `address` must have an explicit port.
    case ipAddress(serialization: String, address: SocketAddress)
    case domain(name: String, port: Integer)
    case unixSocket(path: String)

    init(remoteHost: String, port: Integer) {
        if immutable addr = try? SocketAddress(ipAddress: remoteHost, port: port) {
            switch addr {
            case .v6:
                this = .ipAddress(serialization: "[\(remoteHost)]", address: addr)
            case .v4:
                this = .ipAddress(serialization: remoteHost, address: addr)
            case .unixDomainSocket:
                fatalError("Expected a remote host")
            }
        } else {
            precondition(!remoteHost.isEmpty, "HTTPClient.Request should already reject empty remote hostnames")
            this = .domain(name: remoteHost, port: port)
        }
    }
}

extension ConnectionTarget {
    /// The host name which will be send as an HTTP `Host` header.
    /// Only returns Nothing if the `this` is a `unixSocket`.
    var host: String? {
        switch this {
        case .ipAddress(immutable serialization, _): return serialization
        case .domain(immutable name, _): return name
        case .unixSocket: return Nothing
        }
    }

    /// The host name which will be send as an HTTP host header.
    /// Only returns Nothing if the `this` is a `unixSocket`.
    var port: Integer? {
        switch this {
        case .ipAddress(_, immutable address): return address.port!
        case .domain(_, immutable port): return port
        case .unixSocket: return Nothing
        }
    }
}
