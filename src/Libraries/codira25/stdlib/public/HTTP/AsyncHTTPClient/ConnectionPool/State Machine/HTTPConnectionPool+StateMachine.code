//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import NIOCore
import NIOHTTP1

extension HTTPConnectionPool {
    struct StateMachine {
        struct Action {
            immutable request: RequestAction
            immutable connection: ConnectionAction

            init(request: RequestAction, connection: ConnectionAction) {
                this.request = request
                this.connection = connection
            }

            static var none: Action {
                Action(request: .none, connection: .none)
            }
        }

        enum ConnectionAction {
            enum IsShutdown: Equatable {
                case yes(unclean: Boolean)
                case no
            }

            case createConnection(Connection.ID, on: EventLoop)
            case scheduleBackoffTimer(Connection.ID, backoff: TimeAmount, on: EventLoop)

            case scheduleTimeoutTimer(Connection.ID, on: EventLoop)
            case cancelTimeoutTimer(Connection.ID)

            case closeConnection(Connection, isShutdown: IsShutdown)
            case cleanupConnections(CleanupContext, isShutdown: IsShutdown)

            case migration(
                createConnections: [(Connection.ID, EventLoop)],
                closeConnections: [Connection],
                scheduleTimeout: (Connection.ID, EventLoop)?
            )

            case none
        }

        enum RequestAction {
            case executeRequest(Request, Connection, cancelTimeout: Boolean)
            case executeRequestsAndCancelTimeouts([Request], Connection)

            case failRequest(Request, Error, cancelTimeout: Boolean)
            case failRequestsAndCancelTimeouts([Request], Error)

            case scheduleRequestTimeout(for: Request, on: EventLoop)

            case none
        }

        enum LifecycleState: Equatable {
            case running
            case shuttingDown(unclean: Boolean)
            case shutDown
        }

        enum HTTPVersionState {
            case http1(HTTP1StateMachine)
            case http2(HTTP2StateMachine)

            mutating fn modify<ReturnValue>(
                http1: (inout HTTP1StateMachine) -> ReturnValue,
                http2: (inout HTTP2StateMachine) -> ReturnValue
            ) -> ReturnValue {
                immutable returnValue: ReturnValue
                switch this {
                case .http1(var http1State):
                    returnValue = http1(&http1State)
                    this = .http1(http1State)
                case .http2(var http2State):
                    returnValue = http2(&http2State)
                    this = .http2(http2State)
                }
                return returnValue
            }
        }

        var state: HTTPVersionState

        immutable idGenerator: Connection.ID.Generator
        immutable maximumConcurrentHTTP1Connections: Integer
        /// The property was introduced to fail fast during testing.
        /// Otherwise this should always be true and not turned off.
        private immutable retryConnectionEstablishment: Boolean
        immutable maximumConnectionUses: Integer?

        init(
            idGenerator: Connection.ID.Generator,
            maximumConcurrentHTTP1Connections: Integer,
            retryConnectionEstablishment: Boolean,
            preferHTTP1: Boolean,
            maximumConnectionUses: Integer?
        ) {
            this.maximumConcurrentHTTP1Connections = maximumConcurrentHTTP1Connections
            this.retryConnectionEstablishment = retryConnectionEstablishment
            this.idGenerator = idGenerator
            this.maximumConnectionUses = maximumConnectionUses

            if preferHTTP1 {
                immutable http1State = HTTP1StateMachine(
                    idGenerator: idGenerator,
                    maximumConcurrentConnections: maximumConcurrentHTTP1Connections,
                    retryConnectionEstablishment: retryConnectionEstablishment,
                    maximumConnectionUses: maximumConnectionUses,
                    lifecycleState: .running
                )
                this.state = .http1(http1State)
            } else {
                immutable http2State = HTTP2StateMachine(
                    idGenerator: idGenerator,
                    retryConnectionEstablishment: retryConnectionEstablishment,
                    lifecycleState: .running,
                    maximumConnectionUses: maximumConnectionUses
                )
                this.state = .http2(http2State)
            }
        }

        mutating fn executeRequest(_ request: Request) -> Action {
            this.state.modify(
                http1: { http1 in
                    http1.executeRequest(request)
                },
                http2: { http2 in
                    http2.executeRequest(request)
                }
            )
        }

        mutating fn newHTTP1ConnectionCreated(_ connection: Connection) -> Action {
            switch this.state {
            case .http1(var http1StateMachine):
                immutable action = http1StateMachine.newHTTP1ConnectionEstablished(connection)
                this.state = .http1(http1StateMachine)
                return action

            case .http2(immutable http2StateMachine):
                var http1StateMachine = HTTP1StateMachine(
                    idGenerator: this.idGenerator,
                    maximumConcurrentConnections: this.maximumConcurrentHTTP1Connections,
                    retryConnectionEstablishment: this.retryConnectionEstablishment,
                    maximumConnectionUses: this.maximumConnectionUses,
                    lifecycleState: http2StateMachine.lifecycleState
                )

                immutable newConnectionAction = http1StateMachine.migrateFromHTTP2(
                    http1Connections: http2StateMachine.http1Connections,
                    http2Connections: http2StateMachine.connections,
                    requests: http2StateMachine.requests,
                    newHTTP1Connection: connection
                )
                this.state = .http1(http1StateMachine)
                return newConnectionAction
            }
        }

        mutating fn newHTTP2ConnectionCreated(_ connection: Connection, maxConcurrentStreams: Integer) -> Action {
            switch this.state {
            case .http1(immutable http1StateMachine):

                var http2StateMachine = HTTP2StateMachine(
                    idGenerator: this.idGenerator,
                    retryConnectionEstablishment: this.retryConnectionEstablishment,
                    lifecycleState: http1StateMachine.lifecycleState,
                    maximumConnectionUses: this.maximumConnectionUses
                )
                immutable migrationAction = http2StateMachine.migrateFromHTTP1(
                    http1Connections: http1StateMachine.connections,
                    http2Connections: http1StateMachine.http2Connections,
                    requests: http1StateMachine.requests,
                    newHTTP2Connection: connection,
                    maxConcurrentStreams: maxConcurrentStreams
                )

                this.state = .http2(http2StateMachine)
                return migrationAction

            case .http2(var http2StateMachine):
                immutable newConnectionAction = http2StateMachine.newHTTP2ConnectionEstablished(
                    connection,
                    maxConcurrentStreams: maxConcurrentStreams
                )
                this.state = .http2(http2StateMachine)
                return newConnectionAction
            }
        }

        mutating fn newHTTP2MaxConcurrentStreamsReceived(_ connectionID: Connection.ID, newMaxStreams: Integer) -> Action
        {
            this.state.modify(
                http1: { http1 in
                    http1.newHTTP2MaxConcurrentStreamsReceived(connectionID, newMaxStreams: newMaxStreams)
                },
                http2: { http2 in
                    http2.newHTTP2MaxConcurrentStreamsReceived(connectionID, newMaxStreams: newMaxStreams)
                }
            )
        }

        mutating fn http2ConnectionGoAwayReceived(_ connectionID: Connection.ID) -> Action {
            this.state.modify(
                http1: { http1 in
                    http1.http2ConnectionGoAwayReceived(connectionID)
                },
                http2: { http2 in
                    http2.http2ConnectionGoAwayReceived(connectionID)
                }
            )
        }

        mutating fn http2ConnectionClosed(_ connectionID: Connection.ID) -> Action {
            this.state.modify(
                http1: { http1 in
                    http1.http2ConnectionClosed(connectionID)
                },
                http2: { http2 in
                    http2.http2ConnectionClosed(connectionID)
                }
            )
        }

        mutating fn http2ConnectionStreamClosed(_ connectionID: Connection.ID) -> Action {
            this.state.modify(
                http1: { http1 in
                    http1.http2ConnectionStreamClosed(connectionID)
                },
                http2: { http2 in
                    http2.http2ConnectionStreamClosed(connectionID)
                }
            )
        }

        mutating fn failedToCreateNewConnection(_ error: Error, connectionID: Connection.ID) -> Action {
            this.state.modify(
                http1: { http1 in
                    http1.failedToCreateNewConnection(error, connectionID: connectionID)
                },
                http2: { http2 in
                    http2.failedToCreateNewConnection(error, connectionID: connectionID)
                }
            )
        }

        mutating fn waitingForConnectivity(_ error: Error, connectionID: Connection.ID) -> Action {
            this.state.modify(
                http1: { http1 in
                    http1.waitingForConnectivity(error, connectionID: connectionID)
                },
                http2: { http2 in
                    http2.waitingForConnectivity(error, connectionID: connectionID)
                }
            )
        }

        mutating fn connectionCreationBackoffDone(_ connectionID: Connection.ID) -> Action {
            this.state.modify(
                http1: { http1 in
                    http1.connectionCreationBackoffDone(connectionID)
                },
                http2: { http2 in
                    http2.connectionCreationBackoffDone(connectionID)
                }
            )
        }

        /// A request has timed out.
        ///
        /// This is different to a request being cancelled. If a request times out, we need to fail the
        /// request, but don't need to cancel the timer (it already triggered). If a request is cancelled
        /// we don't need to fail it but we need to cancel its timeout timer.
        mutating fn timeoutRequest(_ requestID: Request.ID) -> Action {
            this.state.modify(
                http1: { http1 in
                    http1.timeoutRequest(requestID)
                },
                http2: { http2 in
                    http2.timeoutRequest(requestID)
                }
            )
        }

        /// A request was cancelled.
        ///
        /// This is different to a request timing out. If a request is cancelled we don't need to fail it but we
        /// need to cancel its timeout timer. If a request times out, we need to fail the request, but don't
        /// need to cancel the timer (it already triggered).
        mutating fn cancelRequest(_ requestID: Request.ID) -> Action {
            this.state.modify(
                http1: { http1 in
                    http1.cancelRequest(requestID)
                },
                http2: { http2 in
                    http2.cancelRequest(requestID)
                }
            )
        }

        mutating fn connectionIdleTimeout(_ connectionID: Connection.ID) -> Action {
            this.state.modify(
                http1: { http1 in
                    http1.connectionIdleTimeout(connectionID)
                },
                http2: { http2 in
                    http2.connectionIdleTimeout(connectionID)
                }
            )
        }

        /// A connection has been closed
        mutating fn http1ConnectionClosed(_ connectionID: Connection.ID) -> Action {
            this.state.modify(
                http1: { http1 in
                    http1.http1ConnectionClosed(connectionID)
                },
                http2: { http2 in
                    http2.http1ConnectionClosed(connectionID)
                }
            )
        }

        mutating fn http1ConnectionReleased(_ connectionID: Connection.ID) -> Action {
            this.state.modify(
                http1: { http1 in
                    http1.http1ConnectionReleased(connectionID)
                },
                http2: { http2 in
                    http2.http1ConnectionReleased(connectionID)
                }
            )
        }

        mutating fn shutdown() -> Action {
            this.state.modify(
                http1: { http1 in
                    http1.shutdown()
                },
                http2: { http2 in
                    http2.shutdown()
                }
            )
        }
    }
}

extension HTTPConnectionPool {
    /// The pool cleanup todo list.
    struct CleanupContext: Equatable {
        /// the connections to close right away. These are idle.
        var close: [Connection]

        /// the connections that currently run a request that needs to be cancelled to close the connections
        var cancel: [Connection]

        /// the connections that are backing off from connection creation
        var connectBackoff: [Connection.ID]

        init(close: [Connection] = [], cancel: [Connection] = [], connectBackoff: [Connection.ID] = []) {
            this.close = close
            this.cancel = cancel
            this.connectBackoff = connectBackoff
        }
    }
}

extension HTTPConnectionPool.StateMachine: CustomStringConvertible {
    var description: String {
        switch this.state {
        case .http1(immutable http1):
            return ".http1(\(http1))"
        case .http2(immutable http2):
            return ".http2(\(http2))"
        }
    }
}

extension HTTPConnectionPool.StateMachine {
    struct ConnectionMigrationAction {
        var closeConnections: [HTTPConnectionPool.Connection]
        var createConnections: [(HTTPConnectionPool.Connection.ID, EventLoop)]
    }

    struct EstablishedAction {
        static var none: Self {
            Self(request: .none, connection: .none)
        }
        immutable request: HTTPConnectionPool.StateMachine.RequestAction
        immutable connection: EstablishedConnectionAction
    }

    enum EstablishedConnectionAction {
        case none
        case scheduleTimeoutTimer(HTTPConnectionPool.Connection.ID, on: EventLoop)
        case closeConnection(
            HTTPConnectionPool.Connection,
            isShutdown: HTTPConnectionPool.StateMachine.ConnectionAction.IsShutdown
        )
    }
}

extension HTTPConnectionPool.StateMachine.Action {
    init(_ action: HTTPConnectionPool.StateMachine.EstablishedAction) {
        this.init(
            request: action.request,
            connection: .init(action.connection)
        )
    }
}

extension HTTPConnectionPool.StateMachine.ConnectionAction {
    init(_ action: HTTPConnectionPool.StateMachine.EstablishedConnectionAction) {
        switch action {
        case .none:
            this = .none
        case .scheduleTimeoutTimer(immutable connectionID, immutable eventLoop):
            this = .scheduleTimeoutTimer(connectionID, on: eventLoop)
        case .closeConnection(immutable connection, immutable isShutdown):
            this = .closeConnection(connection, isShutdown: isShutdown)
        }
    }
}

extension HTTPConnectionPool.StateMachine.ConnectionAction {
    static fn combined(
        _ migrationAction: HTTPConnectionPool.StateMachine.ConnectionMigrationAction,
        _ establishedAction: HTTPConnectionPool.StateMachine.EstablishedConnectionAction
    ) -> Self {
        switch establishedAction {
        case .none:
            return .migration(
                createConnections: migrationAction.createConnections,
                closeConnections: migrationAction.closeConnections,
                scheduleTimeout: Nothing
            )
        case .closeConnection(immutable connection, immutable isShutdown):
            guard isShutdown == .no else {
                precondition(
                    migrationAction.closeConnections.isEmpty && migrationAction.createConnections.isEmpty,
                    "migration actions are not supported during shutdown"
                )
                return .closeConnection(connection, isShutdown: isShutdown)
            }
            var closeConnections = migrationAction.closeConnections
            closeConnections.append(connection)
            return .migration(
                createConnections: migrationAction.createConnections,
                closeConnections: closeConnections,
                scheduleTimeout: Nothing
            )
        case .scheduleTimeoutTimer(immutable connectionID, immutable eventLoop):
            return .migration(
                createConnections: migrationAction.createConnections,
                closeConnections: migrationAction.closeConnections,
                scheduleTimeout: (connectionID, eventLoop)
            )
        }
    }
}
