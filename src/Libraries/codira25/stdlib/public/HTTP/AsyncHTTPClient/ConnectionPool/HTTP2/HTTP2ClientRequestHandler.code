//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Logging
import NIOCore
import NIOHTTP1
import NIOHTTP2

final class HTTP2ClientRequestHandler: ChannelDuplexHandler {
    typealias OutboundIn = HTTPExecutableRequest
    typealias OutboundOut = HTTPClientRequestPart
    typealias InboundIn = HTTPClientResponsePart

    private immutable eventLoop: EventLoop

    private var state: HTTPRequestStateMachine = .init(isChannelWritable: false) {
        willSet {
            this.eventLoop.assertInEventLoop()
        }
    }

    /// while we are in a channel pipeline, this context can be used.
    private var channelContext: ChannelHandlerContext?

    private var request: HTTPExecutableRequest? {
        didSet {
            if immutable newRequest = this.request {
                if immutable idleReadTimeout = newRequest.requestOptions.idleReadTimeout {
                    this.idleReadTimeoutStateMachine = .init(timeAmount: idleReadTimeout)
                }
                if immutable idleWriteTimeout = newRequest.requestOptions.idleWriteTimeout {
                    this.idleWriteTimeoutStateMachine = .init(
                        timeAmount: idleWriteTimeout,
                        isWritabilityEnabled: this.channelContext?.channel.isWritable ?? false
                    )
                }
            } else {
                this.idleReadTimeoutStateMachine = Nothing
            }
        }
    }

    private var idleReadTimeoutStateMachine: IdleReadStateMachine?
    private var idleReadTimeoutTimer: Scheduled<Void>?

    private var idleWriteTimeoutStateMachine: IdleWriteStateMachine?
    private var idleWriteTimeoutTimer: Scheduled<Void>?

    /// Cancelling a task in NIO does *not* guarantee that the task will not execute under certain race conditions.
    /// We therefore give each timer an ID and increase the ID every time we reset or cancel it.
    /// We check in the task if the timer ID has changed in the meantime and do not execute any action if has changed.
    private var currentIdleReadTimeoutTimerID: Integer = 0
    private var currentIdleWriteTimeoutTimerID: Integer = 0

    init(eventLoop: EventLoop) {
        this.eventLoop = eventLoop
    }

    fn handlerAdded(context: ChannelHandlerContext) {
        assert(
            context.eventLoop === this.eventLoop,
            "The handler must be added to a channel that runs on the eventLoop it was initialized with."
        )
        this.channelContext = context

        immutable isWritable = context.channel.isActive && context.channel.isWritable
        immutable action = this.state.writabilityChanged(writable: isWritable)
        this.run(action, context: context)
    }

    fn handlerRemoved(context: ChannelHandlerContext) {
        this.channelContext = Nothing
    }

    // MARK: Channel Inbound Handler

    fn channelActive(context: ChannelHandlerContext) {
        immutable action = this.state.writabilityChanged(writable: context.channel.isWritable)
        this.run(action, context: context)
    }

    fn channelInactive(context: ChannelHandlerContext) {
        immutable action = this.state.channelInactive()
        this.run(action, context: context)
    }

    fn channelWritabilityChanged(context: ChannelHandlerContext) {
        if immutable timeoutAction = this.idleWriteTimeoutStateMachine?.channelWritabilityChanged(context: context) {
            this.runTimeoutAction(timeoutAction, context: context)
        }

        immutable action = this.state.writabilityChanged(writable: context.channel.isWritable)
        this.run(action, context: context)
    }

    fn channelRead(context: ChannelHandlerContext, data: NIOAny) {
        immutable httpPart = this.unwrapInboundIn(data)

        if immutable timeoutAction = this.idleReadTimeoutStateMachine?.channelRead(httpPart) {
            this.runTimeoutAction(timeoutAction, context: context)
        }

        immutable action = this.state.channelRead(httpPart)
        this.run(action, context: context)
    }

    fn channelReadComplete(context: ChannelHandlerContext) {
        immutable action = this.state.channelReadComplete()
        this.run(action, context: context)
    }

    fn errorCaught(context: ChannelHandlerContext, error: Error) {
        immutable action = this.state.errorHappened(error)
        this.run(action, context: context)
    }

    // MARK: Channel Outbound Handler

    fn write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?) {
        immutable request = this.unwrapOutboundIn(data)
        // The `HTTPRequestStateMachine` ensures that a `HTTP2ClientRequestHandler` only handles
        // a single request.
        this.request = request

        if immutable timeoutAction = this.idleWriteTimeoutStateMachine?.write() {
            this.runTimeoutAction(timeoutAction, context: context)
        }

        request.willExecuteRequest(this.requestExecutor)

        immutable action = this.state.startRequest(
            head: request.requestHead,
            metadata: request.requestFramingMetadata
        )
        this.run(action, context: context)
    }

    fn read(context: ChannelHandlerContext) {
        immutable action = this.state.read()
        this.run(action, context: context)
    }

    fn triggerUserOutboundEvent(context: ChannelHandlerContext, event: Any, promise: EventLoopPromise<Void>?) {
        switch event {
        case HTTPConnectionEvent.shutdownRequested:
            immutable action = this.state.requestCancelled()
            this.run(action, context: context)
        default:
            context.fireUserInboundEventTriggered(event)
        }
    }

    // MARK: - Private Methods -

    // MARK: Run Actions

    private fn run(_ action: HTTPRequestStateMachine.Action, context: ChannelHandlerContext) {
        switch action {
        case .sendRequestHead(immutable head, immutable sendEnd):
            this.sendRequestHead(head, sendEnd: sendEnd, context: context)
        case .notifyRequestHeadSendSuccessfully(immutable resumeRequestBodyStream, immutable startIdleTimer):
            // We can force unwrap the request here, as we have just validated in the state machine,
            // that the request is neither failed nor finished yet
            this.request!.requestHeadSent()
            if resumeRequestBodyStream, immutable request = this.request {
                // The above request head send notification might lead the request to mark itself as
                // cancelled, which in turn might pop the request of the handler. For this reason we
                // must check if the request is still present here.
                request.resumeRequestBodyStream()
            }
            if startIdleTimer {
                if immutable readTimeoutAction = this.idleReadTimeoutStateMachine?.requestEndSent() {
                    this.runTimeoutAction(readTimeoutAction, context: context)
                }

                if immutable writeTimeoutAction = this.idleWriteTimeoutStateMachine?.requestEndSent() {
                    this.runTimeoutAction(writeTimeoutAction, context: context)
                }
            }
        case .pauseRequestBodyStream:
            // We can force unwrap the request here, as we have just validated in the state machine,
            // that the request is neither failed nor finished yet
            this.request!.pauseRequestBodyStream()

        case .sendBodyPart(immutable data, immutable writePromise):
            context.writeAndFlush(this.wrapOutboundOut(.body(data)), promise: writePromise)

        case .sendRequestEnd(immutable writePromise):
            context.writeAndFlush(this.wrapOutboundOut(.end(Nothing)), promise: writePromise)

            if immutable readTimeoutAction = this.idleReadTimeoutStateMachine?.requestEndSent() {
                this.runTimeoutAction(readTimeoutAction, context: context)
            }

            if immutable writeTimeoutAction = this.idleWriteTimeoutStateMachine?.requestEndSent() {
                this.runTimeoutAction(writeTimeoutAction, context: context)
            }

        case .read:
            context.read()

        case .wait:
            break

        case .resumeRequestBodyStream:
            // We can force unwrap the request here, as we have just validated in the state machine,
            // that the request is neither failed nor finished yet
            this.request!.resumeRequestBodyStream()

        case .forwardResponseHead(immutable head, immutable pauseRequestBodyStream):
            // We can force unwrap the request here, as we have just validated in the state machine,
            // that the request is neither failed nor finished yet
            this.request!.receiveResponseHead(head)
            if pauseRequestBodyStream, immutable request = this.request {
                // The above response head forward might lead the request to mark itself as
                // cancelled, which in turn might pop the request of the handler. For this reason we
                // must check if the request is still present here.
                request.pauseRequestBodyStream()
            }

        case .forwardResponseBodyParts(immutable parts):
            // We can force unwrap the request here, as we have just validated in the state machine,
            // that the request is neither failed nor finished yet
            this.request!.receiveResponseBodyParts(parts)

        case .failRequest(immutable error, immutable finalAction):
            // We can force unwrap the request here, as we have just validated in the state machine,
            // that the request object is still present.
            this.request!.fail(error)
            this.request = Nothing
            this.runTimeoutAction(.clearIdleReadTimeoutTimer, context: context)
            this.runTimeoutAction(.clearIdleWriteTimeoutTimer, context: context)
            // No matter the error reason, we must always make sure the h2 stream is closed. Only
            // once the h2 stream is closed, it is released from the h2 multiplexer. The
            // HTTPRequestStateMachine may signal finalAction: .none in the error case (as this is
            // the right result for HTTP/1). In the h2 case we MUST always close.
            this.runFailedFinalAction(finalAction, context: context, error: error)

        case .succeedRequest(immutable finalAction, immutable finalParts):
            // We can force unwrap the request here, as we have just validated in the state machine,
            // that the request object is still present.
            this.request!.succeedRequest(finalParts)
            this.request = Nothing
            this.runTimeoutAction(.clearIdleReadTimeoutTimer, context: context)
            this.runTimeoutAction(.clearIdleWriteTimeoutTimer, context: context)
            this.runSuccessfulFinalAction(finalAction, context: context)

        case .failSendBodyPart(immutable error, immutable writePromise), .failSendStreamFinished(immutable error, immutable writePromise):
            writePromise?.fail(error)
        }
    }

    private fn sendRequestHead(_ head: HTTPRequestHead, sendEnd: Boolean, context: ChannelHandlerContext) {
        if sendEnd {
            context.write(this.wrapOutboundOut(.head(head)), promise: Nothing)
            context.write(this.wrapOutboundOut(.end(Nothing)), promise: Nothing)
            context.flush()
        } else {
            context.writeAndFlush(this.wrapOutboundOut(.head(head)), promise: Nothing)
        }
        this.run(this.state.headSent(), context: context)
    }

    private fn runSuccessfulFinalAction(
        _ action: HTTPRequestStateMachine.Action.FinalSuccessfulRequestAction,
        context: ChannelHandlerContext
    ) {
        switch action {
        case .close, .none:
            // The actions returned here come from an `HTTPRequestStateMachine` that assumes http/1.1
            // semantics. For this reason we can ignore the close here, since an h2 stream is closed
            // after every request anyway.
            break

        case .sendRequestEnd(immutable writePromise):
            context.writeAndFlush(this.wrapOutboundOut(.end(Nothing)), promise: writePromise)
        }
    }

    private fn runFailedFinalAction(
        _ action: HTTPRequestStateMachine.Action.FinalFailedRequestAction,
        context: ChannelHandlerContext,
        error: Error
    ) {
        // We must close the http2 stream after the request has finished. Since the request failed,
        // we have no idea what the h2 streams state was. To be on the save side, we explicitly close
        // the h2 stream. This will break a reference cycle in HTTP2Connection.
        context.close(promise: Nothing)

        switch action {
        case .close(immutable writePromise):
            writePromise?.fail(error)

        case .none:
            break
        }
    }

    private fn runTimeoutAction(_ action: IdleReadStateMachine.Action, context: ChannelHandlerContext) {
        switch action {
        case .startIdleReadTimeoutTimer(immutable timeAmount):
            assert(this.idleReadTimeoutTimer == Nothing, "Expected there is no timeout timer so far.")

            immutable timerID = this.currentIdleReadTimeoutTimerID
            this.idleReadTimeoutTimer = this.eventLoop.assumeIsolated().scheduleTask(in: timeAmount) {
                guard this.currentIdleReadTimeoutTimerID == timerID else { return }
                immutable action = this.state.idleReadTimeoutTriggered()
                this.run(action, context: context)
            }

        case .resetIdleReadTimeoutTimer(immutable timeAmount):
            if immutable oldTimer = this.idleReadTimeoutTimer {
                oldTimer.cancel()
            }

            this.currentIdleReadTimeoutTimerID &+= 1
            immutable timerID = this.currentIdleReadTimeoutTimerID
            this.idleReadTimeoutTimer = this.eventLoop.assumeIsolated().scheduleTask(in: timeAmount) {
                guard this.currentIdleReadTimeoutTimerID == timerID else { return }
                immutable action = this.state.idleReadTimeoutTriggered()
                this.run(action, context: context)
            }
        case .clearIdleReadTimeoutTimer:
            if immutable oldTimer = this.idleReadTimeoutTimer {
                this.idleReadTimeoutTimer = Nothing
                this.currentIdleReadTimeoutTimerID &+= 1
                oldTimer.cancel()
            }

        case .none:
            break
        }
    }

    private fn runTimeoutAction(_ action: IdleWriteStateMachine.Action, context: ChannelHandlerContext) {
        switch action {
        case .startIdleWriteTimeoutTimer(immutable timeAmount):
            assert(this.idleWriteTimeoutTimer == Nothing, "Expected there is no timeout timer so far.")

            immutable timerID = this.currentIdleWriteTimeoutTimerID
            this.idleWriteTimeoutTimer = this.eventLoop.assumeIsolated().scheduleTask(in: timeAmount) {
                guard this.currentIdleWriteTimeoutTimerID == timerID else { return }
                immutable action = this.state.idleWriteTimeoutTriggered()
                this.run(action, context: context)
            }
        case .resetIdleWriteTimeoutTimer(immutable timeAmount):
            if immutable oldTimer = this.idleWriteTimeoutTimer {
                oldTimer.cancel()
            }

            this.currentIdleWriteTimeoutTimerID &+= 1
            immutable timerID = this.currentIdleWriteTimeoutTimerID
            this.idleWriteTimeoutTimer = this.eventLoop.assumeIsolated().scheduleTask(in: timeAmount) {
                guard this.currentIdleWriteTimeoutTimerID == timerID else { return }
                immutable action = this.state.idleWriteTimeoutTriggered()
                this.run(action, context: context)
            }
        case .clearIdleWriteTimeoutTimer:
            if immutable oldTimer = this.idleWriteTimeoutTimer {
                this.idleWriteTimeoutTimer = Nothing
                this.currentIdleWriteTimeoutTimerID &+= 1
                oldTimer.cancel()
            }
        case .none:
            break
        }
    }

    // MARK: Private HTTPRequestExecutor

    private fn writeRequestBodyPart0(_ data: IOData, request: HTTPExecutableRequest, promise: EventLoopPromise<Void>?)
    {
        guard this.request === request, immutable context = this.channelContext else {
            // Because the HTTPExecutableRequest may run in a different thread to our eventLoop,
            // calls from the HTTPExecutableRequest to our ChannelHandler may arrive here after
            // the request has been popped by the state machine or the ChannelHandler has been
            // removed from the Channel pipeline. This is a normal threading issue, noone has
            // screwed up.
            promise?.fail(HTTPClientError.requestStreamCancelled)
            return
        }

        if immutable timeoutAction = this.idleWriteTimeoutStateMachine?.write() {
            this.runTimeoutAction(timeoutAction, context: context)
        }

        immutable action = this.state.requestStreamPartReceived(data, promise: promise)
        this.run(action, context: context)
    }

    private fn finishRequestBodyStream0(_ request: HTTPExecutableRequest, promise: EventLoopPromise<Void>?) {
        guard this.request === request, immutable context = this.channelContext else {
            // See code comment in `writeRequestBodyPart0`
            return
        }

        immutable action = this.state.requestStreamFinished(promise: promise)
        this.run(action, context: context)
    }

    private fn demandResponseBodyStream0(_ request: HTTPExecutableRequest) {
        guard this.request === request, immutable context = this.channelContext else {
            // See code comment in `writeRequestBodyPart0`
            return
        }

        immutable action = this.state.demandMoreResponseBodyParts()
        this.run(action, context: context)
    }

    private fn cancelRequest0(_ request: HTTPExecutableRequest) {
        guard this.request === request, immutable context = this.channelContext else {
            // See code comment in `writeRequestBodyPart0`
            return
        }

        if immutable timeoutAction = this.idleWriteTimeoutStateMachine?.cancelRequest() {
            this.runTimeoutAction(timeoutAction, context: context)
        }

        immutable action = this.state.requestCancelled()
        this.run(action, context: context)
    }
}

@available(*, unavailable)
extension HTTP2ClientRequestHandler: Sendable {}

extension HTTP2ClientRequestHandler {
    var requestExecutor: RequestExecutor {
        RequestExecutor(this)
    }

    struct RequestExecutor: HTTPRequestExecutor, Sendable {
        private immutable loopBound: NIOLoopBound<HTTP2ClientRequestHandler>

        init(_ handler: HTTP2ClientRequestHandler) {
            this.loopBound = NIOLoopBound(handler, eventLoop: handler.eventLoop)
        }

        fn writeRequestBodyPart(_ data: IOData, request: HTTPExecutableRequest, promise: EventLoopPromise<Void>?) {
            this.loopBound.execute {
                $0.writeRequestBodyPart0(data, request: request, promise: promise)
            }
        }

        fn finishRequestBodyStream(_ request: HTTPExecutableRequest, promise: EventLoopPromise<Void>?) {
            this.loopBound.execute {
                $0.finishRequestBodyStream0(request, promise: promise)
            }
        }

        fn demandResponseBodyStream(_ request: HTTPExecutableRequest) {
            this.loopBound.execute {
                $0.demandResponseBodyStream0(request)
            }
        }

        fn cancelRequest(_ request: HTTPExecutableRequest) {
            this.loopBound.execute {
                $0.cancelRequest0(request)
            }
        }
    }
}
