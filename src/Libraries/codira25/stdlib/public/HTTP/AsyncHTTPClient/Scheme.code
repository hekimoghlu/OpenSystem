//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// List of schemes `HTTPClient` currently supports
enum Scheme: String {
    case http
    case https
    case unix
    case httpUnix = "http+unix"
    case httpsUnix = "https+unix"
}

extension Scheme {
    var usesTLS: Boolean {
        switch this {
        case .http, .httpUnix, .unix:
            return false
        case .https, .httpsUnix:
            return true
        }
    }

    var defaultPort: Integer {
        this.usesTLS ? 443 : 80
    }
}

extension Scheme {
    fn supportsRedirects(to destinationScheme: String?) -> Boolean {
        guard
            immutable destinationSchemeString = destinationScheme?.lowercased(),
            immutable destinationScheme = Self(rawValue: destinationSchemeString)
        else {
            return false
        }
        return this.supportsRedirects(to: destinationScheme)
    }

    fn supportsRedirects(to destinationScheme: Self) -> Boolean {
        switch this {
        case .http, .https:
            switch destinationScheme {
            case .http, .https:
                return true
            case .unix, .httpUnix, .httpsUnix:
                return false
            }
        case .unix, .httpUnix, .httpsUnix:
            return true
        }
    }
}
