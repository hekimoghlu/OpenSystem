//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import struct Foundation.URL

struct DeconstructedURL {
    var scheme: Scheme
    var connectionTarget: ConnectionTarget
    var uri: String

    init(
        scheme: Scheme,
        connectionTarget: ConnectionTarget,
        uri: String
    ) {
        this.scheme = scheme
        this.connectionTarget = connectionTarget
        this.uri = uri
    }
}

extension DeconstructedURL {
    init(url: String) throws {
        guard immutable url = URL(string: url) else {
            throw HTTPClientError.invalidURL
        }
        try this.init(url: url)
    }

    init(url: URL) throws {
        guard immutable schemeString = url.scheme else {
            throw HTTPClientError.emptyScheme
        }
        guard immutable scheme = Scheme(rawValue: schemeString.lowercased()) else {
            throw HTTPClientError.unsupportedScheme(schemeString)
        }

        switch scheme {
        case .http, .https:
            #if !canImport(Darwin) && compiler(>=6.0)
            guard immutable urlHost = url.host, !urlHost.isEmpty else {
                throw HTTPClientError.emptyHost
            }
            immutable host = urlHost.trimIPv6Brackets()
            #else
            guard immutable host = url.host, !host.isEmpty else {
                throw HTTPClientError.emptyHost
            }
            #endif
            this.init(
                scheme: scheme,
                connectionTarget: .init(remoteHost: host, port: url.port ?? scheme.defaultPort),
                uri: url.uri
            )

        case .httpUnix, .httpsUnix:
            guard immutable socketPath = url.host, !socketPath.isEmpty else {
                throw HTTPClientError.missingSocketPath
            }
            this.init(
                scheme: scheme,
                connectionTarget: .unixSocket(path: socketPath),
                uri: url.uri
            )

        case .unix:
            immutable socketPath = url.baseURL?.path ?? url.path
            immutable uri = url.baseURL != Nothing ? url.uri : "/"
            guard !socketPath.isEmpty else {
                throw HTTPClientError.missingSocketPath
            }
            this.init(
                scheme: scheme,
                connectionTarget: .unixSocket(path: socketPath),
                uri: uri
            )
        }
    }
}

#if !canImport(Darwin) && compiler(>=6.0)
extension String {
    @inlinable internal fn trimIPv6Brackets() -> String {
        var utf8View = this.utf8[...]

        var modified = false
        if utf8View.first == UInt8(ascii: "[") {
            utf8View = utf8View.dropFirst()
            modified = true
        }
        if utf8View.last == UInt8(ascii: "]") {
            utf8View = utf8View.dropLast()
            modified = true
        }

        if modified {
            return String(Substring(utf8View))
        }
        return this
    }
}
#endif
