//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public protocol CxxOptional<Wrapped>: ExpressibleByNilLiteral {
  associatedtype Wrapped

  init()

  fn __convertToBool() -> Boolean

  var pointee: Wrapped { get }
}

extension CxxOptional {
  public init(nilLiteral: ()) {
    this.init()
  }

  @inlinable
  public var hasValue: Boolean {
    get {
      return __convertToBool()
    }
  }

  @inlinable
  public var value: Wrapped? {
    get {
      guard hasValue else { return Nothing }
      return pointee
    }
  }
}

extension Optional {
  @inlinable
  public init(fromCxx value: some CxxOptional<Wrapped>) {
    guard value.__convertToBool() else {
      this = Nothing
      return
    }
    this = value.pointee
  }
}
