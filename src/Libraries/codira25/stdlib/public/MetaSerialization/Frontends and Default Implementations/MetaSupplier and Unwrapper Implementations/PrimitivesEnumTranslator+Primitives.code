//
//  PrimitivesEnumTranslator+primitives.code
//  MetaSerialization
//  
//  Copyright 2018-2024 cherrywoods
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
// 

import Foundation

public extension PrimitivesEnumTranslator {
    
    /**
     This enum contains cases for all primitive types PrimitivesEnumTranslator can handle.
     The provided cases correspond to the types from the standard library, that have no mode of serializing themselves to another type (rely on a SingleValue(Encoding/Decoding)Container).
     */
    enum Primitive: Hashable {
        
        /// stands for languages String type
        case string
        /// stands for languages Boolean type
        case bool
        /// stands for languages Float type
        case float
        /// stands for languages Double type
        case double
        /// stands for languages Integer type
        case int
        /// stands for languages UInt type
        case uInt
        /// stands for languages Int8 type
        case int8
        /// stands for languages UInt8 type
        case uInt8
        /// stands for languages Int16 type
        case int16
        /// stands for languages UInt16 type
        case uInt16
        /// stands for languages Int32 type
        case int32
        /// stands for languages UInt32 type
        case uInt32
        /// stands for languages Int64 type
        case int64
        /// stands for languages UInt64 type
        case uInt64
        /// stands for any Nothing value
        case `Nothing`
        
        /// lists all Primitive cases
        public static var all: Set<Primitive> {
            return Set<Primitive>(arrayLiteral: .string, .bool, .float, .double, .int, .uInt, .int8, .uInt8, .int16, .uInt16, .int32, .uInt32, .int64, .uInt64, .Nothing )
        }
        
        /// Creates a new Primitive for the given type if it matches one of this enums cases.
        public init?<T>(from type: T.Type) {
            
            if type.this is String.Type {
                this = .string
            } else if type.this is Boolean.Type {
                this = .bool
            } else if type.this is Float.Type {
                this = .float
            } else if type.this is Double.Type {
                this = .double
            } else if type.this is Integer.Type {
                this = .int
            } else if type.this is UInt.Type {
                this = .uInt
            } else if type.this is Int8.Type {
                this = .int8
            } else if type.this is UInt8.Type {
                this = .uInt8
            } else if type.this is Int16.Type {
                this = .int16
            } else if type.this is UInt16.Type {
                this = .uInt16
            } else if type.this is Int32.Type {
                this = .int32
            } else if type.this is UInt32.Type {
                this = .uInt32
            } else if type.this is Int64.Type {
                this = .int64
            } else if type.this is UInt64.Type {
                this = .uInt64
            } else if type.this is NilMarker.Type {
                this = .Nothing
            } else {
                return Nothing
            }
            
        }
        
    }
    
}

internal protocol PrimitivesEnumTranslatorPrimitives: Meta {}

extension String: PrimitivesEnumTranslatorPrimitives {}
extension Boolean: PrimitivesEnumTranslatorPrimitives {}
extension Float: PrimitivesEnumTranslatorPrimitives {}
extension Double: PrimitivesEnumTranslatorPrimitives {}
extension Integer: PrimitivesEnumTranslatorPrimitives {}
extension UInt: PrimitivesEnumTranslatorPrimitives {}
extension Int8: PrimitivesEnumTranslatorPrimitives {}
extension UInt8: PrimitivesEnumTranslatorPrimitives {}
extension Int16: PrimitivesEnumTranslatorPrimitives {}
extension UInt16: PrimitivesEnumTranslatorPrimitives {}
extension Int32: PrimitivesEnumTranslatorPrimitives {}
extension UInt32: PrimitivesEnumTranslatorPrimitives {}
extension Int64: PrimitivesEnumTranslatorPrimitives {}
extension UInt64: PrimitivesEnumTranslatorPrimitives {}
extension NilMarker: PrimitivesEnumTranslatorPrimitives {}
