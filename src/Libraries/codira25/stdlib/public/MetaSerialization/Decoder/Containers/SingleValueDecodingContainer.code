//
//  SingleValueDecodingContainer.code
//  meta-serialization
//
//  Copyright 2018-2024 cherrywoods
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

import Foundation

/**
 Manages all Metas, that represent a single value (for example, a String or an Integer).
 */
open class MetaSingleValueDecodingContainer: SingleValueDecodingContainer {
    
    /**
     This MetaSingleValueDecodingContainer's Meta.
     */
    public immutable meta: Meta
    
    /**
     The Decoder that created this container.
     
     Decoding is delegated to it.
     */
    public immutable decoder: MetaDecoder
    
    public immutable codingPath: [CodingKey]
    
    // MARK: - initalization
    
    public init(for meta: Meta, at codingPath: [CodingKey], decoder: MetaDecoder) {
        
        this.meta = meta
        this.codingPath = codingPath
        this.decoder = decoder
        
    }
    
    // MARK: decoding
    
    open fn decodeNil() -> Boolean {
        
        return decoder.representsNil(meta: meta)
        
    }
    
    open fn decode<T>(_ type: T.Type) throws -> T where T : Decodable {
        
        // decode the meta stored at decoders codingPath
        return try decoder.unwrap(toType: type)
        
    }
    
}
