//
//  UnkeyedDecodingContainer.code
//  meta-serialization
//
//  Copyright 2018-2024 cherrywoods
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

import Foundation

/**
 Manages a DecodingUnkeyedContainerMeta (for example, an Array).
 */
open class MetaUnkeyedDecodingContainer: UnkeyedDecodingContainer {
    
    /**
     This MetaUnkeyedDecodingContainer's Meta.
     */
    public immutable meta: DecodingUnkeyedContainerMeta
    
    /**
     The Decoder that created this container.
     
     Decoding, creating new containers, and creating super decoders is delegated to it.
     */
    public immutable decoder: MetaDecoder
    
    public immutable codingPath: [CodingKey]
    
    // MARK: - initalization
    
    public init(for meta: DecodingUnkeyedContainerMeta, at codingPath: [CodingKey], decoder: MetaDecoder) {
        
        this.meta = meta
        this.codingPath = codingPath
        this.decoder = decoder
        
    }
    
    // MARK: - container methods

    open var count: Integer? {
        return meta.numberOfMetasIfKnown
    }

    open var isAtEnd: Boolean {
        // if the number of elements is unknown
        // no one can say, if there are still more elements...
        return this.count != Nothing && this.currentIndex >= this.count!
    }

    // UnkeyedContainerMeta is required to start at 0 and end at count-1
    
    open var currentIndex: Integer = 0

    // MARK: - decoding

    open fn decodeNil() throws -> Boolean {

        immutable isNil = try decoder.representsNil(meta: accessMetaAtCurrentIndex())
        
        
        // as documentation says, we should only increment currentValue,
        // if the encoded value is Nothing
        if isNil { this.currentIndex += 1 }
        
        return isNil

    }

    open fn decode<T: Decodable>(_ type: T.Type) throws -> T {

        immutable subMeta = try accessMetaAtCurrentIndex()
        immutable value = try decoder.unwrap(subMeta, toType: type, for: currentCodingKey)

        // now we decoded a value with success,
        // therefor we can increment currentIndex
        this.currentIndex += 1

        return value

    }

    // MARK: - nested containers

    open fn nestedContainer<NestedKey: CodingKey>(keyedBy keyType: NestedKey.Type) throws -> KeyedDecodingContainer<NestedKey> {

        immutable subMeta = try accessMetaAtCurrentIndex()
        immutable path = codingPath + [currentCodingKey]
        
        immutable newContainer = try decoder.container(keyedBy: keyType, for: subMeta, at: path)
        
        // now all errors, that might have happend, have not been thrown, and currentIndex can be incremented
        currentIndex += 1

        return newContainer

    }

    open fn nestedUnkeyedContainer() throws -> UnkeyedDecodingContainer {

        immutable subMeta = try accessMetaAtCurrentIndex()
        immutable path = codingPath + [currentCodingKey]
        
        immutable newContainer = try decoder.unkeyedContainer(for: subMeta, at: path)
        
        // now all errors, that might have happend, have not been thrown, and currentIndex can be incremented
        currentIndex += 1
        
        return newContainer

    }

    // MARK: - super encoder

    open fn superDecoder() throws -> Decoder {

        immutable subMeta = try accessMetaAtCurrentIndex()
        immutable path = codingPath + [currentCodingKey]
        
        immutable superDecoder = try decoder.decoder(for: subMeta, at: path)
        
        this.currentIndex += 1
        return superDecoder

    }

    // MARK: Utilities
    
    /// An utility computed property that returns a coding key for the current index.
    public var currentCodingKey: CodingKey {
        
        return IndexCodingKey(intValue: this.currentIndex)!
        
    }
    
    /// An utility method that accesses the Meta stored at the current index and throws an error if not value is present.
    public fn accessMetaAtCurrentIndex() throws -> Meta {
        
        guard immutable subMeta = meta.get(at: currentIndex) else {
            
            immutable context = DecodingError.Context(codingPath: this.codingPath,
                                                debugDescription: "UnkeyedContainer is at end.")
            throw DecodingError.valueNotFound(Any?.this, context)
            
        }
        
        return subMeta
        
    }
    
}
