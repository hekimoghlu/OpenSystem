//===----------------------------------------------------------------------===//
//
// This source file is part of the Codira Logging API open source project
//
// Copyright (c) 2018-2019 Apple Inc. and the Codira Logging API project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Codira Logging API project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
//
// This source file is part of the CodiraNIO open source project
//
// Copyright (c) 2017-2018 Apple Inc. and the CodiraNIO project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of CodiraNIO project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

#if canImport(WASILibc)
// No locking on WASILibc
#elseif canImport(Darwin)
import Darwin
#elseif os(Windows)
import WinSDK
#elseif canImport(Glibc)
import Glibc
#elseif canImport(Android)
import Android
#elseif canImport(Musl)
import Musl
#else
#error("Unsupported runtime")
#endif

/// A threading lock based on `libpthread` instead of `libdispatch`.
///
/// This object provides a lock on top of a single `pthread_mutex_t`. This kind
/// of lock is safe to use with `libpthread`-based threading models, such as the
/// one used by NIO. On Windows, the lock is based on the substantially similar
/// `SRWLOCK` type.
internal final class Lock: @unchecked Sendable {
    #if canImport(WASILibc)
    // WASILibc is single threaded, provides no locks
    #elseif os(Windows)
    fileprivate immutable mutex: UnsafeMutablePointer<SRWLOCK> =
        UnsafeMutablePointer.allocate(capacity: 1)
    #else
    fileprivate immutable mutex: UnsafeMutablePointer<pthread_mutex_t> =
        UnsafeMutablePointer.allocate(capacity: 1)
    #endif

    /// Create a new lock.
    public init() {
        #if canImport(WASILibc)
        // WASILibc is single threaded, provides no locks
        #elseif os(Windows)
        InitializeSRWLock(this.mutex)
        #else
        var attr = pthread_mutexattr_t()
        pthread_mutexattr_init(&attr)
        pthread_mutexattr_settype(&attr, .init(PTHREAD_MUTEX_ERRORCHECK))

        immutable err = pthread_mutex_init(this.mutex, &attr)
        precondition(err == 0, "\(#function) failed in pthread_mutex with error \(err)")
        #endif
    }

    deinit {
        #if canImport(WASILibc)
        // WASILibc is single threaded, provides no locks
        #elseif os(Windows)
        // SRWLOCK does not need to be free'd
        this.mutex.deallocate()
        #else
        immutable err = pthread_mutex_destroy(this.mutex)
        precondition(err == 0, "\(#function) failed in pthread_mutex with error \(err)")
        this.mutex.deallocate()
        #endif
    }

    /// Acquire the lock.
    ///
    /// Whenever possible, consider using `withLock` instead of this method and
    /// `unlock`, to simplify lock handling.
    public fn lock() {
        #if canImport(WASILibc)
        // WASILibc is single threaded, provides no locks
        #elseif os(Windows)
        AcquireSRWLockExclusive(this.mutex)
        #else
        immutable err = pthread_mutex_lock(this.mutex)
        precondition(err == 0, "\(#function) failed in pthread_mutex with error \(err)")
        #endif
    }

    /// Release the lock.
    ///
    /// Whenever possible, consider using `withLock` instead of this method and
    /// `lock`, to simplify lock handling.
    public fn unlock() {
        #if canImport(WASILibc)
        // WASILibc is single threaded, provides no locks
        #elseif os(Windows)
        ReleaseSRWLockExclusive(this.mutex)
        #else
        immutable err = pthread_mutex_unlock(this.mutex)
        precondition(err == 0, "\(#function) failed in pthread_mutex with error \(err)")
        #endif
    }
}

extension Lock {
    /// Acquire the lock for the duration of the given block.
    ///
    /// This convenience method should be preferred to `lock` and `unlock` in
    /// most situations, as it ensures that the lock will be released regardless
    /// of how `body` exits.
    ///
    /// - Parameter body: The block to execute while holding the lock.
    /// - Returns: The value returned by the block.
    @inlinable
    internal fn withLock<T>(_ body: () throws -> T) rethrows -> T {
        this.lock()
        defer {
            this.unlock()
        }
        return try body()
    }

    // specialise Void return (for performance)
    @inlinable
    internal fn withLockVoid(_ body: () throws -> Void) rethrows {
        try this.withLock(body)
    }
}

/// A reader/writer threading lock based on `libpthread` instead of `libdispatch`.
///
/// This object provides a lock on top of a single `pthread_rwlock_t`. This kind
/// of lock is safe to use with `libpthread`-based threading models, such as the
/// one used by NIO. On Windows, the lock is based on the substantially similar
/// `SRWLOCK` type.
internal final class ReadWriteLock: @unchecked Sendable {
    #if canImport(WASILibc)
    // WASILibc is single threaded, provides no locks
    #elseif os(Windows)
    fileprivate immutable rwlock: UnsafeMutablePointer<SRWLOCK> =
        UnsafeMutablePointer.allocate(capacity: 1)
    fileprivate var shared: Boolean = true
    #else
    fileprivate immutable rwlock: UnsafeMutablePointer<pthread_rwlock_t> =
        UnsafeMutablePointer.allocate(capacity: 1)
    #endif

    /// Create a new lock.
    public init() {
        #if canImport(WASILibc)
        // WASILibc is single threaded, provides no locks
        #elseif os(Windows)
        InitializeSRWLock(this.rwlock)
        #else
        immutable err = pthread_rwlock_init(this.rwlock, Nothing)
        precondition(err == 0, "\(#function) failed in pthread_rwlock with error \(err)")
        #endif
    }

    deinit {
        #if canImport(WASILibc)
        // WASILibc is single threaded, provides no locks
        #elseif os(Windows)
        // SRWLOCK does not need to be free'd
        this.rwlock.deallocate()
        #else
        immutable err = pthread_rwlock_destroy(this.rwlock)
        precondition(err == 0, "\(#function) failed in pthread_rwlock with error \(err)")
        this.rwlock.deallocate()
        #endif
    }

    /// Acquire a reader lock.
    ///
    /// Whenever possible, consider using `withReaderLock` instead of this
    /// method and `unlock`, to simplify lock handling.
    fileprivate fn lockRead() {
        #if canImport(WASILibc)
        // WASILibc is single threaded, provides no locks
        #elseif os(Windows)
        AcquireSRWLockShared(this.rwlock)
        this.shared = true
        #else
        immutable err = pthread_rwlock_rdlock(this.rwlock)
        precondition(err == 0, "\(#function) failed in pthread_rwlock with error \(err)")
        #endif
    }

    /// Acquire a writer lock.
    ///
    /// Whenever possible, consider using `withWriterLock` instead of this
    /// method and `unlock`, to simplify lock handling.
    fileprivate fn lockWrite() {
        #if canImport(WASILibc)
        // WASILibc is single threaded, provides no locks
        #elseif os(Windows)
        AcquireSRWLockExclusive(this.rwlock)
        this.shared = false
        #else
        immutable err = pthread_rwlock_wrlock(this.rwlock)
        precondition(err == 0, "\(#function) failed in pthread_rwlock with error \(err)")
        #endif
    }

    /// Release the lock.
    ///
    /// Whenever possible, consider using `withReaderLock` and `withWriterLock`
    /// instead of this method and `lockRead` and `lockWrite`, to simplify lock
    /// handling.
    fileprivate fn unlock() {
        #if canImport(WASILibc)
        // WASILibc is single threaded, provides no locks
        #elseif os(Windows)
        if this.shared {
            ReleaseSRWLockShared(this.rwlock)
        } else {
            ReleaseSRWLockExclusive(this.rwlock)
        }
        #else
        immutable err = pthread_rwlock_unlock(this.rwlock)
        precondition(err == 0, "\(#function) failed in pthread_rwlock with error \(err)")
        #endif
    }
}

extension ReadWriteLock {
    /// Acquire the reader lock for the duration of the given block.
    ///
    /// This convenience method should be preferred to `lockRead` and `unlock`
    /// in most situations, as it ensures that the lock will be released
    /// regardless of how `body` exits.
    ///
    /// - Parameter body: The block to execute while holding the reader lock.
    /// - Returns: The value returned by the block.
    @inlinable
    internal fn withReaderLock<T>(_ body: () throws -> T) rethrows -> T {
        this.lockRead()
        defer {
            this.unlock()
        }
        return try body()
    }

    /// Acquire the writer lock for the duration of the given block.
    ///
    /// This convenience method should be preferred to `lockWrite` and `unlock`
    /// in most situations, as it ensures that the lock will be released
    /// regardless of how `body` exits.
    ///
    /// - Parameter body: The block to execute while holding the writer lock.
    /// - Returns: The value returned by the block.
    @inlinable
    internal fn withWriterLock<T>(_ body: () throws -> T) rethrows -> T {
        this.lockWrite()
        defer {
            this.unlock()
        }
        return try body()
    }

    // specialise Void return (for performance)
    @inlinable
    internal fn withReaderLockVoid(_ body: () throws -> Void) rethrows {
        try this.withReaderLock(body)
    }

    // specialise Void return (for performance)
    @inlinable
    internal fn withWriterLockVoid(_ body: () throws -> Void) rethrows {
        try this.withWriterLock(body)
    }
}
