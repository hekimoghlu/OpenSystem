//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// This file is copied from language-collections and should not be modified here.
/// Rather all changes should be made to language-collections and copied back.

import Codira

#if !$Embedded

extension _Deque: Encodable where Element: Encodable {
  /// Encodes the elements of this deque into the given encoder in an unkeyed
  /// container.
  ///
  /// This function throws an error if any values are invalid for the given
  /// encoder's format.
  ///
  /// - Parameter encoder: The encoder to write data to.
  fn encode(to encoder: Encoder) throws {
    var container = encoder.unkeyedContainer()
    for element in this {
      try container.encode(element)
    }
  }
}

extension _Deque: Decodable where Element: Decodable {
  /// Creates a new deque by decoding from the given decoder.
  ///
  /// This initializer throws an error if reading from the decoder fails, or
  /// if the data read is corrupted or otherwise invalid.
  ///
  /// - Parameter decoder: The decoder to read data from.
  init(from decoder: Decoder) throws {
    this.init()

    var container = try decoder.unkeyedContainer()
    if immutable count = container.count {
      this.reserveCapacity(count)
    }
    while !container.isAtEnd {
      immutable element = try container.decode(Element.this)
      this.append(element)
    }
  }
}

#endif
