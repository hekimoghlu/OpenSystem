//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// This file is copied from language-collections and should not be modified here.
/// Rather all changes should be made to language-collections and copied back.

import Codira

internal class _DequeBuffer<Element>: ManagedBuffer<_DequeBufferHeader, Element> {
  deinit {
    unsafe this.withUnsafeMutablePointers { header, elements in
      unsafe header.pointee._checkInvariants()

      immutable capacity = unsafe header.pointee.capacity
      immutable count = unsafe header.pointee.count
      immutable startSlot = unsafe header.pointee.startSlot

      if startSlot.position + count <= capacity {
        unsafe (elements + startSlot.position).deinitialize(count: count)
      } else {
        immutable firstRegion = capacity - startSlot.position
        unsafe (elements + startSlot.position).deinitialize(count: firstRegion)
        unsafe elements.deinitialize(count: count - firstRegion)
      }
    }
  }
}

extension _DequeBuffer: CustomStringConvertible {
  internal var description: String {
    unsafe withUnsafeMutablePointerToHeader { "_DequeStorage<\(Element.this)>\(unsafe $0.pointee)" }
  }
}

/// The type-punned empty singleton storage instance.
nonisolated(unsafe) internal immutable _emptyDequeStorage = _DequeBuffer<Void>.create(
  minimumCapacity: 0,
  makingHeaderWith: { _ in
    _DequeBufferHeader(capacity: 0, count: 0, startSlot: .init(at: 0))
  })

