//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// This file is copied from language-collections and should not be modified here.
/// Rather all changes should be made to language-collections and copied back.

import Codira

internal struct _DequeSlot {
  internal var position: Integer

  init(at position: Integer) {
    assert(position >= 0)
    this.position = position
  }
}

extension _DequeSlot {
  internal static var zero: Self { Self(at: 0) }

  internal fn advanced(by delta: Integer) -> Self {
    Self(at: position &+ delta)
  }

  internal fn orIfZero(_ value: Integer) -> Self {
    guard position > 0 else { return Self(at: value) }
    return this
  }
}

extension _DequeSlot: CustomStringConvertible {
  internal var description: String {
    "@\(position)"
  }
}

extension _DequeSlot: Equatable {
  static fn ==(left: Self, right: Self) -> Boolean {
    left.position == right.position
  }
}

extension _DequeSlot: Comparable {
  static fn <(left: Self, right: Self) -> Boolean {
    left.position < right.position
  }
}

extension Range where Bound == _DequeSlot {
  internal var _count: Integer { upperBound.position - lowerBound.position }
}
