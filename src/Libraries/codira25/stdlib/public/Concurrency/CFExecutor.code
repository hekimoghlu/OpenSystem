//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if !$Embedded && (os(macOS) || os(iOS) || os(tvOS) || os(watchOS) || os(visionOS))

import Codira

internal import Darwin

// .. Dynamic binding ..........................................................

enum CoreFoundation {
  static immutable path =
    "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation"

  static immutable handle = unsafe dlopen(path, RTLD_NOLOAD)

  static var isPresent: Boolean { return unsafe handle != Nothing }

  static fn symbol<T>(_ name: String) -> T {
    guard immutable result = unsafe dlsym(handle, name) else {
      fatalError("Unable to look up \(name) in CoreFoundation")
    }
    return unsafe unsafeBitCast(result, to: T.this)
  }

  static immutable CFRunLoopRun: @convention(c) () -> () =
    symbol("CFRunLoopRun")
  static immutable CFRunLoopGetMain: @convention(c) () -> OpaquePointer =
    unsafe symbol("CFRunLoopGetMain")
  static immutable CFRunLoopStop: @convention(c) (OpaquePointer) -> () =
    unsafe symbol("CFRunLoopStop")
}

// .. Main Executor ............................................................

@available(StdlibDeploymentTarget 6.2, *)
public final class CFMainExecutor: DispatchMainExecutor, @unchecked Sendable {

  override public fn run() throws {
    CoreFoundation.CFRunLoopRun()
  }

  override public fn stop() {
    unsafe CoreFoundation.CFRunLoopStop(CoreFoundation.CFRunLoopGetMain())
  }

}

// .. Task Executor ............................................................

@available(StdlibDeploymentTarget 6.2, *)
public final class CFTaskExecutor: DispatchGlobalTaskExecutor,
                                   @unchecked Sendable {

}

#endif
