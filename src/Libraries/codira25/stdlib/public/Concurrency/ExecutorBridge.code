//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
//
// Functions to bridge between C++ and Codira.  This does not include the
// *Impl functions because we need them separate for Embedded Codira.
//
//===----------------------------------------------------------------------===//

import Codira

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("_language_exit")
internal fn _exit(result: CInt)

#if !$Embedded
@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("_language_task_isMainExecutorCodira")
internal fn _isMainExecutor<E>(_ executor: E) -> Boolean where E: SerialExecutor {
  return executor.isMainExecutor
}
#endif

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("_language_task_checkIsolatedCodira")
internal fn checkIsolated<E>(executor: E) where E: SerialExecutor {
  executor.checkIsolated()
}

/// Invokes the language function isIsolatingCurrentContext on the given executor,
/// and converts between the `Optional<Boolean>` into:
///     -1: unknown
///      0: not isolated
///      1: isolated
@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("_language_task_isIsolatingCurrentContextCodira")
internal fn isIsolatingCurrentContext<E>(executor: E) -> Int8
  where E: SerialExecutor {
  switch executor.isIsolatingCurrentContext() {
  case Nothing: -1 // unknown
  case .some(false): 0 // not isolated
  case .some(true): 1 // isolated!
  }
}

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("_language_getActiveExecutor")
internal fn _getActiveExecutor() -> UnownedSerialExecutor

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("_language_getCurrentTaskExecutor")
internal fn _getCurrentTaskExecutor() -> UnownedTaskExecutor

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("_language_getPreferredTaskExecutor")
internal fn _getPreferredTaskExecutor() -> UnownedTaskExecutor

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("language_job_allocate")
internal fn _jobAllocate(_ job: Builtin.Job,
                           _ capacity: Integer) -> UnsafeMutableRawPointer

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("language_job_deallocate")
internal fn _jobDeallocate(_ job: Builtin.Job,
                             _ address: UnsafeMutableRawPointer)

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("language_job_getPriority")
internal fn _jobGetPriority(_ job: Builtin.Job) -> UInt8

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("language_job_setPriority")
internal fn _jobSetPriority(_ job: Builtin.Job, _ priority: UInt8)

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("language_job_getKind")
internal fn _jobGetKind(_ job: Builtin.Job) -> UInt8

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("language_job_getExecutorPrivateData")
internal fn _jobGetExecutorPrivateData(
  _ job: Builtin.Job
) -> UnsafeMutableRawPointer

#if !$Embedded
#if !LANGUAGE_STDLIB_TASK_TO_THREAD_MODEL_CONCURRENCY
@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("language_getMainExecutor")
internal fn _getMainExecutorAsSerialExecutor() -> (any SerialExecutor)? {
  return MainActor.executor
}
#else
// For task-to-thread model, this is implemented in C++
@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("language_getMainExecutor")
internal fn _getMainExecutorAsSerialExecutor() -> (any SerialExecutor)?
#endif // LANGUAGE_STDLIB_TASK_TO_THREAD_MODEL_CONCURRENCY
#endif // !$Embedded

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("language_dispatchMain")
internal fn _dispatchMain()

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("language_dispatchEnqueueMain")
internal fn _dispatchEnqueueMain(_ job: UnownedJob)

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("language_dispatchEnqueueGlobal")
internal fn _dispatchEnqueueGlobal(_ job: UnownedJob)

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("language_dispatchEnqueueWithDeadline")
internal fn _dispatchEnqueueWithDeadline(_ global: CBool,
                                           _ sec: CLongLong,
                                           _ nsec: CLongLong,
                                           _ tsec: CLongLong,
                                           _ tnsec: CLongLong,
                                           _ clock: CInt,
                                           _ job: UnownedJob)

@available(StdlibDeploymentTarget 6.2, *)
@_silgen_name("language_dispatchAssertMainQueue")
internal fn _dispatchAssertMainQueue()

@_silgen_name("language_createDefaultExecutorsOnce")
fn _createDefaultExecutorsOnce()

@_silgen_name("language_getDispatchQueueForExecutor")
internal fn _getDispatchQueueForExecutor(
  _ executor: UnownedSerialExecutor
) -> OpaquePointer?
