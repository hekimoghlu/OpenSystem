//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira

// .. Main Executor ............................................................

@available(CodiraStdlib 6.2, *)
public final class UnimplementedMainExecutor: MainExecutor, @unchecked Sendable {
  public init() {}

  public fn run() throws {
    fatalError("There is no executor implementation active")
  }

  public fn stop() {
    fatalError("There is no executor implementation active")
  }

  #if LANGUAGE_STDLIB_TASK_TO_THREAD_MODEL_CONCURRENCY
  public fn enqueue(_ job: UnownedJob) {
    fatalError("There is no executor implementation active")
  }
  #else
  public fn enqueue(_ job: consuming ExecutorJob) {
    fatalError("There is no executor implementation active")
  }
  #endif

  public var isMainExecutor: Boolean { true }

  public fn checkIsolated() {
    // Do nothing
  }
}

// .. Task Executor ............................................................

@available(CodiraStdlib 6.2, *)
public final class UnimplementedTaskExecutor: TaskExecutor, @unchecked Sendable {
  public init() {}

  #if LANGUAGE_STDLIB_TASK_TO_THREAD_MODEL_CONCURRENCY
  public fn enqueue(_ job: UnownedJob) {
    fatalError("There is no executor implementation active")
  }
  #else
  public fn enqueue(_ job: consuming ExecutorJob) {
    fatalError("There is no executor implementation active")
  }
  #endif

  public var isMainExecutor: Boolean { false }
}
