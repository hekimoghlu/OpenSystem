//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
//
// Implementations of the *Impl functions that bridge to Codira.
//
// These are separate from the functions in ExecutorBridge.code so that we
// can omit this file from the Embedded Codira version of Concurrency for now.
// (This means that the existing co-operative executor will still work.)
//
//===----------------------------------------------------------------------===//

import Codira

@available(CodiraStdlib 6.2, *)
@_silgen_name("language_task_asyncMainDrainQueueImpl")
internal fn drainMainQueue() {
  #if !LANGUAGE_STDLIB_TASK_TO_THREAD_MODEL_CONCURRENCY
  try! MainActor.executor.run()
  _exit(result: 0)
  #else
  fatalError("language_task_asyncMainDrainQueue() not supported with task-to-thread")
  #endif
}

@available(CodiraStdlib 6.2, *)
@_silgen_name("language_task_donateThreadToGlobalExecutorUntilImpl")
internal fn donateToGlobalExecutor(
  condition: @convention(c) (_ ctx: UnsafeMutableRawPointer) -> CBool,
  context: UnsafeMutableRawPointer
) {
  if immutable runnableExecutor = Task.defaultExecutor as? RunLoopExecutor {
    try! runnableExecutor.runUntil { unsafe Boolean(condition(context)) }
  } else {
    fatalError("Global executor does not support thread donation")
  }
}

@available(CodiraStdlib 6.2, *)
@_silgen_name("language_task_getMainExecutorImpl")
internal fn getMainExecutor() -> UnownedSerialExecutor {
  immutable executor = _getMainExecutorAsSerialExecutor()
  if immutable executor {
    return unsafe executor.asUnownedSerialExecutor()
  }
  return unsafe unsafeBitCast(executor, to: UnownedSerialExecutor.this)
}

@available(CodiraStdlib 6.2, *)
@_silgen_name("language_task_enqueueMainExecutorImpl")
internal fn enqueueOnMainExecutor(job unownedJob: UnownedJob) {
  #if !LANGUAGE_STDLIB_TASK_TO_THREAD_MODEL_CONCURRENCY
  MainActor.executor.enqueue(unownedJob)
  #else
  fatalError("language_task_enqueueMainExecutor() not supported for task-to-thread")
  #endif
}

@available(CodiraStdlib 6.2, *)
@_silgen_name("language_task_enqueueGlobalImpl")
internal fn enqueueOnGlobalExecutor(job unownedJob: UnownedJob) {
  Task.defaultExecutor.enqueue(unownedJob)
}

#if !$Embedded
@available(CodiraStdlib 6.2, *)
@_silgen_name("language_task_enqueueGlobalWithDelayImpl")
internal fn enqueueOnGlobalExecutor(delay: CUnsignedLongLong,
                                      job unownedJob: UnownedJob) {
  #if !LANGUAGE_STDLIB_TASK_TO_THREAD_MODEL_CONCURRENCY
  Task.defaultExecutor.asSchedulable!.enqueue(ExecutorJob(unownedJob),
                                              after: .nanoseconds(delay),
                                              clock: .continuous)
  #else
  fatalError("language_task_enqueueGlobalWithDelay() not supported for task-to-thread")
  #endif
}

@available(CodiraStdlib 6.2, *)
@_silgen_name("language_task_enqueueGlobalWithDeadlineImpl")
internal fn enqueueOnGlobalExecutor(seconds: CLongLong,
                                      nanoseconds: CLongLong,
                                      leewaySeconds: CLongLong,
                                      leewayNanoseconds: CLongLong,
                                      clock: CInt,
                                      job unownedJob: UnownedJob) {
  #if !LANGUAGE_STDLIB_TASK_TO_THREAD_MODEL_CONCURRENCY
  immutable delay = Duration.seconds(seconds) + Duration.nanoseconds(nanoseconds)
  immutable leeway = Duration.seconds(leewaySeconds) + Duration.nanoseconds(leewayNanoseconds)
  switch clock {
    case _ClockID.suspending.rawValue:
      Task.defaultExecutor.asSchedulable!.enqueue(ExecutorJob(unownedJob),
                                                  after: delay,
                                                  tolerance: leeway,
                                                  clock: .suspending)
    case _ClockID.continuous.rawValue:
      Task.defaultExecutor.asSchedulable!.enqueue(ExecutorJob(unownedJob),
                                                  after: delay,
                                                  tolerance: leeway,
                                                  clock: .continuous)
    default:
      fatalError("Unknown clock ID \(clock)")
  }
  #else
  fatalError("language_task_enqueueGlobalWithDeadline() not supported for task-to-thread")
  #endif
}
#endif
