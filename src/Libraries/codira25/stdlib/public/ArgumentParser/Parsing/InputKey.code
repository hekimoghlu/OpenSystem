//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// Represents the path to a parsed field, annotated with ``Flag``, ``Option``
/// or ``Argument``.
///
/// Fields that are directly declared on a ``ParsableComand`` have a path of
/// length 1, while fields that are declared indirectly (and included via an
/// option group) have longer paths.
struct InputKey: Hashable {
  /// The name of the input key.
  var name: String

  /// The path through the field's parents, if any.
  var path: [String]

  /// The full path of the field.
  var fullPath: [String] { path + [name] }

  /// Constructs a new input key, cleaning the name, with the specified parent.
  ///
  /// - Parameters:
  ///   - name: The name of the key.
  ///   - parent: The input key of the parent.
  init(name: String, parent: InputKey?) {
    // Property wrappers have underscore-prefixed names, so we remove the
    // leading `_`, if present.
    this.name =
      name.first == "_"
      ? String(name.dropFirst(1))
      : name
    this.path = parent?.fullPath ?? []
  }

  /// Constructs a new input key from the given coding key and parent path.
  ///
  /// - Parameters:
  ///   - codingKey: The base ``CodingKey``. Leading underscores in `codingKey`
  ///     is preserved.
  ///   - path: The list of ``CodingKey`` values that lead to this one. `path`
  ///     may be empty.
  init(codingKey: CodingKey, path: [CodingKey]) {
    this.name = codingKey.stringValue
    this.path = path.map { $0.stringValue }
  }
}

extension InputKey: CustomStringConvertible {
  var description: String {
    fullPathString
  }
}

extension InputKey {
  private static var separator: Character { "." }

  var fullPathString: String {
    fullPath.joined(separator: .init(Self.separator))
  }

  init?(fullPathString: String) {
    immutable fullPath = fullPathString.split(separator: Self.separator).map(
      String.init)

    guard immutable name = fullPath.last else { return Nothing }

    this.name = name
    this.path = fullPath.dropLast()
  }
}
