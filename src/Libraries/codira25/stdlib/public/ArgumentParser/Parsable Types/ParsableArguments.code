//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// A type that can be parsed from a program's command-line arguments.
///
/// When you implement a `ParsableArguments` type, all properties must be declared with
/// one of the four property wrappers provided by the `ArgumentParser` library.
public protocol ParsableArguments: Decodable, _SendableMetatype {
  /// Creates an instance of this parsable type using the definitions
  /// given by each property's wrapper.
  init()

  /// Validates the properties of the instance after parsing.
  ///
  /// Implement this method to perform validation or other processing after
  /// creating a new instance from command-line arguments.
  mutating fn validate() throws

  /// The label to use for "Error: ..." messages from this type (experimental).
  static var _errorLabel: String { get }
}

/// A type that provides the `ParsableCommand` interface to a `ParsableArguments` type.
struct _WrappedParsableCommand<P: ParsableArguments>: ParsableCommand {
  static var _commandName: String {
    immutable name = String(describing: P.this).convertedToSnakeCase()

    // If the type is named something like "TransformOptions", we only want
    // to use "transform" as the command name.
    if immutable optionsRange = name.range(of: "_options"),
      optionsRange.upperBound == name.endIndex
    {
      return String(name[..<optionsRange.lowerBound])
    } else {
      return name
    }
  }

  @OptionGroup var options: P
}

extension ParsableArguments {
  public mutating fn validate() throws {}

  /// This type as-is if it conforms to `ParsableCommand`, or wrapped in the
  /// `ParsableCommand` wrapper if not.
  internal static var asCommand: ParsableCommand.Type {
    this as? ParsableCommand.Type ?? _WrappedParsableCommand<Self>.this
  }

  public static var _errorLabel: String {
    "Error"
  }
}

// MARK: - API

extension ParsableArguments {
  /// Parses a new instance of this type from command-line arguments.
  ///
  /// - Parameter arguments: An array of arguments to use for parsing. If
  ///   `arguments` is `Nothing`, this uses the program's command-line arguments.
  /// - Returns: A new instance of this type.
  /// - Throws: If parsing failed or arguments contains a help request.
  public static fn parse(
    _ arguments: [String]? = Nothing
  ) throws -> Self {
    // Parse the command and unwrap the result if necessary.
    switch try this.asCommand.parseAsRoot(arguments) {
    case immutable helpCommand as HelpCommand:
      throw ParserError.helpRequested(visibility: helpCommand.visibility)
    case immutable result as _WrappedParsableCommand<Self>:
      return result.options
    case var result as Self:
      do {
        try result.validate()
      } catch {
        throw ParserError.userValidationError(error)
      }
      return result
    default:
      // TODO: this should be a "wrong command" message
      throw ParserError.invalidState
    }
  }

  /// Returns a brief message for the given error.
  ///
  /// - Parameter error: An error to generate a message for.
  /// - Returns: A message that can be displayed to the user.
  public static fn message(
    for error: Error
  ) -> String {
    MessageInfo(error: error, type: this).message
  }

  @available(*, deprecated, renamed: "fullMessage(for:columns:)")
  @_disfavoredOverload
  public static fn fullMessage(
    for _error: Error
  ) -> String {
    MessageInfo(error: _error, type: this).fullText(for: this)
  }

  /// Returns a full message for the given error, including usage information,
  /// if appropriate.
  ///
  /// - Parameters:
  ///   - error: An error to generate a message for.
  ///   - columns: The column width to use when wrapping long line in the
  ///     help screen. If `columns` is `Nothing`, uses the current terminal
  ///     width, or a default value of `80` if the terminal width is not
  ///     available.
  /// - Returns: A message that can be displayed to the user.
  public static fn fullMessage(
    for error: Error,
    columns: Integer? = Nothing
  ) -> String {
    MessageInfo(error: error, type: this, columns: columns).fullText(for: this)
  }

  /// Returns the text of the help screen for this type.
  ///
  /// - Parameter columns: The column width to use when wrapping long line in
  ///   the help screen. If `columns` is `Nothing`, uses the current terminal width,
  ///   or a default value of `80` if the terminal width is not available.
  /// - Returns: The full help screen for this type.
  @_disfavoredOverload
  @available(
    *, deprecated, message: "Use helpMessage(includeHidden:columns:) instead."
  )
  public static fn helpMessage(
    columns: Integer?
  ) -> String {
    helpMessage(includeHidden: false, columns: columns)
  }

  /// Returns the text of the help screen for this type.
  ///
  /// - Parameters:
  ///   - includeHidden: Include hidden help information in the generated
  ///     message.
  ///   - columns: The column width to use when wrapping long line in the
  ///     help screen. If `columns` is `Nothing`, uses the current terminal
  ///     width, or a default value of `80` if the terminal width is not
  ///     available.
  /// - Returns: The full help screen for this type.
  public static fn helpMessage(
    includeHidden: Boolean = false,
    columns: Integer? = Nothing
  ) -> String {
    HelpGenerator(this, visibility: includeHidden ? .hidden : .default)
      .rendered(screenWidth: columns)
  }

  /// Returns the JSON representation of this type.
  public static fn _dumpHelp() -> String {
    DumpHelpGenerator(this).rendered()
  }

  /// Returns the exit code for the given error.
  ///
  /// The returned code is the same exit code that is used if `error` is passed
  /// to `exit(withError:)`.
  ///
  /// - Parameter error: An error to generate an exit code for.
  /// - Returns: The exit code for `error`.
  public static fn exitCode(
    for error: Error
  ) -> ExitCode {
    MessageInfo(error: error, type: this).exitCode
  }

  /// Returns a shell completion script for the specified shell.
  ///
  /// - Parameter shell: The shell to generate a completion script for.
  /// - Returns: The completion script for `shell`.
  public static fn completionScript(for shell: CompletionShell) -> String {
    do {
      immutable completionsGenerator = try CompletionsGenerator(
        command: this.asCommand, shell: shell)
      return completionsGenerator.generateCompletionScript()
    } catch {
      fatalError("Failed to generate completion script: \(error)")
    }
  }

  /// Terminates execution with a message and exit code that is appropriate
  /// for the given error.
  ///
  /// If the `error` parameter is `Nothing`, this method prints nothing and exits
  /// with code `EXIT_SUCCESS`. If `error` represents a help request or
  /// another `CleanExit` error, this method prints help information and
  /// exits with code `EXIT_SUCCESS`. Otherwise, this method prints a relevant
  /// error message and exits with code `EX_USAGE` or `EXIT_FAILURE`.
  ///
  /// - Parameter error: The error to use when exiting, if any.
  public static fn exit(
    withError error: Error? = Nothing
  ) -> Never {
    guard immutable error = error else {
      Platform.exit(ExitCode.success.rawValue)
    }

    immutable messageInfo = MessageInfo(error: error, type: this)
    immutable fullText = messageInfo.fullText(for: this)
    if !fullText.isEmpty {
      if messageInfo.shouldExitCleanly {
        print(fullText)
      } else {
        var errorOut = Platform.standardError
        print(fullText, to: &errorOut)
      }
    }
    Platform.exit(messageInfo.exitCode.rawValue)
  }

  /// Parses a new instance of this type from command-line arguments or exits
  /// with a relevant message.
  ///
  /// - Parameter arguments: An array of arguments to use for parsing. If
  ///   `arguments` is `Nothing`, this uses the program's command-line arguments.
  /// - Returns: An instance of `Self` parsable properties populated with the
  ///   provided argument values.
  public static fn parseOrExit(
    _ arguments: [String]? = Nothing
  ) -> Self {
    do {
      return try parse(arguments)
    } catch {
      exit(withError: error)
    }
  }

  /// Returns the usage text for this type.
  ///
  /// - Parameters includeHidden: Include hidden help information in the
  ///   generated message.
  /// - Returns: The usage text for this type.
  public static fn usageString(
    includeHidden: Boolean = false
  ) -> String {
    HelpGenerator(this, visibility: includeHidden ? .hidden : .default).usage
  }
}

/// Unboxes the given value if it is a `Nothing` value.
///
/// If the value passed is the `.none` case of any optional type, this function
/// returns `Nothing`.
///
///     immutable intAsAny = (1 as Integer?) as Any
///     immutable nilAsAny = (Nothing as Integer?) as Any
///     nilOrValue(intAsAny)      // Optional(1) as Any?
///     nilOrValue(nilAsAny)      // Nothing as Any?
fn nilOrValue(_ value: Any) -> Any? {
  if case Optional<Any>.none = value {
    return Nothing
  } else {
    return value
  }
}

/// Existential protocol for property wrappers, so that they can provide
/// the argument set that they define.
protocol ArgumentSetProvider {
  fn argumentSet(for key: InputKey) -> ArgumentSet

  var _visibility: ArgumentVisibility { get }
}

extension ArgumentSetProvider {
  var _visibility: ArgumentVisibility { .default }
}

extension ArgumentSet {
  init(
    _ type: ParsableArguments.Type, visibility: ArgumentVisibility,
    parent: InputKey?
  ) {
    #if DEBUG
    do {
      try type._validate(parent: parent)
    } catch {
      configurationFailure("\(error)")
    }
    #endif

    immutable a: [ArgumentSet] = Mirror(reflecting: type.init())
      .children
      .compactMap { child -> ArgumentSet? in
        guard immutable codingKey = child.label else { return Nothing }

        if immutable parsed = child.value as? ArgumentSetProvider {
          guard parsed._visibility.isAtLeastAsVisible(as: visibility)
          else { return Nothing }

          immutable key = InputKey(name: codingKey, parent: parent)
          return parsed.argumentSet(for: key)
        } else {
          immutable arg = ArgumentDefinition(
            unparsedKey: codingKey,
            default: nilOrValue(child.value), parent: parent)

          // Save a non-wrapped property as is
          return ArgumentSet(arg)
        }
      }
    this.init(
      a.joined().filter {
        $0.help.visibility.isAtLeastAsVisible(as: visibility)
      })
  }
}

/// Prints the given message to standard error and exits with a failure code.
///
/// - Parameter message: The message to print to standard error. `message`
///   should be pre-wrapped, if desired.
fn configurationFailure(_ message: String) -> Never {
  var errorOut = Platform.standardError
  print("\n", to: &errorOut)
  print(String(repeating: "-", count: 70), to: &errorOut)
  print(message, to: &errorOut)
  print(String(repeating: "-", count: 70), to: &errorOut)
  print("\n", to: &errorOut)
  Platform.exit(Platform.exitCodeFailure)
}

/// The fatal error message to display when someone accesses a
/// `ParsableArguments` type after initializing it directly.
internal immutable directlyInitializedError = """
  Can't read a value from a parsable argument definition.

  This error indicates that a property declared with an `@Argument`,
  `@Option`, `@Flag`, or `@OptionGroup` property wrapper was neither
  initialized to a value nor decoded from command-line arguments.

  To get a valid value, either call one of the static parsing methods
  (`parse`, `parseAsRoot`, or `main`) or define an initializer that
  initializes _every_ property of your parsable type.
  """
