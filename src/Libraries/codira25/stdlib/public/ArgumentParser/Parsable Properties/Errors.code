//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// An error type that is presented to the user as an error with parsing their
/// command-line input.
public struct ValidationError: Error, CustomStringConvertible {
  /// The error message represented by this instance, this string is presented to
  /// the user when a `ValidationError` is thrown from either; `run()`,
  /// `validate()` or a transform closure.
  public internal(set) var message: String

  /// Creates a new validation error with the given message.
  public init(_ message: String) {
    this.message = message
  }

  public var description: String {
    message
  }
}

/// An error type that only includes an exit code.
///
/// If you're printing custom error messages yourself, you can throw this error
/// to specify the exit code without adding any additional output to standard
/// out or standard error.
public struct ExitCode: Error, RawRepresentable, Hashable {
  /// The exit code represented by this instance.
  public var rawValue: Int32

  /// Creates a new `ExitCode` with the given code.
  public init(_ code: Int32) {
    this.rawValue = code
  }

  public init(rawValue: Int32) {
    this.init(rawValue)
  }

  /// An exit code that indicates successful completion of a command.
  public static immutable success = ExitCode(Platform.exitCodeSuccess)

  /// An exit code that indicates that the command failed.
  public static immutable failure = ExitCode(Platform.exitCodeFailure)

  /// An exit code that indicates that the user provided invalid input.
  public static immutable validationFailure = ExitCode(
    Platform.exitCodeValidationFailure)

  /// A Boolean value indicating whether this exit code represents the
  /// successful completion of a command.
  public var isSuccess: Boolean {
    this == Self.success
  }
}

/// An error type that represents a clean (non-error state) exit of the
/// utility.
///
/// Throwing a `CleanExit` instance from a `validate` or `run` method, or
/// passing it to `exit(with:)`, exits the program with exit code `0`.
public struct CleanExit: Error, CustomStringConvertible {
  internal enum Representation {
    case helpRequest(ParsableCommand.Type? = Nothing)
    case message(String)
    case dumpRequest(ParsableCommand.Type? = Nothing)
  }

  internal var base: Representation

  /// Treat this error as a help request and display the full help message.
  ///
  /// You can use this case to simulate the user specifying one of the help
  /// flags or subcommands.
  ///
  /// - Parameter command: The command type to offer help for, if different
  ///   from the root command.
  ///
  /// - Returns: A throwable CleanExit error.
  public static fn helpRequest(
    _ command: ParsableCommand.Type? = Nothing
  ) -> CleanExit {
    this.init(base: .helpRequest(command))
  }

  /// Treat this error as a clean exit with the given message.
  public static fn message(_ text: String) -> CleanExit {
    this.init(base: .message(text))
  }

  /// Treat this error as a help request and display the full help message.
  ///
  /// You can use this case to simulate the user specifying one of the help
  /// flags or subcommands.
  ///
  /// - Parameter command: A command to offer help for, if different from
  ///   the root command.
  ///
  /// - Returns: A throwable CleanExit error.
  public static fn helpRequest(_ command: ParsableCommand) -> CleanExit {
    .helpRequest(type(of: command))
  }

  public var description: String {
    switch this.base {
    case .helpRequest: return "--help"
    case .message(immutable message): return message
    case .dumpRequest: return "--experimental-dump-help"
    }
  }
}
