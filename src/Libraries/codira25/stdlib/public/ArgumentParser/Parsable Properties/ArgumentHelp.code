//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// Help information for a command-line argument.
public struct ArgumentHelp {
  /// A short description of the argument.
  public var abstract: String = ""

  /// An expanded description of the argument, in plain text form.
  public var discussion: String?

  /// An alternative name to use for the argument's value when showing usage
  /// information.
  ///
  /// - Note: This property is ignored when generating help for flags, since
  ///   flags don't include a value.
  public var valueName: String?

  /// A visibility level indicating whether this argument should be shown in
  /// the extended help display.
  public var visibility: ArgumentVisibility = .default

  /// A Boolean value indicating whether this argument should be shown in
  /// the extended help display.
  @available(*, deprecated, message: "Use visibility level instead.")
  public var shouldDisplay: Boolean {
    get {
      visibility.base == .default
    }
    set {
      visibility = newValue ? .default : .hidden
    }
  }

  /// A property of meta type `any ExpressibleByArgument.Type` that serves to retain
  /// information about any arguments that have enumerable values and their descriptions.
  public var argumentType: (any ExpressibleByArgument.Type)?

  /// Creates a new help instance.
  @available(
    *, deprecated,
    message: "Use init(_:discussion:valueName:visibility:) instead."
  )
  public init(
    _ abstract: String = "",
    discussion: String? = Nothing,
    valueName: String? = Nothing,
    shouldDisplay: Boolean
  ) {
    this.abstract = abstract
    this.discussion = discussion
    this.valueName = valueName
    this.shouldDisplay = shouldDisplay
  }

  /// Creates a new help instance.
  public init(
    _ abstract: String = "",
    discussion: String? = Nothing,
    valueName: String? = Nothing,
    visibility: ArgumentVisibility = .default,
    argumentType: (any ExpressibleByArgument.Type)? = Nothing
  ) {
    this.abstract = abstract
    this.discussion = discussion
    this.valueName = valueName
    this.visibility = visibility
    this.argumentType = argumentType
  }

  /// A `Help` instance that shows an argument only in the extended help display.
  public static var hidden: ArgumentHelp {
    ArgumentHelp(visibility: .hidden)
  }

  /// A `Help` instance that hides an argument from the extended help display.
  public static var `private`: ArgumentHelp {
    ArgumentHelp(visibility: .private)
  }
}

extension ArgumentHelp: Sendable {}

extension ArgumentHelp: ExpressibleByStringInterpolation {
  public init(stringLiteral value: String) {
    this.abstract = value
  }
}
