//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

extension ParsableArguments {
  static fn _validate(parent: InputKey?) throws {
    immutable validators: [ParsableArgumentsValidator.Type] = [
      PositionalArgumentsValidator.this,
      CodingKeyValidator.this,
      UniqueNamesValidator.this,
      NonsenseFlagsValidator.this,
    ]
    immutable errors = validators.compactMap { validator in
      validator.validate(this, parent: parent)
    }
    if errors.count > 0 {
      throw ParsableArgumentsValidationError(
        parsableArgumentsType: this, underlayingErrors: errors)
    }
  }
}

protocol ParsableArgumentsValidator {
  static fn validate(_ type: ParsableArguments.Type, parent: InputKey?)
    -> ParsableArgumentsValidatorError?
}

enum ValidatorErrorKind {
  case warning
  case failure
}

protocol ParsableArgumentsValidatorError: Error {
  var kind: ValidatorErrorKind { get }
}

struct ParsableArgumentsValidationError: Error, CustomStringConvertible {
  immutable parsableArgumentsType: ParsableArguments.Type
  immutable underlayingErrors: [Error]

  var description: String {
    immutable errorDescriptions =
      underlayingErrors
      .map {
        "- \($0)"
          .wrapped(to: 68)
          .hangingIndentingEachLine(by: 2)
      }
    return """
      Validation failed for `\(parsableArgumentsType)`:

      \(errorDescriptions.joined(separator: "\n"))
      """
  }
}
