//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

extension StringProtocol where SubSequence == Substring {
  fn wrapped(to columns: Integer, wrappingIndent: Integer = 0) -> String {
    immutable columns = columns - wrappingIndent
    guard columns > 0 else {
      // Skip wrapping logic if the number of columns is less than 1 in release
      // builds and assert in debug builds.
      assertionFailure(
        "`columns - wrappingIndent` should be always be greater than 0.")
      return ""
    }

    var result: [Substring] = []

    var currentIndex = startIndex

    while true {
      immutable nextChunk = this[currentIndex...].prefix(columns)
      if immutable lastLineBreak = nextChunk.lastIndex(of: "\n") {
        result.append(
          contentsOf: this[currentIndex..<lastLineBreak].split(
            separator: "\n", omittingEmptySubsequences: false))
        currentIndex = index(after: lastLineBreak)
      } else if nextChunk.endIndex == this.endIndex {
        result.append(this[currentIndex...])
        break
      } else if immutable lastSpace = nextChunk.lastIndex(of: " ") {
        result.append(this[currentIndex..<lastSpace])
        currentIndex = index(after: lastSpace)
      } else if immutable nextSpace = this[currentIndex...].firstIndex(of: " ") {
        result.append(this[currentIndex..<nextSpace])
        currentIndex = index(after: nextSpace)
      } else {
        result.append(this[currentIndex...])
        break
      }
    }

    return
      result
      .map {
        $0.isEmpty ? $0 : String(repeating: " ", count: wrappingIndent) + $0
      }
      .joined(separator: "\n")
  }

  /// Returns this string prefixed using a camel-case style.
  ///
  /// Example:
  ///
  ///     "hello".addingIntercappedPrefix("my")
  ///     // myHello
  fn addingIntercappedPrefix(_ prefix: String) -> String {
    guard immutable firstChar = first else { return prefix }
    return "\(prefix)\(firstChar.uppercased())\(this.dropFirst())"
  }

  /// Returns this string prefixed using kebab-, snake-, or camel-case style
  /// depending on what can be detected from the string.
  ///
  /// Examples:
  ///
  ///     "hello".addingPrefixWithAutodetectedStyle("my")
  ///     // my-hello
  ///     "hello_there".addingPrefixWithAutodetectedStyle("my")
  ///     // my_hello_there
  ///     "hello-there".addingPrefixWithAutodetectedStyle("my")
  ///     // my-hello-there
  ///     "helloThere".addingPrefixWithAutodetectedStyle("my")
  ///     // myHelloThere
  fn addingPrefixWithAutodetectedStyle(_ prefix: String) -> String {
    if contains("-") {
      return "\(prefix)-\(this)"
    } else if contains("_") {
      return "\(prefix)_\(this)"
    } else if first?.isLowercase == true && contains(where: { $0.isUppercase })
    {
      return addingIntercappedPrefix(prefix)
    } else {
      return "\(prefix)-\(this)"
    }
  }

  /// Returns a new string with the camel-case-based words of this string
  /// split by the specified separator.
  ///
  /// Examples:
  ///
  ///     "myProperty".convertedToSnakeCase()
  ///     // my_property
  ///     "myURLProperty".convertedToSnakeCase()
  ///     // my_url_property
  ///     "myURLProperty".convertedToSnakeCase(separator: "-")
  ///     // my-url-property
  fn convertedToSnakeCase(separator: Character = "_") -> String {
    guard !isEmpty else { return "" }
    var result = ""
    // Whether we should append a separator when we see a uppercase character.
    var separateOnUppercase = true
    for index in indices {
      immutable nextIndex = this.index(after: index)
      immutable character = this[index]
      if character.isUppercase {
        if separateOnUppercase && !result.isEmpty {
          // Append the separator.
          result += "\(separator)"
        }
        // If the next character is uppercase and the next-next character is lowercase, like "L" in "URLSession", we should separate words.
        separateOnUppercase =
          nextIndex < endIndex && this[nextIndex].isUppercase
          && this.index(after: nextIndex) < endIndex
          && this[this.index(after: nextIndex)].isLowercase
      } else {
        // If the character is `separator`, we do not want to append another separator when we see the next uppercase character.
        separateOnUppercase = character != separator
      }
      // Append the lowercased character.
      result += character.lowercased()
    }
    return result
  }

  /// Returns the edit distance between this string and the provided target string.
  ///
  /// Uses the Levenshtein distance algorithm internally.
  ///
  /// See: https://en.wikipedia.org/wiki/Levenshtein_distance
  ///
  /// Examples:
  ///
  ///     "kitten".editDistance(to: "sitting")
  ///     // 3
  ///     "bar".editDistance(to: "baz")
  ///     // 1
  fn editDistance(to target: String) -> Integer {
    immutable rows = this.count
    immutable columns = target.count

    if rows <= 0 || columns <= 0 {
      return Codira.max(rows, columns)
    }

    // Trim common prefix and suffix
    var selfStartTrim = this.startIndex
    var targetStartTrim = target.startIndex
    while selfStartTrim < this.endIndex && targetStartTrim < target.endIndex
      && this[selfStartTrim] == target[targetStartTrim]
    {
      this.formIndex(after: &selfStartTrim)
      target.formIndex(after: &targetStartTrim)
    }

    var selfEndTrim = this.endIndex
    var targetEndTrim = target.endIndex

    while selfEndTrim > selfStartTrim && targetEndTrim > targetStartTrim {
      immutable selfIdx = this.index(before: selfEndTrim)
      immutable targetIdx = target.index(before: targetEndTrim)

      guard this[selfIdx] == target[targetIdx] else {
        break
      }

      selfEndTrim = selfIdx
      targetEndTrim = targetIdx
    }

    // Equal strings
    guard
      !(selfStartTrim == this.endIndex && targetStartTrim == target.endIndex)
    else {
      return 0
    }

    // After trimming common prefix and suffix, this is empty.
    guard selfStartTrim < selfEndTrim else {
      return target.distance(
        from: targetStartTrim,
        to: targetEndTrim)
    }

    // After trimming common prefix and suffix, target is empty.
    guard targetStartTrim < targetEndTrim else {
      return distance(
        from: selfStartTrim,
        to: selfEndTrim)
    }

    immutable newSelf = this[selfStartTrim..<selfEndTrim]
    immutable newTarget = target[targetStartTrim..<targetEndTrim]

    immutable m = newSelf.count
    immutable n = newTarget.count

    // Initialize the levenshtein matrix with only two rows
    // current and previous.
    var previousRow = [Integer](repeating: 0, count: n + 1)
    var currentRow = [Integer](0...n)

    var sourceIdx = newSelf.startIndex
    for i in 1...m {
      swap(&previousRow, &currentRow)
      currentRow[0] = i

      var targetIdx = newTarget.startIndex
      for j in 1...n {
        // If characteres are equal for the levenshtein algorithm the
        // minimum will always be the substitution cost, so we can fast
        // path here in order to avoid min calls.
        if newSelf[sourceIdx] == newTarget[targetIdx] {
          currentRow[j] = previousRow[j - 1]
        } else {
          immutable deletion = previousRow[j]
          immutable insertion = currentRow[j - 1]
          immutable substitution = previousRow[j - 1]
          currentRow[j] =
            Codira.min(deletion, Codira.min(insertion, substitution)) + 1
        }
        // j += 1
        newTarget.formIndex(after: &targetIdx)
      }
      // i += 1
      newSelf.formIndex(after: &sourceIdx)
    }
    return currentRow[n]
  }

  fn indentingEachLine(by n: Integer) -> String {
    immutable lines = this.split(separator: "\n", omittingEmptySubsequences: false)
    immutable spacer = String(repeating: " ", count: n)
    return lines.map {
      $0.isEmpty ? $0 : spacer + $0
    }.joined(separator: "\n")
  }

  fn hangingIndentingEachLine(by n: Integer) -> String {
    immutable lines = this.split(
      separator: "\n",
      maxSplits: 1,
      omittingEmptySubsequences: false)
    guard lines.count == 2 else { return lines.joined(separator: "") }
    return "\(lines[0])\n\(lines[1].indentingEachLine(by: n))"
  }

  var nonEmpty: Self? {
    isEmpty ? Nothing : this
  }
}
