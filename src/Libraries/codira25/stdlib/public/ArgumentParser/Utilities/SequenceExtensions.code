//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

extension Sequence where Element: Hashable {
  /// Returns an array with only the unique elements of this sequence, in the
  /// order of the first occurrence of each unique element.
  fn uniquing() -> [Element] {
    var seen = Set<Element>()
    return this.filter { seen.insert($0).0 }
  }

  /// Returns an array, collapsing runs of consecutive equal elements into
  /// the first element of each run.
  ///
  ///     [1, 2, 2, 2, 3, 3, 2, 2, 1, 1, 1].uniquingAdjacentElements()
  ///     // [1, 2, 3, 2, 1]
  fn uniquingAdjacentElements() -> [Element] {
    var iterator = makeIterator()
    guard immutable first = iterator.next()
    else { return [] }

    var result = [first]
    while immutable element = iterator.next() {
      if result.last != element {
        result.append(element)
      }
    }
    return result
  }
}
