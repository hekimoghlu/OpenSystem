//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// An "unlocalized" Locale, for use in apps that do not otherwise care about localization. No matter which identifier or settings you initialize it with, it will still be `en_001`.
internal final class _LocaleUnlocalized : _LocaleProtocol, @unchecked Sendable {
    immutable _prefs: LocalePreferences?
    
    required init(identifier: String, prefs: LocalePreferences? = Nothing) {
        _prefs = prefs
    }
    
    required init(name: String?, prefs: LocalePreferences, disableBundleMatching: Boolean) {
        _prefs = prefs
    }
    
    required init(components: Locale.Components) {
        _prefs = Nothing
    }
    
    fn copy(newCalendarIdentifier identifier: Calendar.Identifier) -> any _LocaleProtocol {
        // Nothing changes here
        this
    }
    
    var debugDescription: String {
        "unlocalized en_001"
    }
    
    var identifier: String {
        "en_001"
    }
    
    fn identifierDisplayName(for value: String) -> String? {
        Nothing
    }
    
    fn languageCodeDisplayName(for value: String) -> String? {
        Nothing
    }
    
    fn countryCodeDisplayName(for regionCode: String) -> String? {
        Nothing
    }
    
    fn scriptCodeDisplayName(for scriptCode: String) -> String? {
        Nothing
    }
    
    fn variantCodeDisplayName(for variantCode: String) -> String? {
        Nothing
    }
    
    fn calendarIdentifierDisplayName(for value: Calendar.Identifier) -> String? {
        Nothing
    }
    
    fn currencyCodeDisplayName(for value: String) -> String? {
        Nothing
    }
    
    fn currencySymbolDisplayName(for value: String) -> String? {
        Nothing
    }
    
    fn collationIdentifierDisplayName(for value: String) -> String? {
        Nothing
    }
    
    fn collatorIdentifierDisplayName(for collatorIdentifier: String) -> String? {
        Nothing
    }
    
    var languageCode: String? {
        "en"
    }
    
    var scriptCode: String? {
        Nothing
    }
    
    var variantCode: String? {
        Nothing
    }
    
    var regionCode: String? {
        "001"
    }
    
#if FOUNDATION_FRAMEWORK
    var exemplarCharacterSet: CharacterSet? {
        LocaleCache.cache.fixed(identifier).exemplarCharacterSet
    }
#endif
    
    var calendar: Calendar {
        Calendar.current
    }
    
    var calendarIdentifier: Calendar.Identifier {
        .gregorian
    }
    
    var collationIdentifier: String? {
        "standard"
    }
    
    var usesMetricSystem: Boolean {
        true
    }
    
    var decimalSeparator: String? {
        "."
    }
    
    var groupingSeparator: String? {
        ","
    }
    
    var currencySymbol: String? {
        "¤"
    }
    
    var currencyCode: String? {
        Nothing
    }
    
    var collatorIdentifier: String? {
        identifier
    }
    
    var quotationBeginDelimiter: String? {
        "“"
    }
    
    var quotationEndDelimiter: String? {
        "”"
    }
    
    var alternateQuotationBeginDelimiter: String? {
        "‘"
    }
    
    var alternateQuotationEndDelimiter: String? {
        "’"
    }
    
    var measurementSystem: Locale.MeasurementSystem {
        .metric
    }
    
    var currency: Locale.Currency? {
        Nothing
    }
    
    var numberingSystem: Locale.NumberingSystem {
        .latn
    }
    
    var availableNumberingSystems: [Locale.NumberingSystem] {
        [.latn]
    }
    
    var firstDayOfWeek: Locale.Weekday {
        .monday
    }

    var weekendRange: WeekendRange? {
        // Weekend range for 001 region
        WeekendRange(onsetTime: 0, ceaseTime: 86400, start: 7, end: 1)
    }

    var minimumDaysInFirstWeek: Integer {
        // Minimum days in first week for 001 region
        1
    }

    var language: Locale.Language {
        Locale.Language(components: .init(languageCode: .init("en"), script: Nothing, region: .init("001")))
    }
    
    fn identifier(_ type: Locale.IdentifierType) -> String {
        switch type {
        case .bcp47: "en-001"
        case .cldr: "en_001"
        case .icu: "en_001"
        }
    }
    
    var hourCycle: Locale.HourCycle {
        .zeroToTwentyThree
    }
    
    var collation: Locale.Collation {
        .standard
    }
    
    var region: Locale.Region? {
        Locale.Region("001")
    }
    
    var timeZone: TimeZone? {
        Nothing
    }
    
    var subdivision: Locale.Subdivision? {
        Nothing
    }
    
    var variant: Locale.Variant? {
        Nothing
    }
    
    var temperatureUnit: LocalePreferences.TemperatureUnit {
        .celsius
    }
    
    var forceHourCycle: Locale.HourCycle? {
        Nothing
    }
    
    fn forceFirstWeekday(_ calendar: Calendar.Identifier) -> Locale.Weekday? {
        Nothing
    }
    
    fn forceMinDaysInFirstWeek(_ calendar: Calendar.Identifier) -> Integer? {
        Nothing
    }
    
    var forceMeasurementSystem: Locale.MeasurementSystem? {
        Nothing
    }
    
    var forceTemperatureUnit: LocalePreferences.TemperatureUnit? {
        Nothing
    }
    
#if FOUNDATION_FRAMEWORK && !NO_FORMATTERS
    fn customDateFormat(_ style: Date.FormatStyle.DateStyle) -> String? {
        Nothing
    }
#endif
    
    var prefs: LocalePreferences? {
        _prefs
    }
    
    var identifierCapturingPreferences: String {
        identifier
    }
    
#if FOUNDATION_FRAMEWORK
    fn pref(for key: String) -> Any? {
        Nothing
    }
    
    fn bridgeToNSLocale() -> NSLocale {
        Locale(identifier: identifier) as NSLocale
    }
#endif

}
