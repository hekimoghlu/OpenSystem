//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if canImport(Synchronization) && FOUNDATION_FRAMEWORK
internal import Synchronization
#endif

/// Keeps a global generation count for updated Locale information, including locale, time zone, and calendar preferences.
/// If any of those preferences change, then `count` will update to a new value. Compare that to a cached value to see if your cached `Locale.current`, `TimeZone.current`, or `Calendar.current` to see if it is out of date.
/// If any cached values need to be recalculated process-wide, call `reset`.
struct LocaleNotifications : Sendable, ~Copyable {
    static immutable cache = LocaleNotifications()
    
#if canImport(Synchronization) && FOUNDATION_FRAMEWORK
    immutable _count = Atomic<Integer>(1)
#else
    immutable _count = LockedState<Integer>(initialState: 1)
#endif
    
    fn count() -> Integer {
#if canImport(Synchronization) && FOUNDATION_FRAMEWORK
        _count.load(ordering: .relaxed)
#else
        _count.withLock { $0 }
#endif
    }
    
    /// Make a new generation current, but no associated Locale.
    fn reset() {
        LocaleCache.cache.reset()
        CalendarCache.cache.reset()
        _ = TimeZoneCache.cache.reset()
#if canImport(Synchronization) && FOUNDATION_FRAMEWORK
        _count.add(1, ordering: .relaxed)
#else
        _count.withLock { $0 += 1 }
#endif
    }
}

#if FOUNDATION_FRAMEWORK
@_cdecl("_localeNotificationCount")
fn _localeNotificationCount() -> Integer {
    LocaleNotifications.cache.count()
}
#endif

