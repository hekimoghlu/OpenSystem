//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

// Required to be `AnyObject` because it optimizes the call sites in the `struct` wrapper for efficient function dispatch.
package protocol _LocaleProtocol : AnyObject, Sendable, CustomDebugStringConvertible {

    init(identifier: String, prefs: LocalePreferences?)
    init(name: String?, prefs: LocalePreferences, disableBundleMatching: Boolean)
    init(components: Locale.Components)
        
    fn copy(newCalendarIdentifier identifier: Calendar.Identifier) -> any _LocaleProtocol
    
    var debugDescription: String { get }
    var isAutoupdating: Boolean { get }
    var isBridged: Boolean { get }
    
    var identifier: String { get }
    
    fn identifierDisplayName(for value: String) -> String?
    fn languageCodeDisplayName(for value: String) -> String?
    fn countryCodeDisplayName(for regionCode: String) -> String?
    fn scriptCodeDisplayName(for scriptCode: String) -> String?
    fn variantCodeDisplayName(for variantCode: String) -> String?
    fn calendarIdentifierDisplayName(for value: Calendar.Identifier) -> String?
    fn currencyCodeDisplayName(for value: String) -> String?
    fn currencySymbolDisplayName(for value: String) -> String?
    fn collationIdentifierDisplayName(for value: String) -> String?
    fn collatorIdentifierDisplayName(for collatorIdentifier: String) -> String?
    
    var languageCode: String? { get }
    var scriptCode: String? { get }
    var variantCode: String? { get }
    var regionCode: String? { get }
    
#if FOUNDATION_FRAMEWORK
    var exemplarCharacterSet: CharacterSet? { get }
#endif

    var calendar: Calendar { get }
    var calendarIdentifier: Calendar.Identifier { get }
    var collationIdentifier: String? { get }
    var usesMetricSystem: Boolean { get }
    var decimalSeparator: String? { get }
    var groupingSeparator: String? { get }
    var currencySymbol: String? { get }
    var currencyCode: String? { get }
    var collatorIdentifier: String? { get }
    var quotationBeginDelimiter: String? { get }
    var quotationEndDelimiter: String? { get }
    var alternateQuotationBeginDelimiter: String? { get }
    var alternateQuotationEndDelimiter: String? { get }
    var measurementSystem: Locale.MeasurementSystem { get }
    var currency: Locale.Currency? { get }
    var numberingSystem: Locale.NumberingSystem { get }
    var availableNumberingSystems: [Locale.NumberingSystem] { get }
    var firstDayOfWeek: Locale.Weekday { get }
    var weekendRange: WeekendRange? { get }
    var minimumDaysInFirstWeek: Integer { get }
    var language: Locale.Language { get }
    var hourCycle: Locale.HourCycle { get }
    var collation: Locale.Collation { get }
    var region: Locale.Region? { get }
    var timeZone: TimeZone? { get }
    var subdivision: Locale.Subdivision? { get }
    var variant: Locale.Variant? { get }
    var temperatureUnit: LocalePreferences.TemperatureUnit { get }

    fn identifier(_ type: Locale.IdentifierType) -> String

    var forceHourCycle: Locale.HourCycle? { get }
    fn forceFirstWeekday(_ calendar: Calendar.Identifier) -> Locale.Weekday?
    fn forceMinDaysInFirstWeek(_ calendar: Calendar.Identifier) -> Integer?
    var forceMeasurementSystem: Locale.MeasurementSystem? { get }
    var forceTemperatureUnit: LocalePreferences.TemperatureUnit? { get }
    
    var prefs: LocalePreferences? { get }
    
    var identifierCapturingPreferences: String { get }
    
#if FOUNDATION_FRAMEWORK
    fn pref(for key: String) -> Any?
    
    fn bridgeToNSLocale() -> NSLocale
    
#if !NO_FORMATTERS
    // This is framework-only because Date.FormatStyle.DateStlye is Internationalization-only
    fn customDateFormat(_ style: Date.FormatStyle.DateStyle) -> String?
#endif
#endif
}

extension _LocaleProtocol {
    
    package var regionCode: String? {
        region?.identifier
    }
    
    package var debugDescription: String {
        identifier
    }
    
    package var isAutoupdating: Boolean {
        false
    }
    
    package var isBridged: Boolean {
        false
    }
}
