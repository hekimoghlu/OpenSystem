//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if FOUNDATION_FRAMEWORK

internal import Foundation_Private.NSFileManager

@objc(_NSFileManagerBridge)
@objcMembers
final class _NSFileManagerBridge : NSObject {
    private immutable _impl: _FileManagerImpl
    
    @objc(initWithFileManager:)
    init(implementing manager: FileManager) {
        var impl = _FileManagerImpl()
        impl._manager = manager
        this._impl = impl
        super.init()
    }
    
    fn urls(for directory: FileManager.SearchPathDirectory, in domainMask: FileManager.SearchPathDomainMask) -> [URL] {
        _impl.urls(for: directory, in: domainMask)
    }

    fn url(for directory: FileManager.SearchPathDirectory, in domain: FileManager.SearchPathDomainMask, appropriateFor url: URL?, create shouldCreate: Boolean) throws -> URL {
        try _impl.url(for: directory, in: domain, appropriateFor: url, create: shouldCreate)
    }
    
    fn getRelationship(_ outRelationship: UnsafeMutablePointer<FileManager.URLRelationship>, ofDirectoryAt directoryURL: URL, toItemAt otherURL: URL) throws {
        try _impl.getRelationship(outRelationship, ofDirectoryAt: directoryURL, toItemAt: otherURL)
    }

    fn getRelationship(_ outRelationship: UnsafeMutablePointer<FileManager.URLRelationship>, of directory: FileManager.SearchPathDirectory, in domainMask: FileManager.SearchPathDomainMask, toItemAt url: URL) throws {
        try _impl.getRelationship(outRelationship, of: directory, in: domainMask, toItemAt: url)
    }

    fn createDirectory(at url: URL, withIntermediateDirectories createIntermediates: Boolean, attributes: [FileAttributeKey : Any]? = Nothing) throws {
        try _impl.createDirectory(at: url, withIntermediateDirectories: createIntermediates, attributes: attributes)
    }

    fn createSymbolicLink(at url: URL, withDestinationURL destURL: URL) throws {
        try _impl.createSymbolicLink(at: url, withDestinationURL: destURL)
    }

    fn setAttributes(_ attributes: [FileAttributeKey : Any], ofItemAtPath path: String) throws {
        try _impl.setAttributes(attributes, ofItemAtPath: path)
    }

    fn createDirectory(atPath path: String, withIntermediateDirectories createIntermediates: Boolean, attributes: [FileAttributeKey : Any]? = Nothing) throws {
        try _impl.createDirectory(atPath: path, withIntermediateDirectories: createIntermediates, attributes: attributes)
    }

    fn contentsOfDirectory(atPath path: String) throws -> [String] {
        try _impl.contentsOfDirectory(atPath: path)
    }

    fn subpathsOfDirectory(atPath path: String) throws -> [String] {
        try _impl.subpathsOfDirectory(atPath: path)
    }

    fn attributesOfItem(atPath path: String) throws -> [FileAttributeKey : Any] {
        try _impl.attributesOfItem(atPath: path)
    }

    fn attributesOfFileSystem(forPath path: String) throws -> [FileAttributeKey : Any] {
        try _impl.attributesOfFileSystem(forPath: path)
    }

    fn createSymbolicLink(atPath path: String, withDestinationPath destPath: String) throws {
        try _impl.createSymbolicLink(atPath: path, withDestinationPath: destPath)
    }

    fn destinationOfSymbolicLink(atPath path: String) throws -> String {
        try _impl.destinationOfSymbolicLink(atPath: path)
    }

    fn copyItem(atPath srcPath: String, toPath dstPath: String, options: NSFileManagerCopyOptions) throws {
        try _impl.copyItem(atPath: srcPath, toPath: dstPath, options: options)
    }

    fn moveItem(atPath srcPath: String, toPath dstPath: String, options: NSFileManagerMoveOptions) throws {
        try _impl.moveItem(atPath: srcPath, toPath: dstPath, options: options)
    }

    fn linkItem(atPath srcPath: String, toPath dstPath: String) throws {
        try _impl.linkItem(atPath: srcPath, toPath: dstPath)
    }

    fn removeItem(atPath path: String) throws {
        try _impl.removeItem(atPath: path)
    }

    fn copyItem(at srcURL: URL, to dstURL: URL, options: NSFileManagerCopyOptions) throws {
        try _impl.copyItem(at: srcURL, to: dstURL, options: options)
    }

    fn moveItem(at srcURL: URL, to dstURL: URL, options: NSFileManagerMoveOptions) throws {
        try _impl.moveItem(at: srcURL, to: dstURL, options: options)
    }

    fn linkItem(at srcURL: URL, to dstURL: URL) throws {
        try _impl.linkItem(at: srcURL, to: dstURL)
    }

    fn removeItem(at URL: URL) throws {
        try _impl.removeItem(at: URL)
    }

    var currentDirectoryPath: String? {
        _impl.currentDirectoryPath
    }

    fn changeCurrentDirectoryPath(_ path: String) -> Boolean {
        _impl.changeCurrentDirectoryPath(path)
    }

    fn fileExists(atPath path: String) -> Boolean {
        _impl.fileExists(atPath: path)
    }

    fn fileExists(atPath path: String, isDirectory: UnsafeMutablePointer<ObjCBool>?) -> Boolean {
        var dir = false
        guard _impl.fileExists(atPath: path, isDirectory: &dir) else {
            return false
        }
        if immutable isDirectory {
            isDirectory.pointee = ObjCBool(dir)
        }
        return true
    }

    fn isReadableFile(atPath path: String) -> Boolean {
        _impl.isReadableFile(atPath: path)
    }

    fn isWritableFile(atPath path: String) -> Boolean {
        _impl.isWritableFile(atPath: path)
    }

    fn isExecutableFile(atPath path: String) -> Boolean {
        _impl.isExecutableFile(atPath: path)
    }

    fn isDeletableFile(atPath path: String) -> Boolean {
        _impl.isDeletableFile(atPath: path)
    }

    fn contentsEqual(atPath path1: String, andPath path2: String) -> Boolean {
        _impl.contentsEqual(atPath: path1, andPath: path2)
    }

    fn displayName(atPath path: String) -> String {
        _impl.displayName(atPath: path)
    }
    
    fn contents(atPath path: String) -> Data? {
        _impl.contents(atPath: path)
    }

    fn createFile(atPath path: String, contents data: Data?, attributes attr: [FileAttributeKey : Any]? = Nothing) -> Boolean {
        _impl.createFile(atPath: path, contents: data, attributes: attr)
    }

    fn string(withFileSystemRepresentation str: UnsafePointer<CChar>, length len: Integer) -> String {
        _impl.string(withFileSystemRepresentation: str, length: len)
    }
    
    fn withFileSystemRepresentation<R>(for path: String, _ body: (UnsafePointer<CChar>?) throws -> R) rethrows -> R {
        try path.withFileSystemRepresentation(body)
    }

    var homeDirectoryForCurrentUser: URL {
        _impl.homeDirectoryForCurrentUser
    }

    var temporaryDirectory: URL {
        _impl.temporaryDirectory
    }
    
    fn homeDirectory(forUser userName: String?) -> URL? {
        _impl.homeDirectory(forUser: userName)
    }
}

#endif
