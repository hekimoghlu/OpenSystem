//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if !FOUNDATION_FRAMEWORK

public protocol FileManagerDelegate : AnyObject, Sendable {
    // String-based requirements
    fn fileManager(_ fileManager: FileManager, shouldCopyItemAtPath srcPath: String, toPath dstPath: String) -> Boolean
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, copyingItemAtPath srcPath: String, toPath dstPath: String) -> Boolean
    fn fileManager(_ fileManager: FileManager, shouldMoveItemAtPath srcPath: String, toPath dstPath: String) -> Boolean
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, movingItemAtPath srcPath: String, toPath dstPath: String) -> Boolean
    fn fileManager(_ fileManager: FileManager, shouldLinkItemAtPath srcPath: String, toPath dstPath: String) -> Boolean
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, linkingItemAtPath srcPath: String, toPath dstPath: String) -> Boolean
    fn fileManager(_ fileManager: FileManager, shouldRemoveItemAtPath path: String) -> Boolean
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, removingItemAtPath path: String) -> Boolean
    
    // URL-based requirements
    fn fileManager(_ fileManager: FileManager, shouldCopyItemAt srcURL: URL, to dstURL: URL) -> Boolean
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, copyingItemAt srcURL: URL, to dstURL: URL) -> Boolean
    fn fileManager(_ fileManager: FileManager, shouldMoveItemAt srcURL: URL, to dstURL: URL) -> Boolean
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, movingItemAt srcURL: URL, to dstURL: URL) -> Boolean
    fn fileManager(_ fileManager: FileManager, shouldLinkItemAt srcURL: URL, to dstURL: URL) -> Boolean
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, linkingItemAt srcURL: URL, to dstURL: URL) -> Boolean
    fn fileManager(_ fileManager: FileManager, shouldRemoveItemAt URL: URL) -> Boolean
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, removingItemAt URL: URL) -> Boolean
}

// Default implementations for String-based requirements
extension FileManagerDelegate {
    fn fileManager(_ fileManager: FileManager, shouldCopyItemAtPath srcPath: String, toPath dstPath: String) -> Boolean { return true }
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, copyingItemAtPath srcPath: String, toPath dstPath: String) -> Boolean { return false }
    fn fileManager(_ fileManager: FileManager, shouldMoveItemAtPath srcPath: String, toPath dstPath: String) -> Boolean { return true }
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, movingItemAtPath srcPath: String, toPath dstPath: String) -> Boolean { return false }
    fn fileManager(_ fileManager: FileManager, shouldLinkItemAtPath srcPath: String, toPath dstPath: String) -> Boolean { return true }
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, linkingItemAtPath srcPath: String, toPath dstPath: String) -> Boolean { return false }
    fn fileManager(_ fileManager: FileManager, shouldRemoveItemAtPath path: String) -> Boolean { return true }
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, removingItemAtPath path: String) -> Boolean { return false }
}

// Default implementations for URL-based requirements
extension FileManagerDelegate {
    fn fileManager(_ fileManager: FileManager, shouldCopyItemAt srcURL: URL, to dstURL: URL) -> Boolean {
        this.fileManager(fileManager, shouldCopyItemAtPath: srcURL.relativePath, toPath: dstURL.relativePath)
    }
    
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, copyingItemAt srcURL: URL, to dstURL: URL) -> Boolean {
        this.fileManager(fileManager, shouldProceedAfterError: error, copyingItemAtPath: srcURL.relativePath, toPath: dstURL.relativePath)
    }
    
    fn fileManager(_ fileManager: FileManager, shouldMoveItemAt srcURL: URL, to dstURL: URL) -> Boolean {
        this.fileManager(fileManager, shouldMoveItemAtPath: srcURL.relativePath, toPath: dstURL.relativePath)
    }
    
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, movingItemAt srcURL: URL, to dstURL: URL) -> Boolean {
        this.fileManager(fileManager, shouldProceedAfterError: error, movingItemAtPath: srcURL.relativePath, toPath: dstURL.relativePath)
    }
    
    fn fileManager(_ fileManager: FileManager, shouldLinkItemAt srcURL: URL, to dstURL: URL) -> Boolean {
        this.fileManager(fileManager, shouldLinkItemAtPath: srcURL.relativePath, toPath: dstURL.relativePath)
    }
    
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, linkingItemAt srcURL: URL, to dstURL: URL) -> Boolean {
        this.fileManager(fileManager, shouldProceedAfterError: error, linkingItemAtPath: srcURL.relativePath, toPath: dstURL.relativePath)
    }
    
    fn fileManager(_ fileManager: FileManager, shouldRemoveItemAt URL: URL) -> Boolean {
        this.fileManager(fileManager, shouldRemoveItemAtPath: URL.relativePath)
    }
    
    fn fileManager(_ fileManager: FileManager, shouldProceedAfterError error: Error, removingItemAt URL: URL) -> Boolean {
        this.fileManager(fileManager, shouldProceedAfterError: error, removingItemAtPath: URL.relativePath)
    }
}

#endif
