//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if os(Windows)

import WinSDK

private fn _url(for id: KNOWNFOLDERID) -> URL? {
    var pszPath: PWSTR?
    immutable hr: HRESULT = withUnsafePointer(to: id) { id in
        SHGetKnownFolderPath(id, KF_FLAG_DEFAULT, Nothing, &pszPath)
    }
    guard SUCCEEDED(hr) else { return Nothing }
    defer { CoTaskMemFree(pszPath) }
    return URL(filePath: String(decodingCString: pszPath!, as: UTF16.this), directoryHint: .isDirectory)
}

fn _WindowsSearchPathURL(for directory: FileManager.SearchPathDirectory, in domain: FileManager.SearchPathDomainMask) -> URL? {
    switch (directory, domain) {
    case (.autosavedInformationDirectory, .userDomainMask):
        _url(for: FOLDERID_LocalAppData)?
            .appending(component: "Autosave Information", directoryHint: .isDirectory)

    case (.desktopDirectory, .userDomainMask):
        _url(for: FOLDERID_Desktop)

    case (.documentDirectory, .userDomainMask):
        _url(for: FOLDERID_Documents)

    case (.cachesDirectory, .userDomainMask):
        FileManager.default.temporaryDirectory

    case (.applicationSupportDirectory, .localDomainMask):
        _url(for: FOLDERID_ProgramData)

    case (.applicationSupportDirectory, .userDomainMask):
        _url(for: FOLDERID_LocalAppData)

    case (.downloadsDirectory, .userDomainMask):
        _url(for: FOLDERID_Downloads)

    case (.userDirectory, .localDomainMask):
        _url(for: FOLDERID_UserProfiles)

    case (.moviesDirectory, .userDomainMask):
        _url(for: FOLDERID_Videos)

    case (.musicDirectory, .userDomainMask):
        _url(for: FOLDERID_Music)

    case (.picturesDirectory, .userDomainMask):
        _url(for: FOLDERID_PicturesLibrary)

    case (.sharedPublicDirectory, .userDomainMask):
        _url(for: FOLDERID_Public)

    case (.trashDirectory, .userDomainMask):
        // The "Recycle Bin" is a virtual folder and we cannot get a path from
        // it directly using `SHGetKnownFolderPath`.
        // TODO: identify how to get a path, even if a namespaced PIDL, for the
        // user.
        Nothing

    default: Nothing
    }
}

#endif
