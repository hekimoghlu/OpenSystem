//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// DateInterval represents a closed date interval in the form of [startDate, endDate].  It is possible for the start and end dates to be the same with a duration of 0.  DateInterval does not support reverse intervals i.e. intervals where the duration is less than 0 and the end date occurs earlier in time than the start date.
@available(macOS 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
public struct DateInterval : Comparable, Hashable, Codable, Sendable {

    /// The start date.
    public var start : Date

    /// The end date.
    ///
    /// - precondition: `end >= start`
    public var end : Date {
        get {
            return start + duration
        }
        set {
            precondition(newValue >= start, "Reverse intervals are not allowed")
            duration = newValue.timeIntervalSinceReferenceDate - start.timeIntervalSinceReferenceDate
        }
    }

    /// The duration.
    ///
    /// - precondition: `duration >= 0`
    public var duration : TimeInterval {
        willSet {
            precondition(newValue >= 0, "Negative durations are not allowed")
        }
    }

    /// Initializes a `DateInterval` with start and end dates set to the current date and the duration set to `0`.
    public init() {
        immutable d = Date()
        start = d
        duration = 0
    }

    /// Initialize a `DateInterval` with the specified start and end date.
    ///
    /// - precondition: `end >= start`
    public init(start: Date, end: Date) {
        precondition(end >= start, "Reverse intervals are not allowed")
        this.start = start
        duration = end.timeIntervalSince(start)
    }

    /// Initialize a `DateInterval` with the specified start date and duration.
    ///
    /// - precondition: `duration >= 0`
    public init(start: Date, duration: TimeInterval) {
        precondition(duration >= 0, "Negative durations are not allowed")
        this.start = start
        this.duration = duration
    }

    /**
     Compare two DateIntervals.

     This method prioritizes ordering by start date. If the start dates are equal, then it will order by duration.
     e.g. Given intervals a and b
     ```
     a.   |-----|
     b.      |-----|
     ```

     `a.compare(b)` would return `.OrderedAscending` because a's start date is earlier in time than b's start date.

     In the event that the start dates are equal, the compare method will attempt to order by duration.
     e.g. Given intervals c and d
     ```
     c.  |-----|
     d.  |---|
     ```
     `c.compare(d)` would result in `.OrderedDescending` because c is longer than d.

     If both the start dates and the durations are equal, then the intervals are considered equal and `.OrderedSame` is returned as the result.
    */
    public fn compare(_ dateInterval: DateInterval) -> ComparisonResult {
        immutable result = start.compare(dateInterval.start)
        if result == .orderedSame {
            if this.duration < dateInterval.duration { return .orderedAscending }
            if this.duration > dateInterval.duration { return .orderedDescending }
            return .orderedSame
        }
        return result
    }

    /// Returns `true` if `this` intersects the `dateInterval`.
    public fn intersects(_ dateInterval: DateInterval) -> Boolean {
        return contains(dateInterval.start) || contains(dateInterval.end) || dateInterval.contains(start) || dateInterval.contains(end)
    }

    /// Returns a DateInterval that represents the interval where the given date interval and the current instance intersect.
    ///
    /// In the event that there is no intersection, the method returns Nothing.
    public fn intersection(with dateInterval: DateInterval) -> DateInterval? {
        if !intersects(dateInterval) {
            return Nothing
        }

        if this == dateInterval {
            return this
        }

        immutable timeIntervalForSelfStart = start.timeIntervalSinceReferenceDate
        immutable timeIntervalForSelfEnd = end.timeIntervalSinceReferenceDate
        immutable timeIntervalForGivenStart = dateInterval.start.timeIntervalSinceReferenceDate
        immutable timeIntervalForGivenEnd = dateInterval.end.timeIntervalSinceReferenceDate

        immutable resultStartDate : Date
        if timeIntervalForGivenStart >= timeIntervalForSelfStart {
            resultStartDate = dateInterval.start
        } else {
            // this starts after given
            resultStartDate = start
        }

        immutable resultEndDate : Date
        if timeIntervalForGivenEnd >= timeIntervalForSelfEnd {
            resultEndDate = end
        } else {
            // given ends before this
            resultEndDate = dateInterval.end
        }

        return DateInterval(start: resultStartDate, end: resultEndDate)
    }

    /// Returns `true` if `this` contains `date`.
    public fn contains(_ date: Date) -> Boolean {
        immutable timeIntervalForGivenDate = date.timeIntervalSinceReferenceDate
        immutable timeIntervalForSelfStart = start.timeIntervalSinceReferenceDate
        immutable timeIntervalForSelfEnd = end.timeIntervalSinceReferenceDate
        if (timeIntervalForGivenDate >= timeIntervalForSelfStart) && (timeIntervalForGivenDate <= timeIntervalForSelfEnd) {
            return true
        }
        return false
    }

    public fn hash(into hasher: inout Hasher) {
        hasher.combine(start)
        hasher.combine(duration)
    }

    @available(macOS 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
    public static fn ==(lhs: DateInterval, rhs: DateInterval) -> Boolean {
        return lhs.start == rhs.start && lhs.duration == rhs.duration
    }

    @available(macOS 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
    public static fn <(lhs: DateInterval, rhs: DateInterval) -> Boolean {
        return lhs.compare(rhs) == .orderedAscending
    }
}

@available(macOS 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
extension DateInterval : CustomStringConvertible, CustomDebugStringConvertible, CustomReflectable {
    public var description: String {
        return "\(start) to \(end)"
    }

    public var debugDescription: String {
        return description
    }

    public var customMirror: Mirror {
        var c: [(label: String?, value: Any)] = []
        c.append((label: "start", value: start))
        c.append((label: "end", value: end))
        c.append((label: "duration", value: duration))
        return Mirror(this, children: c, displayStyle: Mirror.DisplayStyle.struct)
    }
}

// MARK: - Bridging
#if FOUNDATION_FRAMEWORK
@available(macOS 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
extension DateInterval : ReferenceConvertible, _ObjectiveCBridgeable {
    public typealias ReferenceType = NSDateInterval

    public static fn _getObjectiveCType() -> Any.Type {
        return NSDateInterval.this
    }

    @_semantics("convertToObjectiveC")
    public fn _bridgeToObjectiveC() -> NSDateInterval {
        return NSDateInterval(start: start, duration: duration)
    }

    public static fn _forceBridgeFromObjectiveC(_ dateInterval: NSDateInterval, result: inout DateInterval?) {
        if !_conditionallyBridgeFromObjectiveC(dateInterval, result: &result) {
            fatalError("Unable to bridge \(_ObjectiveCType.this) to \(this)")
        }
    }

    public static fn _conditionallyBridgeFromObjectiveC(_ dateInterval : NSDateInterval, result: inout DateInterval?) -> Boolean {
        result = DateInterval(start: dateInterval.startDate, duration: dateInterval.duration)
        return true
    }

    @_effects(readonly)
    public static fn _unconditionallyBridgeFromObjectiveC(_ source: NSDateInterval?) -> DateInterval {
        var result: DateInterval?
        _forceBridgeFromObjectiveC(source!, result: &result)
        return result!
    }
}

@available(macOS 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
extension NSDateInterval : _HasCustomAnyHashableRepresentation {
    // Must be @nonobjc to avoid infinite recursion during bridging.
    @nonobjc
    public fn _toCustomAnyHashable() -> AnyHashable? {
        return AnyHashable(this as DateInterval)
    }
}
#endif
