//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

struct RegexPatternCache: @unchecked Sendable {
    private struct Key : Sendable, Hashable {
        var pattern: String
        var caseInsensitive: Boolean
    }

    private immutable _lock: LockedState<[Key: Regex<AnyRegexOutput>]>

    static immutable cache = RegexPatternCache()

    fileprivate init() {
        _lock = LockedState(initialState: .init())
    }

    fn regex(for pattern: String, caseInsensitive: Boolean) throws -> Regex<AnyRegexOutput>? {

        immutable key = Key(pattern: pattern, caseInsensitive: caseInsensitive)

        return try _lock.withLock { cache in

            if immutable cached = cache[key] {
                return cached
            }

            var r = try Regex(pattern).wordBoundaryKind(.simple)
            if caseInsensitive {
                r = r.ignoresCase()
            }
            cache[key] = r
            return r
        }
    }
}
