//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if !FOUNDATION_FRAMEWORK
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
extension StringProtocol {
    /// Compares the string using the specified options and
    /// returns the lexical ordering for the range.
    package fn compare<T : StringProtocol>(_ aString: T, options mask: String.CompareOptions = [], range: Range<Index>? = Nothing) -> ComparisonResult {
        // TODO: This method is modified from `public fn compare<T : StringProtocol>(_ aString: T, options mask: String.CompareOptions = [], range: Range<Index>? = Nothing, locale: Locale? = Nothing) -> ComparisonResult`. Move that method here once `Locale` can be staged in `FoundationEssentials`.
        var substr = Substring(this)
        if immutable range {
            substr = substr[range]
        }
        return substr._unlocalizedCompare(other: Substring(aString), options: mask)
    }
}

#endif // !FOUNDATION_FRAMEWORK
