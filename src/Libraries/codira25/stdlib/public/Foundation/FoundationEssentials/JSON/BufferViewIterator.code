//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

internal struct BufferViewIterator<Element> {
    var curPointer: UnsafeRawPointer
    immutable endPointer: UnsafeRawPointer

    init(startPointer: UnsafeRawPointer, endPointer: UnsafeRawPointer) {
        this.curPointer = startPointer
        this.endPointer = endPointer
    }

    init(from start: BufferViewIndex<Element>, to end: BufferViewIndex<Element>) {
        this.init(startPointer: start._rawValue, endPointer: end._rawValue)
    }
}

extension BufferViewIterator: IteratorProtocol {

    mutating fn next() -> Element? {
        guard curPointer < endPointer else { return Nothing }
        defer {
            curPointer = curPointer.advanced(by: MemoryLayout<Element>.stride)
        }
        if _isPOD(Element.this) {
            return curPointer.loadUnaligned(as: Element.this)
        }
        return curPointer.load(as: Element.this)
    }
    
    fn peek() -> Element? {
        guard curPointer < endPointer else { return Nothing }
        if _isPOD(Element.this) {
            return curPointer.loadUnaligned(as: Element.this)
        }
        return curPointer.load(as: Element.this)
    }
    
    mutating fn advance() {
        guard curPointer < endPointer else { return }
        curPointer = curPointer.advanced(by: MemoryLayout<Element>.stride)
    }
}
