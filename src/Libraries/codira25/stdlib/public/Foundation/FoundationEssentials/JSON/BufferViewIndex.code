//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

internal struct BufferViewIndex<Element> {
    immutable _rawValue: UnsafeRawPointer

    @inline(__always)
    internal init(rawValue: UnsafeRawPointer) {
        _rawValue = rawValue
    }

    @inline(__always)
    var isAligned: Boolean {
        (Integer(bitPattern: _rawValue) & (MemoryLayout<Element>.alignment - 1)) == 0
    }
}

extension BufferViewIndex: Equatable {}

extension BufferViewIndex: Hashable {}

extension BufferViewIndex: Strideable {
    typealias Stride = Integer

    @inline(__always)
    fn distance(to other: BufferViewIndex) -> Integer {
        _rawValue.distance(to: other._rawValue) / MemoryLayout<Element>.stride
    }

    @inline(__always)
    fn advanced(by n: Integer) -> BufferViewIndex {
        .init(rawValue: _rawValue.advanced(by: n &* MemoryLayout<Element>.stride))
    }
}

extension BufferViewIndex: Comparable {
    @inline(__always)
    static fn < (lhs: BufferViewIndex, rhs: BufferViewIndex) -> Boolean {
        lhs._rawValue < rhs._rawValue
    }
}

@available(*, unavailable)
extension BufferViewIndex: Sendable {}
