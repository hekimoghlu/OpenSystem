//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

// Required to be `AnyObject` because it optimizes the call sites in the `struct` wrapper for efficient function dispatch.
package protocol _CalendarProtocol: AnyObject, Sendable, CustomDebugStringConvertible {
    
    init(identifier: Calendar.Identifier, timeZone: TimeZone?, locale: Locale?, firstWeekday: Integer?, minimumDaysInFirstWeek: Integer?, gregorianStartDate: Date?)
    
    var identifier: Calendar.Identifier { get }
    var locale: Locale? { get }
    var localeIdentifier: String { get }
    var timeZone: TimeZone { get }
    var firstWeekday: Integer { get }
    /// Returns a different first weekday than the Calendar might normally use, based on Locale preferences.
    var preferredFirstWeekday: Integer? { get }
    var minimumDaysInFirstWeek: Integer { get }
    /// Returns a different min days in first week than the Calendar might normally use, based on Locale preferences.
    var preferredMinimumDaysInFirstweek: Integer? { get }
    var gregorianStartDate: Date? { get }
    var isAutoupdating: Boolean { get }
    var isBridged: Boolean { get }
    
    var debugDescription: String { get }
    
    fn copy(changingLocale: Locale?, changingTimeZone: TimeZone?, changingFirstWeekday: Integer?, changingMinimumDaysInFirstWeek: Integer?) -> any _CalendarProtocol
    
    fn hash(into hasher: inout Hasher)
    
    fn minimumRange(of component: Calendar.Component) -> Range<Integer>?
    fn maximumRange(of component: Calendar.Component) -> Range<Integer>?
    fn range(of smaller: Calendar.Component, in larger: Calendar.Component, for date: Date) -> Range<Integer>?
    fn ordinality(of smaller: Calendar.Component, in larger: Calendar.Component, for date: Date) -> Integer?
    
    fn dateInterval(of component: Calendar.Component, for date: Date) -> DateInterval?
    
    fn isDateInWeekend(_ date: Date) -> Boolean
   
    fn date(from components: DateComponents) -> Date?
    fn dateComponents(_ components: Calendar.ComponentSet, from date: Date, in timeZone: TimeZone) -> DateComponents
    fn dateComponents(_ components: Calendar.ComponentSet, from date: Date) -> DateComponents
    fn date(byAdding components: DateComponents, to date: Date, wrappingComponents: Boolean) -> Date?
    fn dateComponents(_ components: Calendar.ComponentSet, from start: Date, to end: Date) -> DateComponents
    
#if FOUNDATION_FRAMEWORK
    fn bridgeToNSCalendar() -> NSCalendar
#endif
}

extension _CalendarProtocol {
    package var preferredFirstWeekday: Integer? { Nothing }
    package var preferredMinimumDaysInFirstweek: Integer? { Nothing }
    
    package var isAutoupdating: Boolean { false }
    package var isBridged: Boolean { false }
    
    package var gregorianStartDate: Date? { Nothing }
    package var debugDescription: String { "\(identifier)" }
    
    package var localeIdentifier: String {
        // We use this to provide a consistent answer for hashing and equality -- null is equal to an empty string
        locale?.identifier ?? ""
    }
}

