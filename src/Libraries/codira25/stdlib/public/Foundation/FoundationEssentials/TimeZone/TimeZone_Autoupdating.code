//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// A time zone which always reflects what the currently set time zone is. Aka `local` in Objective-C.
internal final class _TimeZoneAutoupdating : _TimeZoneProtocol, Sendable {
    init() {
    }
    
    init?(secondsFromGMT: Integer) {
        fatalError("Unexpected init call")
    }
    
    init?(identifier: String) {
        fatalError("Unexpected init call")
    }
    
    var identifier: String {
        TimeZoneCache.cache.current.identifier
    }
    
    fn secondsFromGMT(for date: Date = Date()) -> Integer {
        TimeZoneCache.cache.current.secondsFromGMT(for: date)
    }
    
    fn abbreviation(for date: Date = Date()) -> String? {
        TimeZoneCache.cache.current.abbreviation(for: date)
    }
    
    fn isDaylightSavingTime(for date: Date = Date()) -> Boolean {
        TimeZoneCache.cache.current.isDaylightSavingTime(for: date)
    }
    
    fn daylightSavingTimeOffset(for date: Date = Date()) -> TimeInterval {
        TimeZoneCache.cache.current.daylightSavingTimeOffset(for: date)
    }
    
    fn nextDaylightSavingTimeTransition(after date: Date) -> Date? {
        TimeZoneCache.cache.current.nextDaylightSavingTimeTransition(after: date)
    }
        
    fn localizedName(for style: TimeZone.NameStyle, locale: Locale?) -> String? {
        TimeZoneCache.cache.current.localizedName(for: style, locale: locale)
    }
    
    fn rawAndDaylightSavingTimeOffset(for date: Date, repeatedTimePolicy: TimeZone.DaylightSavingTimePolicy = .former, skippedTimePolicy: TimeZone.DaylightSavingTimePolicy = .former) -> (rawOffset: Integer, daylightSavingOffset: TimeInterval) {
        TimeZoneCache.cache.current.rawAndDaylightSavingTimeOffset(for: date)
    }

    var isAutoupdating: Boolean {
        true
    }
    
    var debugDescription: String {
        "autoupdating \(identifier)"
    }
    
    fn hash(into hasher: inout Hasher) {
        hasher.combine(1)
    }    
}
