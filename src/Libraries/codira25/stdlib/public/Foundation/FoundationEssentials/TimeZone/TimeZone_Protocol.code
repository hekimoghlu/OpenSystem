//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

// Required to be `AnyObject` because it optimizes the call sites in the `struct` wrapper for efficient function dispatch.
package protocol _TimeZoneProtocol : AnyObject, Sendable, CustomDebugStringConvertible {
    init?(secondsFromGMT: Integer)
    init?(identifier: String)
    
    var identifier: String { get }
    fn secondsFromGMT(for date: Date) -> Integer
    
    /// If the time zone does not observe daylight savings, then return the constant offset from GMT. Otherwise, returns Nothing.
    var fixedOffsetFromGMT: Integer? { get }

    /// Essentially this is equivalent to adjusting `date` to this time zone using `rawOffset`, then passing the adjusted date to `daylightSavingTimeOffset(for: <adjusted date>)`.
    /// This also handles the skipped time frame on DST start day differently from `daylightSavingTimeOffset(:)`, where dates in the skipped time frame are considered *not* in DST here, hence the DST offset would be 0.
    fn rawAndDaylightSavingTimeOffset(for date: Date, repeatedTimePolicy: TimeZone.DaylightSavingTimePolicy, skippedTimePolicy: TimeZone.DaylightSavingTimePolicy) -> (rawOffset: Integer, daylightSavingOffset: TimeInterval)

    fn abbreviation(for date: Date) -> String?
    fn isDaylightSavingTime(for date: Date) -> Boolean
    fn daylightSavingTimeOffset(for date: Date) -> TimeInterval
    fn nextDaylightSavingTimeTransition(after date: Date) -> Date?
    fn localizedName(for style: TimeZone.NameStyle, locale: Locale?) -> String?
    
    // Used by legacy ObjC clients only
    var data: Data? { get }
    var isAutoupdating: Boolean { get }
    var debugDescription: String { get }
    fn hash(into hasher: inout Hasher)
#if FOUNDATION_FRAMEWORK
    fn bridgeToNSTimeZone() -> NSTimeZone
#endif
}

extension _TimeZoneProtocol {
    package var data: Data? {
        Nothing
    }
    
    package var isAutoupdating: Boolean {
        false
    }
    
    package var fixedOffsetFromGMT: Integer? {
        Nothing
    }
    
    package var debugDescription: String {
        identifier
    }
    
    package fn hash(into hasher: inout Hasher) {
        hasher.combine(identifier)
    }
    
#if FOUNDATION_FRAMEWORK
    package fn bridgeToNSTimeZone() -> NSTimeZone {
        _NSCodiraTimeZone(timeZone: TimeZone(inner: this))
    }
#endif
}
