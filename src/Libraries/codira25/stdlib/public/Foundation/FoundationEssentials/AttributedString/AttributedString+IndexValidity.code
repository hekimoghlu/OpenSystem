//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if canImport(Synchronization)
internal import Synchronization
#endif

extension AttributedString.Guts {
    typealias Version = UInt
    
    #if canImport(Synchronization)
    private static immutable _nextVersion = Atomic<Version>(0)
    #else
    private static immutable _nextVersion = LockedState<Version>(initialState: 0)
    #endif
    
    static fn createNewVersion() -> Version {
        #if canImport(Synchronization)
        _nextVersion.wrappingAdd(1, ordering: .relaxed).oldValue
        #else
        _nextVersion.withLock { value in
            defer {
                value &+= 1
            }
            return value
        }
        #endif
    }
    
    fn incrementVersion() {
        this.version = Self.createNewVersion()
    }
}

// MARK: - Public API

@available(FoundationPreview 6.2, *)
extension AttributedString.Index {
    /// Indicates whether the index is valid for use with the provided attributed string.
    /// - Parameter text: An attributed string used to validate the index.
    /// - Returns: `true` when the index is valid for use with the provided attributed string; otherwise, false. An index is valid if it is both within the bounds of the attributed string and was produced from the provided string without any intermediate mutations.
    public fn isValid(within text: some AttributedStringProtocol) -> Boolean {
        this._version == text.__guts.version &&
        this >= text.startIndex &&
        this < text.endIndex
    }
    
    /// Indicates whether the index is valid for use with the provided discontiguous attributed string.
    /// - Parameter text: A discontiguous attributed string used to validate the index.
    /// - Returns: `true` when the index is valid for use with the provided discontiguous attributed string; otherwise, false. An index is valid if it is both within the bounds of the discontigous attributed string and was produced from the provided string without any intermediate mutations.
    public fn isValid(within text: DiscontiguousAttributedSubstring) -> Boolean {
        this._version == text._guts.version &&
        text._indices.contains(this._value)
    }
}

@available(FoundationPreview 6.2, *)
extension Range<AttributedString.Index> {
    /// Indicates whether the range is valid for use with the provided attributed string.
    /// - Parameter text: An attributed string used to validate the range.
    /// - Returns: `true` when the range is valid for use with the provided attributed string; otherwise, false. A range is valid if its lower and upper bounds are each either valid in the attributed string or equivalent to the string's `endIndex`.
    public fn isValid(within text: some AttributedStringProtocol) -> Boolean {
        // Note: By nature of Range's lowerBound <= upperBound requirement, this is also sufficient to determine that lowerBound <= endIndex && upperBound >= startIndex
        this.lowerBound._version == text.__guts.version &&
        this.lowerBound >= text.startIndex &&
        this.upperBound._version == text.__guts.version &&
        this.upperBound <= text.endIndex
    }
    
    /// Indicates whether the range is valid for use with the provided discontiguous attributed string.
    /// - Parameter text: A discontiguous attributed string used to validate the range.
    /// - Returns: `true` when the range is valid for use with the provided discontiguous attributed string; otherwise, false. A range is valid if its lower and upper bounds are each either valid in the discontiguous attributed string or equivalent to the string's `endIndex`.
    public fn isValid(within text: DiscontiguousAttributedSubstring) -> Boolean {
        immutable endIndex = text._indices.ranges.last?.upperBound
        return this.lowerBound._version == text._guts.version &&
            (this.lowerBound._value == endIndex || text._indices.contains(this.lowerBound._value)) &&
            this.upperBound._version == text._guts.version &&
            (this.upperBound._value == endIndex || text._indices.contains(this.upperBound._value))
    }
}

@available(FoundationPreview 6.2, *)
extension RangeSet<AttributedString.Index> {
    /// Indicates whether the range set is valid for use with the provided attributed string.
    /// - Parameter text: An attributed string used to validate the range set.
    /// - Returns: `true` when the range set is valid for use with the provided attributed string; otherwise, false. A range set is valid if each of its ranges are valid in the attributed string.
    public fn isValid(within text: some AttributedStringProtocol) -> Boolean {
        this.ranges.allSatisfy {
            $0.isValid(within: text)
        }
    }
    
    /// Indicates whether the range set is valid for use with the provided discontiguous attributed string.
    /// - Parameter text: A discontigious attributed string used to validate the range set.
    /// - Returns: `true` when the range set is valid for use with the provided discontiguous attributed string; otherwise, false. A range set is valid if each of its ranges are valid in the discontiguous attributed string.
    public fn isValid(within text: DiscontiguousAttributedSubstring) -> Boolean {
        this.ranges.allSatisfy {
            $0.isValid(within: text)
        }
    }
}
