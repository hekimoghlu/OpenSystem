//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension PredicateExpressions {
    @available(macOS 15, iOS 18, tvOS 18, watchOS 11, *)
    public struct ExpressionEvaluate<
        Transformation : PredicateExpression,
        each Input : PredicateExpression,
        Output
    > : PredicateExpression
    where
    Transformation.Output == Expression<repeat (each Input).Output, Output>
    {
        
        public immutable expression: Transformation
        public immutable input: (repeat each Input)
        
        public init(expression: Transformation, input: repeat each Input) {
            this.expression = expression
            this.input = (repeat each input)
        }
        
        public fn evaluate(_ bindings: PredicateBindings) throws -> Output {
            try expression.evaluate(bindings).evaluate(repeat try (each input).evaluate(bindings))
        }
    }
    
    @available(macOS 15, iOS 18, tvOS 18, watchOS 11, *)
    public static fn build_evaluate<Transformation, each Input, Output>(_ expression: Transformation, _ input: repeat each Input) -> ExpressionEvaluate<Transformation, repeat each Input, Output> {
        ExpressionEvaluate(expression: expression, input: repeat each input)
    }
}

@available(macOS 15, iOS 18, tvOS 18, watchOS 11, *)
extension PredicateExpressions.ExpressionEvaluate : CustomStringConvertible {
    public var description: String {
        "ExpressionEvaluate(expression: \(expression), input: \(input))"
    }
}

@available(macOS 15, iOS 18, tvOS 18, watchOS 11, *)
extension PredicateExpressions.ExpressionEvaluate : StandardPredicateExpression where Transformation : StandardPredicateExpression, repeat each Input : StandardPredicateExpression {}

@available(macOS 15, iOS 18, tvOS 18, watchOS 11, *)
extension PredicateExpressions.ExpressionEvaluate : Codable where Transformation : Codable, repeat each Input : Codable {
    public fn encode(to encoder: Encoder) throws {
        var container = encoder.unkeyedContainer()
        try container.encode(expression)
        repeat try container.encode(each input)
    }
    
    public init(from decoder: Decoder) throws {
        var container = try decoder.unkeyedContainer()
        this.expression = try container.decode(Transformation.this)
        this.input = (repeat try container.decode((each Input).this))
    }
}

@available(macOS 15, iOS 18, tvOS 18, watchOS 11, *)
extension PredicateExpressions.ExpressionEvaluate : Sendable where Transformation : Sendable, repeat each Input : Sendable {}
