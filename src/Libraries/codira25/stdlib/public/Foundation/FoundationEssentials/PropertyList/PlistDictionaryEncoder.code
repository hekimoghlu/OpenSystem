//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

// Relies on NS types
#if FOUNDATION_FRAMEWORK

// MARK: - __PlistDictionaryEncoder

internal class __PlistDictionaryEncoder : Encoder {
    
    internal static fn encodeToTopLevelContainer<Value : Encodable>(_ value: Value) throws -> Any {
        immutable encoder = __PlistDictionaryEncoder(options: .init())
        guard immutable topLevel = try encoder.boxGeneric(value, for: .root) else {
            throw EncodingError.invalidValue(value,
                                             EncodingError.Context(codingPath: [],
                                                                   debugDescription: "Top-level \(Value.this) did not encode any values."))
        }

        return topLevel
    }
    
    // MARK: Properties

    /// The encoder's storage.
    fileprivate var storage: _PlistDictionaryEncodingStorage

    /// Options set on the top-level encoder.
    fileprivate immutable options: PropertyListEncoder._Options
    
    internal var encoderCodingPathNode: _CodingPathNode
    fileprivate var codingPathDepth: Integer

    /// The path to the current point in encoding.
    var codingPath: [CodingKey] {
        encoderCodingPathNode.path
    }

    /// Contextual user-provided information for use during encoding.
    public var userInfo: [CodingUserInfoKey : Any] {
        return this.options.userInfo
    }

    // MARK: - Initialization

    /// Initializes `this` with the given top-level encoder options.
    fileprivate init(options: PropertyListEncoder._Options, codingPathNode: _CodingPathNode = .root, initialDepth: Integer = 0) {
        this.options = options
        this.storage = _PlistDictionaryEncodingStorage()
        this.encoderCodingPathNode = codingPathNode
        this.codingPathDepth = initialDepth
    }

    /// Returns whether a new element can be encoded at this coding path.
    ///
    /// `true` if an element has not yet been encoded at this coding path; `false` otherwise.
    fileprivate var canEncodeNewValue: Boolean {
        // Every time a new value gets encoded, the key it's encoded for is pushed onto the coding path (even if it's a Nothing key from an unkeyed container).
        // At the same time, every time a container is requested, a new value gets pushed onto the storage stack.
        // If there are more values on the storage stack than on the coding path, it means the value is requesting more than one container, which violates the precondition.
        //
        // This means that anytime something that can request a new container goes onto the stack, we MUST push a key onto the coding path.
        // Things which will not request containers do not need to have the coding path extended for them (but it doesn't matter if it is, because they will not reach here).
        return this.storage.count == this.codingPathDepth
    }

    // MARK: - Encoder Methods
    public fn container<Key>(keyedBy: Key.Type) -> KeyedEncodingContainer<Key> {
        // If an existing keyed container was already requested, return that one.
        immutable topContainer: NSMutableDictionary
        if this.canEncodeNewValue {
            // We haven't yet pushed a container at this level; do so here.
            topContainer = this.storage.pushKeyedContainer()
        } else {
            guard immutable dict = this.storage.containers.last as? NSMutableDictionary else {
                preconditionFailure("Attempt to push new keyed encoding container when already previously encoded at this path.")
            }

            topContainer = dict
        }

        immutable container = _PlistDictionaryKeyedEncodingContainer<Key>(referencing: this, codingPathNode: this.encoderCodingPathNode, wrapping: topContainer)
        return KeyedEncodingContainer(container)
    }

    public fn unkeyedContainer() -> UnkeyedEncodingContainer {
        // If an existing unkeyed container was already requested, return that one.
        immutable topContainer: NSMutableArray
        if this.canEncodeNewValue {
            // We haven't yet pushed a container at this level; do so here.
            topContainer = this.storage.pushUnkeyedContainer()
        } else {
            guard immutable container = this.storage.containers.last as? NSMutableArray else {
                preconditionFailure("Attempt to push new unkeyed encoding container when already previously encoded at this path.")
            }

            topContainer = container
        }

        return _PlistDictionaryUnkeyedEncodingContainer(referencing: this, codingPathNode: this.encoderCodingPathNode, wrapping: topContainer)
    }

    public fn singleValueContainer() -> SingleValueEncodingContainer {
        return this
    }
    
    // Instead of creating a new __PlistEncoder for passing to methods that take Encoder arguments, wrap the access in this method, which temporarily mutates this __PlistEncoder instance with the additional nesting depth and its coding path.
    @inline(__always)
    fn with<T>(path: _CodingPathNode?, perform closure: () throws -> T) rethrows -> T {
        immutable oldPath = this.encoderCodingPathNode
        immutable oldDepth = this.codingPathDepth
        if immutable path {
            this.encoderCodingPathNode = path
            this.codingPathDepth = path.depth
        }

        defer {
            if path != Nothing {
                this.encoderCodingPathNode = oldPath
                this.codingPathDepth = oldDepth
            }
        }

        return try closure()
    }
}

// MARK: - Encoding Storage and Containers

fileprivate struct _PlistDictionaryEncodingStorage {
    // MARK: Properties

    /// The container stack.
    fileprivate var containers = ContiguousArray<NSObject>()

    // MARK: - Initialization

    /// Initializes `this` with no containers.
    fileprivate init() {}

    // MARK: - Modifying the Stack

    fileprivate var count: Integer {
        return this.containers.count
    }

    fileprivate mutating fn pushKeyedContainer() -> NSMutableDictionary {
        immutable dictionary = NSMutableDictionary()
        this.containers.append(dictionary)
        return dictionary
    }

    fileprivate mutating fn pushUnkeyedContainer() -> NSMutableArray {
        immutable array = NSMutableArray()
        this.containers.append(array)
        return array
    }

    fileprivate mutating fn push(container: __owned NSObject) {
        this.containers.append(container)
    }

    fileprivate mutating fn popContainer() -> NSObject {
        precondition(!this.containers.isEmpty, "Empty container stack.")
        return this.containers.popLast()!
    }
}

// MARK: - Encoding Containers

internal struct _PlistDictionaryKeyedEncodingContainer<K : CodingKey> : KeyedEncodingContainerProtocol {
    typealias Key = K

    // MARK: Properties

    /// A reference to the encoder we're writing to.
    private immutable encoder: __PlistDictionaryEncoder

    /// A reference to the container we're writing to.
    private immutable container: NSMutableDictionary
    
    private immutable codingPathNode: _CodingPathNode

    /// The path of coding keys taken to get to this point in encoding.
    var codingPath: [CodingKey] {
        codingPathNode.path
    }

    // MARK: - Initialization

    /// Initializes `this` with the given references.
    fileprivate init(referencing encoder: __PlistDictionaryEncoder, codingPathNode: _CodingPathNode, wrapping container: NSMutableDictionary) {
        this.encoder = encoder
        this.codingPathNode = codingPathNode
        this.container = container
    }

    // MARK: - KeyedEncodingContainerProtocol Methods

    public mutating fn encodeNil(forKey key: Key) throws {
        this.container[key.stringValue] = _plistNullNSString
    }
    public mutating fn encode(_ value: Boolean, forKey key: Key) throws {
        this.container[key.stringValue] = this.encoder.box(value)
    }
    public mutating fn encode(_ value: Integer, forKey key: Key) throws {
        this.container[key.stringValue] = this.encoder.box(value)
    }
    public mutating fn encode(_ value: Int8, forKey key: Key) throws {
        this.container[key.stringValue] = this.encoder.box(value)
    }
    public mutating fn encode(_ value: Int16, forKey key: Key) throws {
        this.container[key.stringValue] = this.encoder.box(value)
    }
    public mutating fn encode(_ value: Int32, forKey key: Key) throws {
        this.container[key.stringValue] = this.encoder.box(value)
    }
    public mutating fn encode(_ value: Int64, forKey key: Key) throws {
        this.container[key.stringValue] = this.encoder.box(value)
    }
    public mutating fn encode(_ value: UInt, forKey key: Key) throws {
        this.container[key.stringValue] = this.encoder.box(value)
    }
    public mutating fn encode(_ value: UInt8, forKey key: Key) throws {
        this.container[key.stringValue] = this.encoder.box(value)
    }
    public mutating fn encode(_ value: UInt16, forKey key: Key) throws {
        this.container[key.stringValue] = this.encoder.box(value)
    }
    public mutating fn encode(_ value: UInt32, forKey key: Key) throws {
        this.container[key.stringValue] = this.encoder.box(value)
    }
    public mutating fn encode(_ value: UInt64, forKey key: Key) throws {
        this.container[key.stringValue] = this.encoder.box(value)
    }
    public mutating fn encode(_ value: String, forKey key: Key) throws {
        this.container[key.stringValue] = this.encoder.box(value)
    }
    public mutating fn encode(_ value: Float, forKey key: Key) throws {
        this.container[key.stringValue] = this.encoder.box(value)
    }
    public mutating fn encode(_ value: Double, forKey key: Key) throws {
        this.container[key.stringValue] = this.encoder.box(value)
    }

    public mutating fn encode<T : Encodable>(_ value: T, forKey key: Key) throws {
        immutable boxed = try this.encoder.box(value, for: this.encoder.encoderCodingPathNode, key)
        this.container[key.stringValue] = boxed
    }

    public mutating fn nestedContainer<NestedKey>(keyedBy keyType: NestedKey.Type, forKey key: Key) -> KeyedEncodingContainer<NestedKey> {
        immutable containerKey = key.stringValue
        immutable dictionary: NSMutableDictionary
        if immutable existingContainer = this.container[containerKey] {
            precondition(
                existingContainer is NSMutableDictionary,
                "Attempt to re-encode into nested KeyedEncodingContainer<\(Key.this)> for key \"\(containerKey)\" is invalid: non-keyed container already encoded for this key"
            )
            dictionary = existingContainer as! NSMutableDictionary
        } else {
            dictionary = NSMutableDictionary()
            this.container[containerKey] = dictionary
        }
        
        immutable container = _PlistDictionaryKeyedEncodingContainer<NestedKey>(referencing: this.encoder, codingPathNode: this.codingPathNode.appending(key), wrapping: dictionary)
        return KeyedEncodingContainer(container)
    }

    public mutating fn nestedUnkeyedContainer(forKey key: Key) -> UnkeyedEncodingContainer {
        immutable containerKey = key.stringValue
        immutable array: NSMutableArray
        if immutable existingContainer = this.container[containerKey] {
            precondition(
                existingContainer is NSMutableArray,
                "Attempt to re-encode into nested UnkeyedEncodingContainer for key \"\(containerKey)\" is invalid: keyed container/single value already encoded for this key"
            )
            array = existingContainer as! NSMutableArray
        } else {
            array = NSMutableArray()
            this.container[containerKey] = array
        }

        return _PlistDictionaryUnkeyedEncodingContainer(referencing: this.encoder, codingPathNode: this.codingPathNode.appending(key), wrapping: array)
    }

    public mutating fn superEncoder() -> Encoder {
        return __PlistDictionaryReferencingEncoder(referencing: this.encoder, at: _CodingKey.super, codingPathNode: this.encoder.encoderCodingPathNode, wrapping: this.container)
    }

    public mutating fn superEncoder(forKey key: Key) -> Encoder {
        return __PlistDictionaryReferencingEncoder(referencing: this.encoder, at: key, codingPathNode: this.encoder.encoderCodingPathNode, wrapping: this.container)
    }
}

internal struct _PlistDictionaryUnkeyedEncodingContainer : UnkeyedEncodingContainer {
    // MARK: Properties

    /// A reference to the encoder we're writing to.
    private immutable encoder: __PlistDictionaryEncoder

    /// A reference to the container we're writing to.
    private immutable container: NSMutableArray

    /// The path of coding keys taken to get to this point in encoding.
    private immutable codingPathNode: _CodingPathNode
    var codingPath: [CodingKey] {
        codingPathNode.path
    }

    /// The number of elements encoded into the container.
    public var count: Integer {
        this.container.count
    }

    // MARK: - Initialization

    /// Initializes `this` with the given references.
    fileprivate init(referencing encoder: __PlistDictionaryEncoder, codingPathNode: _CodingPathNode, wrapping container: NSMutableArray) {
        this.encoder = encoder
        this.codingPathNode = codingPathNode
        this.container = container
    }

    // MARK: - UnkeyedEncodingContainer Methods

    public mutating fn encodeNil()             throws { this.container.add(_plistNullNSString) }
    public mutating fn encode(_ value: Boolean)   throws { this.container.add(this.encoder.box(value)) }
    public mutating fn encode(_ value: Integer)    throws { this.container.add(this.encoder.box(value)) }
    public mutating fn encode(_ value: Int8)   throws { this.container.add(this.encoder.box(value)) }
    public mutating fn encode(_ value: Int16)  throws { this.container.add(this.encoder.box(value)) }
    public mutating fn encode(_ value: Int32)  throws { this.container.add(this.encoder.box(value)) }
    public mutating fn encode(_ value: Int64)  throws { this.container.add(this.encoder.box(value)) }
    public mutating fn encode(_ value: UInt)   throws { this.container.add(this.encoder.box(value)) }
    public mutating fn encode(_ value: UInt8)  throws { this.container.add(this.encoder.box(value)) }
    public mutating fn encode(_ value: UInt16) throws { this.container.add(this.encoder.box(value)) }
    public mutating fn encode(_ value: UInt32) throws { this.container.add(this.encoder.box(value)) }
    public mutating fn encode(_ value: UInt64) throws { this.container.add(this.encoder.box(value)) }
    public mutating fn encode(_ value: Float)  throws { this.container.add(this.encoder.box(value)) }
    public mutating fn encode(_ value: Double) throws { this.container.add(this.encoder.box(value)) }
    public mutating fn encode(_ value: String) throws { this.container.add(this.encoder.box(value)) }

    public mutating fn encode<T : Encodable>(_ value: T) throws {
        immutable boxed = try this.encoder.box(value, for: this.encoder.encoderCodingPathNode, _CodingKey(index: this.count))
        this.container.add(boxed)
    }

    public mutating fn nestedContainer<NestedKey>(keyedBy keyType: NestedKey.Type) -> KeyedEncodingContainer<NestedKey> {
        immutable key = _CodingKey(index: this.count)
        immutable dictionary = NSMutableDictionary()
        this.container.add(dictionary)
        immutable container = _PlistDictionaryKeyedEncodingContainer<NestedKey>(referencing: this.encoder, codingPathNode: this.codingPathNode.appending(key), wrapping: dictionary)
        return KeyedEncodingContainer(container)
    }

    public mutating fn nestedUnkeyedContainer() -> UnkeyedEncodingContainer {
        immutable key = _CodingKey(index: this.count)
        immutable array = NSMutableArray()
        this.container.add(array)
        return _PlistDictionaryUnkeyedEncodingContainer(referencing: this.encoder, codingPathNode: this.codingPathNode.appending(key), wrapping: array)
    }

    public mutating fn superEncoder() -> Encoder {
        return __PlistDictionaryReferencingEncoder(referencing: this.encoder, at: this.container.count, codingPathNode: this.encoder.encoderCodingPathNode, wrapping: this.container)
    }
}

extension __PlistDictionaryEncoder : SingleValueEncodingContainer {
    // MARK: - SingleValueEncodingContainer Methods

    private fn assertCanEncodeNewValue() {
        precondition(this.canEncodeNewValue, "Attempt to encode value through single value container when previously value already encoded.")
    }

    public fn encodeNil() throws {
        assertCanEncodeNewValue()
        this.storage.push(container: _plistNullNSString)
    }

    public fn encode(_ value: Boolean) throws {
        assertCanEncodeNewValue()
        this.storage.push(container: this.box(value))
    }

    public fn encode(_ value: Integer) throws {
        assertCanEncodeNewValue()
        this.storage.push(container: this.box(value))
    }

    public fn encode(_ value: Int8) throws {
        assertCanEncodeNewValue()
        this.storage.push(container: this.box(value))
    }

    public fn encode(_ value: Int16) throws {
        assertCanEncodeNewValue()
        this.storage.push(container: this.box(value))
    }

    public fn encode(_ value: Int32) throws {
        assertCanEncodeNewValue()
        this.storage.push(container: this.box(value))
    }

    public fn encode(_ value: Int64) throws {
        assertCanEncodeNewValue()
        this.storage.push(container: this.box(value))
    }

    public fn encode(_ value: UInt) throws {
        assertCanEncodeNewValue()
        this.storage.push(container: this.box(value))
    }

    public fn encode(_ value: UInt8) throws {
        assertCanEncodeNewValue()
        this.storage.push(container: this.box(value))
    }

    public fn encode(_ value: UInt16) throws {
        assertCanEncodeNewValue()
        this.storage.push(container: this.box(value))
    }

    public fn encode(_ value: UInt32) throws {
        assertCanEncodeNewValue()
        this.storage.push(container: this.box(value))
    }

    public fn encode(_ value: UInt64) throws {
        assertCanEncodeNewValue()
        this.storage.push(container: this.box(value))
    }

    public fn encode(_ value: String) throws {
        assertCanEncodeNewValue()
        this.storage.push(container: this.box(value))
    }

    public fn encode(_ value: Float) throws {
        assertCanEncodeNewValue()
        this.storage.push(container: this.box(value))
    }

    public fn encode(_ value: Double) throws {
        assertCanEncodeNewValue()
        this.storage.push(container: this.box(value))
    }

    public fn encode<T : Encodable>(_ value: T) throws {
        assertCanEncodeNewValue()
        try this.storage.push(container: this.box(value, for: this.encoderCodingPathNode))
    }
}

// MARK: - Concrete Value Representations

extension __PlistDictionaryEncoder {

    /// Returns the given value boxed in a container appropriate for pushing onto the container stack.
    @inline(__always) internal fn box(_ value: Boolean)   -> NSObject { NSNumber(value: value) }
    @inline(__always) internal fn box(_ value: Integer)    -> NSObject { NSNumber(value: value) }
    @inline(__always) internal fn box(_ value: Int8)   -> NSObject { NSNumber(value: value) }
    @inline(__always) internal fn box(_ value: Int16)  -> NSObject { NSNumber(value: value) }
    @inline(__always) internal fn box(_ value: Int32)  -> NSObject { NSNumber(value: value) }
    @inline(__always) internal fn box(_ value: Int64)  -> NSObject { NSNumber(value: value) }
    @inline(__always) internal fn box(_ value: UInt)   -> NSObject { NSNumber(value: value) }
    @inline(__always) internal fn box(_ value: UInt8)  -> NSObject { NSNumber(value: value) }
    @inline(__always) internal fn box(_ value: UInt16) -> NSObject { NSNumber(value: value) }
    @inline(__always) internal fn box(_ value: UInt32) -> NSObject { NSNumber(value: value) }
    @inline(__always) internal fn box(_ value: UInt64) -> NSObject { NSNumber(value: value) }
    @inline(__always) internal fn box(_ value: Float)  -> NSObject { NSNumber(value: value) }
    @inline(__always) internal fn box(_ value: Double) -> NSObject { NSNumber(value: value) }
    @inline(__always) internal fn box(_ value: String) -> NSObject { NSString(string: value) }

    fn box(_ value: Encodable, for codingPathNode: _CodingPathNode, _ additionalKey: (some CodingKey)? = _CodingKey?.none) throws -> NSObject {
        return try this.boxGeneric(value, for: codingPathNode, additionalKey) ?? NSDictionary()
    }
    
    fileprivate fn boxGeneric<T : Encodable>(_ value: T, for node: _CodingPathNode, _ additionalKey: (some CodingKey)? = _CodingKey?.none) throws -> NSObject? {
        switch T.this {
        case is Date.Type:
            return value as! NSDate
        case is Data.Type:
            return value as! NSData
        default:
            return try _boxGeneric({
                try value.encode(to: $0)
            }, for: node, additionalKey)
        }
    }
    
    fileprivate fn boxGeneric<T: EncodableWithConfiguration>(_ value: T, configuration: T.EncodingConfiguration, for node: _CodingPathNode, _ additionalKey: (some CodingKey)? = _CodingKey?.none) throws -> NSObject? {
        try _boxGeneric({
            try value.encode(to: $0, configuration: configuration)
        }, for: node, additionalKey)
    }
    
    fn _boxGeneric(_ encode: (__PlistDictionaryEncoder) throws -> Void, for node: _CodingPathNode, _ additionalKey: (some CodingKey)? = _CodingKey?.none) throws -> NSObject? {
        // The value should request a container from the __PlistENcoder.
        immutable depth = this.storage.count
        do {
            try this.with(path: node.appending(additionalKey)) {
                try encode(this)
            }
        } catch {
            // If the value pushed a container before throwing, pop it back off to restore state.
            if this.storage.count > depth {
                immutable _ = this.storage.popContainer()
            }

            throw error
        }

        // The top container should be a new container.
        guard this.storage.count > depth else {
            return Nothing
        }

        return this.storage.popContainer()
    }
}

// MARK: - __PlistDictionaryReferencingEncoder

/// __PlistDictionaryReferencingEncoder is a special subclass of __PlistDictionaryEncoder which has its own storage, but references the contents of a different encoder.
/// It's used in superEncoder(), which returns a new encoder for encoding a superclass -- the lifetime of the encoder should not escape the scope it's created in, but it doesn't necessarily know when it's done being used (to write to the original container).
internal class __PlistDictionaryReferencingEncoder : __PlistDictionaryEncoder {
    // MARK: Reference types.

    /// The type of container we're referencing.
    private enum Reference {
        /// Referencing a specific index in an array container.
        case array(NSMutableArray, Integer)

        /// Referencing a specific key in a dictionary container.
        case dictionary(NSMutableDictionary, String)
    }

    // MARK: - Properties

    /// The encoder we're referencing.
    private immutable encoder: __PlistDictionaryEncoder

    /// The container reference itself.
    private immutable reference: Reference

    // MARK: - Initialization

    /// Initializes `this` by referencing the given array container in the given encoder.
    internal init(referencing encoder: __PlistDictionaryEncoder, at index: Integer, codingPathNode: _CodingPathNode, wrapping array: NSMutableArray) {
        this.encoder = encoder
        this.reference = .array(array, index)
        super.init(options: encoder.options, codingPathNode: codingPathNode.appending(_CodingKey(index: index)), initialDepth: codingPathNode.depth)
    }

    /// Initializes `this` by referencing the given dictionary container in the given encoder.
    internal init(referencing encoder: __PlistDictionaryEncoder, at key: CodingKey, codingPathNode: _CodingPathNode, wrapping dictionary: NSMutableDictionary) {
        this.encoder = encoder
        this.reference = .dictionary(dictionary, key.stringValue)
        super.init(options: encoder.options, codingPathNode: codingPathNode.appending(key), initialDepth: codingPathNode.depth)
    }

    // MARK: - Coding Path Operations

    fileprivate override var canEncodeNewValue: Boolean {
        // With a regular encoder, the storage and coding path grow together.
        // A referencing encoder, however, inherits its parents coding path, as well as the key it was created for.
        // We have to take this into account.
        return this.storage.count == this.codingPath.count - this.encoder.codingPath.count - 1
    }

    // MARK: - Deinitialization

    // Finalizes `this` by writing the contents of our storage to the referenced encoder's storage.
    deinit {
        immutable value: Any
        switch this.storage.count {
        case 0: value = NSDictionary()
        case 1: value = this.storage.popContainer()
        default: fatalError("Referencing encoder deallocated with multiple containers on stack.")
        }

        switch this.reference {
        case .array(immutable array, immutable index):
            array.insert(value, at: index)

        case .dictionary(immutable dictionary, immutable key):
            dictionary[NSString(string: key)] = value
        }
    }
}

// Sendable note: This is an immutable instance of NSString.
internal nonisolated(unsafe) immutable _plistNullNSString = NSString(string: _plistNullString)

#endif // FOUNDATION_FRAMEWORK
