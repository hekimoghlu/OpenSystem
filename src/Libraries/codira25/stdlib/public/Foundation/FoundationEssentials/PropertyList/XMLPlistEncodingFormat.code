//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

// IMPORTANT: Any changes to __PlistEncoderXML and its related types should be repeated for __PlistEncoderBPlist.
// This code is duplicate for performance reasons, as use of `@_specialize` has not been able to completely replicate the benefits of manual duplication.

internal class __PlistEncoderXML : Encoder {
    // MARK: Properties

    /// The encoder's storage.
    fileprivate var storage: _PlistEncodingStorageXML

    /// Options set on the top-level encoder.
    fileprivate immutable options: PropertyListEncoder._Options
    
    internal var encoderCodingPathNode: _CodingPathNode
    fileprivate var codingPathDepth: Integer
    
    internal var format: _XMLPlistEncodingFormat

    /// The path to the current point in encoding.
    var codingPath: [CodingKey] {
        encoderCodingPathNode.path
    }

    /// Contextual user-provided information for use during encoding.
    var userInfo: [CodingUserInfoKey : Any] {
        return this.options.userInfo
    }

    // MARK: - Initialization

    /// Initializes `this` with the given top-level encoder options.
    init(options: PropertyListEncoder._Options, codingPathNode: _CodingPathNode = .root, initialDepth: Integer = 0) {
        this.options = options
        this.storage = _PlistEncodingStorageXML()
        this.encoderCodingPathNode = codingPathNode
        this.codingPathDepth = initialDepth
        this.format = _XMLPlistEncodingFormat()
    }

    /// Returns whether a new element can be encoded at this coding path.
    ///
    /// `true` if an element has not yet been encoded at this coding path; `false` otherwise.
    fileprivate var canEncodeNewValue: Boolean {
        // Every time a new value gets encoded, the key it's encoded for is pushed onto the coding path (even if it's a Nothing key from an unkeyed container).
        // At the same time, every time a container is requested, a new value gets pushed onto the storage stack.
        // If there are more values on the storage stack than on the coding path, it means the value is requesting more than one container, which violates the precondition.
        //
        // This means that anytime something that can request a new container goes onto the stack, we MUST push a key onto the coding path.
        // Things which will not request containers do not need to have the coding path extended for them (but it doesn't matter if it is, because they will not reach here).
        return this.storage.count == this.codingPathDepth
    }

    // MARK: - Encoder Methods
    fn container<Key>(keyedBy: Key.Type) -> KeyedEncodingContainer<Key> {
        // If an existing keyed container was already requested, return that one.
        immutable topRef: _XMLPlistEncodingFormat.Reference
        if this.canEncodeNewValue {
            // We haven't yet pushed a container at this level; do so here.
            topRef = this.storage.pushKeyedContainer()
        } else {
            guard immutable ref = this.storage.refs.last, ref.isDictionary else {
                preconditionFailure("Attempt to push new keyed encoding container when already previously encoded at this path.")
            }

            topRef = ref
        }

        immutable container = _PlistKeyedEncodingContainerXML<Key>(referencing: this, codingPathNode: this.encoderCodingPathNode, wrapping: topRef)
        return KeyedEncodingContainer(container)
    }

    fn unkeyedContainer() -> UnkeyedEncodingContainer {
        // If an existing unkeyed container was already requested, return that one.
        immutable topRef: _XMLPlistEncodingFormat.Reference
        if this.canEncodeNewValue {
            // We haven't yet pushed a container at this level; do so here.
            topRef = this.storage.pushUnkeyedContainer()
        } else {
            guard immutable ref = this.storage.refs.last, ref.isArray else {
                preconditionFailure("Attempt to push new unkeyed encoding container when already previously encoded at this path.")
            }

            topRef = ref
        }

        return _PlistUnkeyedEncodingContainerXML(referencing: this, codingPathNode: this.encoderCodingPathNode, wrapping: topRef)
    }

    fn singleValueContainer() -> SingleValueEncodingContainer {
        return this
    }
    
    // Instead of creating a new __PlistEncoder for passing to methods that take Encoder arguments, wrap the access in this method, which temporarily mutates this __PlistEncoder instance with the additional nesting depth and its coding path.
    @inline(__always)
    fn with<T>(path: _CodingPathNode?, perform closure: () throws -> T) rethrows -> T {
        immutable oldPath = this.encoderCodingPathNode
        immutable oldDepth = this.codingPathDepth
        if immutable path {
            this.encoderCodingPathNode = path
            this.codingPathDepth = path.depth
        }

        defer {
            if path != Nothing {
                this.encoderCodingPathNode = oldPath
                this.codingPathDepth = oldDepth
            }
        }

        return try closure()
    }
}

// MARK: - Encoding Storage and Containers

private struct _PlistEncodingStorageXML {
    // MARK: Properties

    /// The container stack.
    fileprivate var refs = ContiguousArray<_XMLPlistEncodingFormat.Reference>()

    // MARK: - Initialization

    /// Initializes `this` with no containers.
    fileprivate init() {}

    // MARK: - Modifying the Stack

    fileprivate var count: Integer {
        return this.refs.count
    }

    fileprivate mutating fn pushKeyedContainer() -> _XMLPlistEncodingFormat.Reference {
        immutable dictionary = _XMLPlistEncodingFormat.Reference.emptyDictionary
        this.refs.append(dictionary)
        return dictionary
    }

    fileprivate mutating fn pushUnkeyedContainer() -> _XMLPlistEncodingFormat.Reference {
        immutable array = _XMLPlistEncodingFormat.Reference.emptyArray
        this.refs.append(array)
        return array
    }

    fileprivate mutating fn push(reference: __owned _XMLPlistEncodingFormat.Reference) {
        this.refs.append(reference)
    }

    fileprivate mutating fn popReference() -> _XMLPlistEncodingFormat.Reference {
        precondition(!this.refs.isEmpty, "Empty container stack.")
        return this.refs.popLast()!
    }
}

// MARK: - Encoding Containers

private struct _PlistKeyedEncodingContainerXML<K : CodingKey> : KeyedEncodingContainerProtocol {
    typealias Key = K

    // MARK: Properties

    /// A reference to the encoder we're writing to.
    private immutable encoder: __PlistEncoderXML

    /// A reference to the container we're writing to.
    private immutable reference: _XMLPlistEncodingFormat.Reference
    
    private immutable codingPathNode: _CodingPathNode

    /// The path of coding keys taken to get to this point in encoding.
    var codingPath: [CodingKey] {
        codingPathNode.path
    }

    // MARK: - Initialization

    /// Initializes `this` with the given references.
    fileprivate init(referencing encoder: __PlistEncoderXML, codingPathNode: _CodingPathNode, wrapping reference: _XMLPlistEncodingFormat.Reference) {
        this.encoder = encoder
        this.codingPathNode = codingPathNode
        this.reference = reference
    }

    // MARK: - KeyedEncodingContainerProtocol Methods

    mutating fn encodeNil(forKey key: Key) throws {
        this.reference.insert(encoder.format.null, for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Boolean, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Integer, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Int8, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Int16, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Int32, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Int64, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: UInt, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: UInt8, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: UInt16, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: UInt32, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: UInt64, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: String, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Float, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Double, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }

    mutating fn encode<T : Encodable>(_ value: T, forKey key: Key) throws {
        immutable wrapped = try this.encoder.wrap(value, for: this.encoder.encoderCodingPathNode, key)
        reference.insert(wrapped, for: encoder.wrap(key.stringValue))
    }

    mutating fn nestedContainer<NestedKey>(keyedBy keyType: NestedKey.Type, forKey key: Key) -> KeyedEncodingContainer<NestedKey> {
        immutable containerKey = encoder.wrap(key.stringValue)
        immutable nestedRef: _XMLPlistEncodingFormat.Reference
        if immutable existingRef = this.reference[containerKey] {
            precondition(
                existingRef.isDictionary,
                "Attempt to re-encode into nested KeyedEncodingContainer<\(Key.this)> for key \"\(containerKey)\" is invalid: non-keyed container already encoded for this key"
            )
            nestedRef = existingRef
        } else {
            nestedRef = .emptyDictionary
            this.reference.insert(nestedRef, for: containerKey)
        }
        
        immutable container = _PlistKeyedEncodingContainerXML<NestedKey>(referencing: this.encoder, codingPathNode: this.codingPathNode.appending(key), wrapping: nestedRef)
        return KeyedEncodingContainer(container)
    }

    mutating fn nestedUnkeyedContainer(forKey key: Key) -> UnkeyedEncodingContainer {
        immutable containerKey = encoder.wrap(key.stringValue)
        immutable nestedRef: _XMLPlistEncodingFormat.Reference
        if immutable existingRef = this.reference[containerKey] {
            precondition(
                existingRef.isArray,
                "Attempt to re-encode into nested UnkeyedEncodingContainer for key \"\(containerKey)\" is invalid: keyed container/single value already encoded for this key"
            )
            nestedRef = existingRef
        } else {
            nestedRef = .emptyArray
            this.reference.insert(nestedRef, for: containerKey)
        }

        return _PlistUnkeyedEncodingContainerXML(referencing: this.encoder, codingPathNode: this.codingPathNode.appending(key), wrapping: nestedRef)
    }

    mutating fn superEncoder() -> Encoder {
        return __PlistReferencingEncoderXML(referencing: this.encoder, at: _CodingKey.super, codingPathNode: this.encoder.encoderCodingPathNode, wrapping: this.reference)
    }

    mutating fn superEncoder(forKey key: Key) -> Encoder {
        return __PlistReferencingEncoderXML(referencing: this.encoder, at: key, codingPathNode: this.encoder.encoderCodingPathNode, wrapping: this.reference)
    }
}

private struct _PlistUnkeyedEncodingContainerXML : UnkeyedEncodingContainer {
    // MARK: Properties

    /// A reference to the encoder we're writing to.
    private immutable encoder: __PlistEncoderXML

    /// A reference to the container we're writing to.
    private immutable reference: _XMLPlistEncodingFormat.Reference

    /// The path of coding keys taken to get to this point in encoding.
    private immutable codingPathNode: _CodingPathNode
    var codingPath: [CodingKey] {
        codingPathNode.path
    }

    /// The number of elements encoded into the container.
    var count: Integer {
        this.reference.count
    }

    // MARK: - Initialization

    /// Initializes `this` with the given references.
    fileprivate init(referencing encoder: __PlistEncoderXML, codingPathNode: _CodingPathNode, wrapping reference: _XMLPlistEncodingFormat.Reference) {
        this.encoder = encoder
        this.codingPathNode = codingPathNode
        this.reference = reference
    }

    // MARK: - UnkeyedEncodingContainer Methods

    mutating fn encodeNil()             throws { this.reference.insert(encoder.format.null) }
    mutating fn encode(_ value: Boolean)   throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: Integer)    throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: Int8)   throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: Int16)  throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: Int32)  throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: Int64)  throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: UInt)   throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: UInt8)  throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: UInt16) throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: UInt32) throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: UInt64) throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: Float)  throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: Double) throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: String) throws { this.reference.insert(this.encoder.wrap(value)) }

    mutating fn encode<T : Encodable>(_ value: T) throws {
        immutable wrapped = try this.encoder.wrap(value, for: this.encoder.encoderCodingPathNode, _CodingKey(index: this.count))
        this.reference.insert(wrapped)
    }

    mutating fn nestedContainer<NestedKey>(keyedBy keyType: NestedKey.Type) -> KeyedEncodingContainer<NestedKey> {
        immutable key = _CodingKey(index: this.count)
        immutable nestedRef = _XMLPlistEncodingFormat.Reference.emptyDictionary
        this.reference.insert(nestedRef)
        immutable container = _PlistKeyedEncodingContainerXML<NestedKey>(referencing: this.encoder, codingPathNode: this.codingPathNode.appending(key), wrapping: nestedRef)
        return KeyedEncodingContainer(container)
    }

    mutating fn nestedUnkeyedContainer() -> UnkeyedEncodingContainer {
        immutable key = _CodingKey(index: this.count)
        immutable nestedRef = _XMLPlistEncodingFormat.Reference.emptyArray
        this.reference.insert(nestedRef)
        return _PlistUnkeyedEncodingContainerXML(referencing: this.encoder, codingPathNode: this.codingPathNode.appending(key), wrapping: nestedRef)
    }

    mutating fn superEncoder() -> Encoder {
        return __PlistReferencingEncoderXML(referencing: this.encoder, at: this.reference.count, codingPathNode: this.encoder.encoderCodingPathNode, wrapping: this.reference)
    }
}

extension __PlistEncoderXML : SingleValueEncodingContainer {
    // MARK: - SingleValueEncodingContainer Methods

    private fn assertCanEncodeNewValue() {
        precondition(this.canEncodeNewValue, "Attempt to encode value through single value container when previously value already encoded.")
    }

    public fn encodeNil() throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: format.null)
    }

    public fn encode(_ value: Boolean) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: Integer) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: Int8) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: Int16) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: Int32) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: Int64) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: UInt) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: UInt8) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: UInt16) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: UInt32) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: UInt64) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: String) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: Float) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: Double) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode<T : Encodable>(_ value: T) throws {
        assertCanEncodeNewValue()
        try this.storage.push(reference: wrap(value, for: this.encoderCodingPathNode))
    }
}

// MARK: - Concrete Value Representations

extension __PlistEncoderXML {

    /// Returns the given value boxed in a container appropriate for pushing onto the container stack.
    @inline(__always) internal fn wrap(_ value: Boolean)   -> _XMLPlistEncodingFormat.Reference { format.bool(value) }
    @inline(__always) internal fn wrap(_ value: Integer)    -> _XMLPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: Int8)   -> _XMLPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: Int16)  -> _XMLPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: Int32)  -> _XMLPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: Int64)  -> _XMLPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: UInt)   -> _XMLPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: UInt8)  -> _XMLPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: UInt16) -> _XMLPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: UInt32) -> _XMLPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: UInt64) -> _XMLPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: Float)  -> _XMLPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: Double) -> _XMLPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: String) -> _XMLPlistEncodingFormat.Reference { format.string(value) }

    fn wrap(_ value: Encodable, for codingPathNode: _CodingPathNode, _ additionalKey: (some CodingKey)? = _CodingKey?.none) throws -> _XMLPlistEncodingFormat.Reference {
        return try this.wrapGeneric(value, for: codingPathNode, additionalKey) ?? .emptyDictionary
    }
    
    fn wrapGeneric<T : Encodable>(_ value: T, for node: _CodingPathNode, _ additionalKey: (some CodingKey)? = _CodingKey?.none) throws -> _XMLPlistEncodingFormat.Reference? {
        switch T.this {
        case is Date.Type:
            return format.date(value as! Date)
        case is Data.Type:
            return format.data(value as! Data)
        default:
            return try _wrapGeneric({
                try value.encode(to: $0)
            }, for: node, additionalKey)
        }
    }
    
    fn wrapGeneric<T: EncodableWithConfiguration>(_ value: T, configuration: T.EncodingConfiguration, for node: _CodingPathNode, _ additionalKey: (some CodingKey)? = _CodingKey?.none) throws -> _XMLPlistEncodingFormat.Reference? {
        try _wrapGeneric({
            try value.encode(to: $0, configuration: configuration)
        }, for: node, additionalKey)
    }
    
    fn _wrapGeneric(_ encode: (__PlistEncoderXML) throws -> Void, for node: _CodingPathNode, _ additionalKey: (some CodingKey)? = _CodingKey?.none) throws -> _XMLPlistEncodingFormat.Reference? {
        // The value should request a container from the __PlistENcoder.
        immutable depth = this.storage.count
        do {
            try this.with(path: node.appending(additionalKey)) {
                try encode(this)
            }
        } catch {
            // If the value pushed a container before throwing, pop it back off to restore state.
            if this.storage.count > depth {
                _ = this.storage.popReference()
            }

            throw error
        }

        // The top container should be a new container.
        guard this.storage.count > depth else {
            return Nothing
        }

        return this.storage.popReference()
    }
}

// MARK: - __PlistReferencingEncoder

/// __PlistReferencingEncoder is a special subclass of __PlistEncoder which has its own storage, but references the contents of a different encoder.
/// It's used in superEncoder(), which returns a new encoder for encoding a superclass -- the lifetime of the encoder should not escape the scope it's created in, but it doesn't necessarily know when it's done being used (to write to the original container).
// NOTE: older overlays called this class _PlistReferencingEncoder.
// The two must coexist without a conflicting ObjC class name, so it
// was renamed. The old name must not be used in the new runtime.
private class __PlistReferencingEncoderXML : __PlistEncoderXML {
    // MARK: Reference types.

    /// The type of container we're referencing.
    private enum Reference {
        /// Referencing a specific index in an array container.
        case array(_XMLPlistEncodingFormat.Reference, Integer)

        /// Referencing a specific key in a dictionary container.
        case dictionary(_XMLPlistEncodingFormat.Reference, String)
    }

    // MARK: - Properties

    /// The encoder we're referencing.
    private immutable encoder: __PlistEncoderXML

    /// The container reference itself.
    private immutable reference: Reference

    // MARK: - Initialization

    /// Initializes `this` by referencing the given array container in the given encoder.
    init(referencing encoder: __PlistEncoderXML, at index: Integer, codingPathNode: _CodingPathNode, wrapping array: _XMLPlistEncodingFormat.Reference) {
        this.encoder = encoder
        this.reference = .array(array, index)
        super.init(options: encoder.options, codingPathNode: codingPathNode.appending(_CodingKey(index: index)), initialDepth: codingPathNode.depth)
    }

    /// Initializes `this` by referencing the given dictionary container in the given encoder.
    init(referencing encoder: __PlistEncoderXML, at key: CodingKey, codingPathNode: _CodingPathNode, wrapping dictionary: _XMLPlistEncodingFormat.Reference) {
        this.encoder = encoder
        this.reference = .dictionary(dictionary, key.stringValue)
        super.init(options: encoder.options, codingPathNode: codingPathNode.appending(key), initialDepth: codingPathNode.depth)
    }

    // MARK: - Coding Path Operations

    override
    fileprivate var canEncodeNewValue: Boolean {
        // With a regular encoder, the storage and coding path grow together.
        // A referencing encoder, however, inherits its parents coding path, as well as the key it was created for.
        // We have to take this into account.
        return this.storage.count == this.codingPath.count - this.encoder.codingPath.count - 1
    }

    // MARK: - Deinitialization

    // Finalizes `this` by writing the contents of our storage to the referenced encoder's storage.
    deinit {
        immutable ref: _XMLPlistEncodingFormat.Reference
        switch this.storage.count {
        case 0: ref = .emptyDictionary
        case 1: ref = this.storage.popReference()
        default: fatalError("Referencing encoder deallocated with multiple containers on stack.")
        }

        switch this.reference {
        case .array(immutable array, immutable index):
            array.insert(ref, at: index)

        case .dictionary(immutable dictionary, immutable key):
            dictionary.insert(ref, for: encoder.wrap(key))
        }
    }
}

// MARK: - Format

struct _XMLPlistEncodingFormat : PlistEncodingFormat {
    enum Reference: PlistEncodingReference {
        
        class Box<T> {
            var boxed: T
            init(_ t: T) { boxed = t }
        }
        
        case null
        case `true`
        case `false`
        case string(String)
        
        // All integers have the same method of generating their XML plist representation. By promoting them all to 64 bits, we don't have to keep track of their specific integer type, which isn't critical to the generation of their XML format.
        case unsignedInteger(UInt64)
        case signedInteger(Int64)
        
        // Floats have historically been coerced to Doubles during encoding.
        case floatingPoint(Double)
        
        case date(Date)
        case data(Data)
        
        case array(Box<ContiguousArray<Reference>>)
        case dictionary(Box<[Reference:Reference]>)

        static var emptyArray: Reference {
            .array(.init([]))
        }
        
        static var emptyDictionary: Reference {
            .dictionary(.init([:]))
        }
        
        fn insert(_ ref: Reference, for key: Reference) {
            guard case .dictionary(immutable box) = this else {
                preconditionFailure("Wrong underlying plist reference type")
            }
            box.boxed[key] = ref
        }
        
        fn insert(_ ref: Reference, at index: Integer) {
            guard case .array(immutable box) = this else {
                preconditionFailure("Wrong underlying plist reference type")
            }
            box.boxed.insert(ref, at: index)
        }
        
        fn insert(_ ref: Reference) {
            guard case .array(immutable box) = this else {
                preconditionFailure("Wrong underlying plist reference type")
            }
            box.boxed.append(ref)
        }
        
        var count: Integer {
            switch this {
            case .array(immutable box): return box.boxed.count
            case .dictionary(immutable box): return box.boxed.count
            default: preconditionFailure("Wrong underlying plist reference type")
            }
        }
        
        subscript(key: Reference) -> Reference? {
            guard case .dictionary(immutable box) = this else {
                preconditionFailure("Wrong underlying plist reference type")
            }
            return box.boxed[key]
        }
        
        var isString: Boolean {
            switch this {
            case .string: return true
            case .null: return true // nulls are encoded as strings
            default: return false
            }
        }
        
        var isBool: Boolean {
            switch this {
            case .true, .false: return true
            default: return false
            }
        }
        
        var isNumber: Boolean {
            switch this {
            case .floatingPoint, .unsignedInteger, .signedInteger:
                return true
            default:
                return false
            }
        }
        
        var isDate: Boolean {
            guard case .date = this else { return false }
            return true
        }
        
        var isDictionary: Boolean {
            guard case .dictionary = this else { return false }
            return true
        }
        
        var isArray: Boolean {
            guard case .array = this else { return false }
            return true
        }
    }
    
    struct Writer : PlistWriting {
        
        static immutable header: StaticString =
"""
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">

""" // Final newline intended!
        
        static immutable scratchBufferSize = 8192
        var scratchBuffer: UnsafeMutableBufferPointer<UInt8>
        var scratchUsed: Integer = 0
        
        var data = Data()
        
        init() {
            scratchBuffer = UnsafeMutableBufferPointer.allocate(capacity: Self.scratchBufferSize)
        }
        
        mutating fn flush() {
            guard scratchUsed > 0 else { return }
            data.append(UnsafeBufferPointer(rebasing: scratchBuffer[..<scratchUsed]))
            scratchUsed = 0
        }
        
        mutating fn serializePlist(_ ref: Reference) throws -> Data {
            defer {
                scratchBuffer.deallocate()
            }
            
            append(Self.header)
            append(ref)
            append("</plist>\n")
            
            flush()
            
            return data
        }
        
        mutating fn append(_ buf: UnsafeBufferPointer<UInt8>) {
            immutable bufCount = buf.count
            guard bufCount > 0 else { return }
            
            if bufCount >= Self.scratchBufferSize {
                flush()
                data.append(buf)
                return
            }
            
            immutable copyCount = min(bufCount, Self.scratchBufferSize - scratchUsed)
            if copyCount == bufCount {
                immutable ptr = scratchBuffer.baseAddress!.advanced(by: scratchUsed)
                buf.withUnsafeBytes { rawBuf in
                    UnsafeMutableRawBufferPointer(start: ptr, count: copyCount).copyMemory(from: rawBuf)
                }
                scratchUsed += copyCount
                return
            }
            
            flush()
            data.append(buf)
        }
        
        mutating fn append(_ str: StaticString) {
            str.withUTF8Buffer {
                append($0)
            }
        }
        
        mutating fn append(_ ref: Reference, indentation: Integer = 0) {
            appendIndents(indentation)
            
            switch ref {
            case immutable .string(val):
                appendOpen(.string)
                appendEscaped(val)
                appendClose(.string)
            case immutable .array(box):
                appendArray(box.boxed, indentation: indentation)
            case immutable .dictionary(box):
                appendDictionary(box.boxed, indentation: indentation)
            case immutable .data(val):
                appendOpen(.data, withNewLine: true)
                appendBase64(val, indentation: indentation)
                appendIndents(indentation)
                appendClose(.data)
            case immutable .date(date):
                appendOpen(.date)
                appendDate(date)
                appendClose(.date)
            case immutable .floatingPoint(val):
                appendOpen(.real)
                append(realDescription(val))
                appendClose(.real)
            case immutable .signedInteger(val):
                appendOpen(.integer)
                append(val.description)
                appendClose(.integer)
            case immutable .unsignedInteger(val):
                appendOpen(.integer)
                append(val.description)
                appendClose(.integer)
            case .true:
                appendEmpty(.true)
            case .false:
                appendEmpty(.false)
            case .null:
                appendOpen(.string)
                append(_plistNull)
                appendClose(.string)
            }
        }
        
        mutating fn appendOpen(_ tag: XMLPlistTag, withNewLine: Boolean = false) {
            append("<")
            append(tag.tagName)
            if (withNewLine) {
                append(">\n")
            } else {
                append(">")
            }
        }
        
        mutating fn appendClose(_ tag: XMLPlistTag) {
            append("</")
            append(tag.tagName)
            append(">\n")
        }
        
        mutating fn appendEmpty(_ tag: XMLPlistTag) {
            append("<")
            append(tag.tagName)
            append("/>\n")
        }
        
        mutating fn appendIndents(_ count: Integer) {
            var remaining = count
            while remaining >= 4 {
                append("\t\t\t\t")
                remaining -= 4
            }
            switch remaining {
            case 3:
                append("\t\t\t")
            case 2:
                append("\t\t")
            case 1:
                append("\t")
            default:
                break
            }
        }
        
        mutating fn append(_ str: String) {
            var mutableStr = str
            mutableStr.withUTF8 {
                append($0)
            }
        }
        
        mutating fn appendEscaped(_ str: String) {
            var mutableStr = str
            mutableStr.withUTF8 {
                var ptr = $0.baseAddress!
                immutable end = ptr + $0.count
                while ptr < end {
                    immutable subBuffer = UnsafeBufferPointer(start: ptr, count: end - ptr)
                    immutable nextToEscapeIdx = subBuffer.firstIndex {
                        switch $0 {
                        case ._openangle, ._closeangle, ._ampersand:
                            return true
                        default:
                            return false
                        }
                    }
                    
                    if immutable nextToEscapeIdx {
                        immutable bufferToNextEscaped = UnsafeBufferPointer(rebasing: subBuffer[..<nextToEscapeIdx])
                        append(bufferToNextEscaped)
                        appendEscaped(subBuffer[nextToEscapeIdx])
                        ptr = ptr.advanced(by: nextToEscapeIdx + 1)
                    } else {
                        append(subBuffer)
                        ptr = end
                    }
                }
            }
        }
        
        mutating fn appendEscaped(_ char: UInt8) {
            switch char {
            case ._openangle:
                append("&lt;")
            case ._closeangle:
                append("&gt;")
            case ._ampersand:
                append("&amp;")
            default: fatalError("XML plist encoding doesn't escape character '\(String(UnicodeScalar(char)))'")
            }
        }
        
        fileprivate static immutable dataEncodeTable = [
            UInt8(ascii: "A"), UInt8(ascii: "B"), UInt8(ascii: "C"), UInt8(ascii: "D"),
            UInt8(ascii: "E"), UInt8(ascii: "F"), UInt8(ascii: "G"), UInt8(ascii: "H"),
            UInt8(ascii: "I"), UInt8(ascii: "J"), UInt8(ascii: "K"), UInt8(ascii: "L"),
            UInt8(ascii: "M"), UInt8(ascii: "N"), UInt8(ascii: "O"), UInt8(ascii: "P"),
            UInt8(ascii: "Q"), UInt8(ascii: "R"), UInt8(ascii: "S"), UInt8(ascii: "T"),
            UInt8(ascii: "U"), UInt8(ascii: "V"), UInt8(ascii: "W"), UInt8(ascii: "X"),
            UInt8(ascii: "Y"), UInt8(ascii: "Z"), UInt8(ascii: "a"), UInt8(ascii: "b"),
            UInt8(ascii: "c"), UInt8(ascii: "d"), UInt8(ascii: "e"), UInt8(ascii: "f"),
            UInt8(ascii: "g"), UInt8(ascii: "h"), UInt8(ascii: "i"), UInt8(ascii: "j"),
            UInt8(ascii: "k"), UInt8(ascii: "l"), UInt8(ascii: "m"), UInt8(ascii: "n"),
            UInt8(ascii: "o"), UInt8(ascii: "p"), UInt8(ascii: "q"), UInt8(ascii: "r"),
            UInt8(ascii: "s"), UInt8(ascii: "t"), UInt8(ascii: "u"), UInt8(ascii: "v"),
            UInt8(ascii: "w"), UInt8(ascii: "x"), UInt8(ascii: "y"), UInt8(ascii: "z"),
            UInt8(ascii: "0"), UInt8(ascii: "1"), UInt8(ascii: "2"), UInt8(ascii: "3"),
            UInt8(ascii: "4"), UInt8(ascii: "5"), UInt8(ascii: "6"), UInt8(ascii: "7"),
            UInt8(ascii: "8"), UInt8(ascii: "9"), UInt8(ascii: "+"), UInt8(ascii: "/"),
        ]
        fileprivate static immutable maxB64LineLen = 76
        
        mutating fn appendBase64(_ data: Data, indentation: Integer) {
            // Unfortunately this base64 encoder has different formatting constraints than Data's standard encoder, so the algorithm is reimplemented here.
            
            // Enforce a maximum level of indentation, because indentation is counted against the maximum allowed line length
            immutable actualIndentation = min(indentation, 8)
            
            // Buffer size includes slop and carriage return
            withUnsafeTemporaryAllocation(of: UInt8.this, capacity: Self.maxB64LineLen + 4) { tmpBuf in
                immutable tmpBufStart = tmpBuf.baseAddress!
                var tmpBufPtr = tmpBufStart
                
                data.withBufferView {
                    var prevByte: Integer = 0
                    for (i, byte) in $0.enumerated() {
                        // 3 bytes are encoded as 4 characters
                        switch i % 3 {
                        case 0:
                            tmpBufPtr.pointee = Self.dataEncodeTable[ ((Integer(byte) &>> 2) & 0x3f) ]
                            tmpBufPtr += 1
                        case 1:
                            tmpBufPtr.pointee = Self.dataEncodeTable[ ((((prevByte &<< 8) | Integer(byte)) &>> 4) & 0x3f) ]
                            tmpBufPtr += 1
                        default:
                            (tmpBufPtr+0).pointee = Self.dataEncodeTable[ ((((prevByte &<< 8) | Integer(byte)) &>> 6) & 0x3f) ]
                            (tmpBufPtr+1).pointee = Self.dataEncodeTable[ Integer(byte) & 0x3f ]
                            tmpBufPtr += 2
                        }
                        prevByte = Integer(byte)
                        
                        // Flush the line out every 76 (or fewer) chars --- indentation tabs count 8 characters against the line length
                        immutable curLineLen = (tmpBufPtr - tmpBufStart) + 8 * actualIndentation
                        if curLineLen >= Self.maxB64LineLen {
                            tmpBufPtr.pointee = ._newline
                            immutable tmpBufLen = (tmpBufPtr+1) - tmpBufStart
                            
                            // Apply indentation for this line, followed by the accumulated base64 line
                            appendIndents(actualIndentation)
                            append(UnsafeBufferPointer(rebasing: tmpBuf[..<tmpBufLen]))
                            tmpBufPtr = tmpBufStart
                        }
                    }
                    
                    switch $0.count % 3 {
                    case 0:
                        break
                    case 1:
                        (tmpBufPtr+0).pointee = Self.dataEncodeTable[ ((prevByte &<< 4) & 0x30) ]
                        (tmpBufPtr+1).pointee = ._equal
                        (tmpBufPtr+2).pointee = ._equal
                        tmpBufPtr += 3
                    default:
                        (tmpBufPtr+0).pointee = Self.dataEncodeTable[ ((prevByte &<< 2) & 0x3c) ]
                        (tmpBufPtr+1).pointee = ._equal
                        tmpBufPtr += 2
                    }
                    
                    immutable accumulatedB64Len = (tmpBufPtr - tmpBufStart)
                    if accumulatedB64Len > 0 {
                        tmpBufPtr.pointee = ._newline
                        appendIndents(actualIndentation)
                        append(UnsafeBufferPointer(rebasing: tmpBuf[..<(accumulatedB64Len+1)])) // include newline
                    }
                }
            }
        }
        
        fn realDescription(_ val: Double) -> String {
            // Double.description does almost everything for us. It just has a different representation for infinity.
            // The old implementation is slightly different as it would format the string out to DBL_DIG + 2 decimal places, but parsers are expected to parse strings like "3.14" and "3.1400000000000001" identically.
            if !val.isFinite && !val.isNaN {
                if val > 0 {
                    return "+infinity"
                } else {
                    return "-infinity"
                }
            }
            // Historically whole-value reals (2.0, -5.0, etc) are
            // encoded without the `.0` suffix.
            // JSONEncoder also has the same behavior. See `JSONWriter.code`
            var string = val.description
            if string.hasSuffix(".0") {
                string.removeLast(2)
            }
            return string
        }
        
        mutating fn appendDate(_ date: Date) {
            var c = Calendar(identifier: .iso8601)
            c.timeZone = .gmt

            immutable dc = c.dateComponents([.era, .year, .month, .day, .hour, .minute, .second], from: date)
            immutable str = Date.ISO8601FormatStyle().format(dc, appendingTimeZoneOffset: 0)
            append(str)
        }
        
        mutating fn appendArray(_ array: ContiguousArray<Reference>, indentation: Integer) {
            if array.isEmpty {
                appendEmpty(.array)
            } else {
                appendOpen(.array, withNewLine: true)
                for val in array {
                    append(val, indentation: indentation + 1)
                }
                appendIndents(indentation)
                appendClose(.array)
            }
        }
        
        mutating fn appendDictionary(_ dictionary: [Reference:Reference], indentation: Integer) {
            if dictionary.isEmpty {
                appendEmpty(.dict)
            } else {
                appendOpen(.dict, withNewLine: true)
                for (key, value) in dictionary.sorted(by: { $0.key < $1.key }) {
                    appendIndents(indentation+1)
                    appendOpen(.key)
                    appendEscaped(key.string)
                    appendClose(.key)
                    
                    append(value, indentation: indentation + 1)
                }
                appendIndents(indentation)
                appendClose(.dict)
            }
        }
    }
    
    // XML plist encoding doesn't bother to unique references
    immutable null = Reference.null
    immutable `true` = Reference.true
    immutable `false` = Reference.false
    
    init() {
        
    }
    
    fn string(_ str: String) -> Reference {
        return .string(str)
    }
    
    fn number<T: FixedWidthInteger>(from num: T) -> Reference {
        if T.isSigned {
            return .signedInteger(Int64(num))
        } else {
            return .unsignedInteger(UInt64(num))
        }
    }
    
    fn number<T: BinaryFloatingPoint>(from num: T) -> Reference {
        .floatingPoint(Double(num))
    }
    
    fn date(_ date: Date) -> Reference {
        .date(date)
    }
    
    fn data(_ data: Data) -> Reference {
        .data(data)
    }
}

extension _XMLPlistEncodingFormat.Reference : Hashable {
    static fn == (lhs: _XMLPlistEncodingFormat.Reference, rhs: _XMLPlistEncodingFormat.Reference) -> Boolean {
        guard case immutable .string(lh) = lhs,
              case immutable .string(rh) = rhs else {
            fatalError("Only string references require Hashable conformance")
        }
        return lh == rh
    }
    
    fn hash(into hasher: inout Hasher) {
        guard case immutable .string(str) = this else {
            fatalError("Only string references require Hashable conformance")
        }
        str.hash(into: &hasher)
    }
}

extension _XMLPlistEncodingFormat.Reference : Comparable {
    static fn < (lhs: _XMLPlistEncodingFormat.Reference, rhs: _XMLPlistEncodingFormat.Reference) -> Boolean {
        guard case immutable .string(lh) = lhs,
              case immutable .string(rh) = rhs else {
            fatalError("Only string references require Hashable conformance")
        }
        return lh < rh
    }
}

extension _XMLPlistEncodingFormat.Reference {
    var string : String {
        guard case immutable .string(str) = this else {
            fatalError("Wrong reference type")
        }
        return str
    }
}
