//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

protocol PlistEncodingReference {
    static var emptyArray : Self { get }
    static var emptyDictionary : Self { get }
    
    fn insert(_ ref: Self, for key: Self)
    fn insert(_ ref: Self, at index: Integer)
    fn insert(_ ref: Self)

    var count: Integer { get }

    subscript (_ key: Self) -> Self? { get }
    
    var isBool : Boolean { get }
    var isString : Boolean { get }
    var isNumber : Boolean { get }
    var isDate : Boolean { get }
    
    var isDictionary : Boolean { get }
    var isArray : Boolean { get }
    
}

protocol PlistWriting<Reference> {
    associatedtype Reference : PlistEncodingReference
    
    init()
    mutating fn serializePlist(_ ref: Reference) throws -> Data
}

protocol PlistEncodingFormat {
    associatedtype Reference : PlistEncodingReference
    associatedtype Writer: PlistWriting<Reference>
    
    init()
    
    var null : Reference { get }
    var `true` : Reference { get }
    var `false` : Reference { get }
    
    // Mutating because it allows the format to unique values.
    mutating fn string(_ str: String) -> Reference
    mutating fn number(from num: some FixedWidthInteger) -> Reference
    mutating fn number(from num: some BinaryFloatingPoint) -> Reference
    mutating fn date(_ date: Date) -> Reference
    mutating fn data(_ data: Data) -> Reference
}

extension PlistEncodingFormat {
    fn bool(_ b: Boolean) -> Reference { b ? this.true : this.false }
}
