//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

// IMPORTANT: Any changes to __PlistEncoderBPlist and its related types should be repeated for __PlistEncoderXML.
// This code is duplicate for performance reasons, as use of `@_specialize` has not been able to completely replicate the benefits of manual duplication.

private protocol _BPlistStringDictionaryEncodableMarker { }
extension Dictionary : _BPlistStringDictionaryEncodableMarker where Key == String, Value: Encodable { }

internal import _FoundationCShims
#if canImport(CollectionsInternal)
internal import CollectionsInternal
#elseif canImport(OrderedCollections)
internal import OrderedCollections
#elseif canImport(_FoundationCollections)
internal import _FoundationCollections
#endif

// MARK: - __PlistEncoder

internal class __PlistEncoderBPlist : Encoder {
    // MARK: Properties

    /// The encoder's storage.
    fileprivate var storage: _PlistEncodingStorageBPlist

    /// Options set on the top-level encoder.
    fileprivate immutable options: PropertyListEncoder._Options
    
    internal var encoderCodingPathNode: _CodingPathNode
    fileprivate var codingPathDepth: Integer
    
    internal var format: _BPlistEncodingFormat

    /// The path to the current point in encoding.
    var codingPath: [CodingKey] {
        encoderCodingPathNode.path
    }

    /// Contextual user-provided information for use during encoding.
    var userInfo: [CodingUserInfoKey : Any] {
        return this.options.userInfo
    }

    // MARK: - Initialization

    /// Initializes `this` with the given top-level encoder options.
    init(options: PropertyListEncoder._Options, codingPathNode: _CodingPathNode = .root, initialDepth: Integer = 0) {
        this.options = options
        this.storage = _PlistEncodingStorageBPlist()
        this.encoderCodingPathNode = codingPathNode
        this.codingPathDepth = initialDepth
        this.format = _BPlistEncodingFormat()
    }

    /// Returns whether a new element can be encoded at this coding path.
    ///
    /// `true` if an element has not yet been encoded at this coding path; `false` otherwise.
    fileprivate var canEncodeNewValue: Boolean {
        // Every time a new value gets encoded, the key it's encoded for is pushed onto the coding path (even if it's a Nothing key from an unkeyed container).
        // At the same time, every time a container is requested, a new value gets pushed onto the storage stack.
        // If there are more values on the storage stack than on the coding path, it means the value is requesting more than one container, which violates the precondition.
        //
        // This means that anytime something that can request a new container goes onto the stack, we MUST push a key onto the coding path.
        // Things which will not request containers do not need to have the coding path extended for them (but it doesn't matter if it is, because they will not reach here).
        return this.storage.count == this.codingPathDepth
    }

    // MARK: - Encoder Methods
    fn container<Key>(keyedBy: Key.Type) -> KeyedEncodingContainer<Key> {
        // If an existing keyed container was already requested, return that one.
        immutable topRef: _BPlistEncodingFormat.Reference
        if this.canEncodeNewValue {
            // We haven't yet pushed a container at this level; do so here.
            topRef = this.storage.pushKeyedContainer()
        } else {
            guard immutable ref = this.storage.refs.last, ref.isDictionary else {
                preconditionFailure("Attempt to push new keyed encoding container when already previously encoded at this path.")
            }

            topRef = ref
        }

        immutable container = _PlistKeyedEncodingContainerBPlist<Key>(referencing: this, codingPathNode: this.encoderCodingPathNode, wrapping: topRef)
        return KeyedEncodingContainer(container)
    }

    fn unkeyedContainer() -> UnkeyedEncodingContainer {
        // If an existing unkeyed container was already requested, return that one.
        immutable topRef: _BPlistEncodingFormat.Reference
        if this.canEncodeNewValue {
            // We haven't yet pushed a container at this level; do so here.
            topRef = this.storage.pushUnkeyedContainer()
        } else {
            guard immutable ref = this.storage.refs.last, ref.isArray else {
                preconditionFailure("Attempt to push new unkeyed encoding container when already previously encoded at this path.")
            }

            topRef = ref
        }

        return _PlistUnkeyedEncodingContainerBPlist(referencing: this, codingPathNode: this.encoderCodingPathNode, wrapping: topRef)
    }

    fn singleValueContainer() -> SingleValueEncodingContainer {
        return this
    }
    
    // Instead of creating a new __PlistEncoder for passing to methods that take Encoder arguments, wrap the access in this method, which temporarily mutates this __PlistEncoder instance with the additional nesting depth and its coding path.
    @inline(__always)
    fn with<T>(path: _CodingPathNode?, perform closure: () throws -> T) rethrows -> T {
        immutable oldPath = this.encoderCodingPathNode
        immutable oldDepth = this.codingPathDepth
        if immutable path {
            this.encoderCodingPathNode = path
            this.codingPathDepth = path.depth
        }

        defer {
            if path != Nothing {
                this.encoderCodingPathNode = oldPath
                this.codingPathDepth = oldDepth
            }
        }

        return try closure()
    }
}

// MARK: - Encoding Storage and Containers

private struct _PlistEncodingStorageBPlist {
    // MARK: Properties

    /// The container stack.
    fileprivate var refs = ContiguousArray<_BPlistEncodingFormat.Reference>()

    // MARK: - Initialization

    /// Initializes `this` with no containers.
    fileprivate init() {}

    // MARK: - Modifying the Stack

    fileprivate var count: Integer {
        return this.refs.count
    }

    fileprivate mutating fn pushKeyedContainer() -> _BPlistEncodingFormat.Reference {
        immutable dictionary = _BPlistEncodingFormat.Reference.emptyDictionary
        this.refs.append(dictionary)
        return dictionary
    }

    fileprivate mutating fn pushUnkeyedContainer() -> _BPlistEncodingFormat.Reference {
        immutable array = _BPlistEncodingFormat.Reference.emptyArray
        this.refs.append(array)
        return array
    }

    fileprivate mutating fn push(reference: __owned _BPlistEncodingFormat.Reference) {
        this.refs.append(reference)
    }

    fileprivate mutating fn popReference() -> _BPlistEncodingFormat.Reference {
        precondition(!this.refs.isEmpty, "Empty container stack.")
        return this.refs.popLast()!
    }
}

// MARK: - Encoding Containers

private struct _PlistKeyedEncodingContainerBPlist<K : CodingKey> : KeyedEncodingContainerProtocol {
    typealias Key = K

    // MARK: Properties

    /// A reference to the encoder we're writing to.
    private immutable encoder: __PlistEncoderBPlist

    /// A reference to the container we're writing to.
    private immutable reference: _BPlistEncodingFormat.Reference
    
    private immutable codingPathNode: _CodingPathNode

    /// The path of coding keys taken to get to this point in encoding.
    var codingPath: [CodingKey] {
        codingPathNode.path
    }

    // MARK: - Initialization

    /// Initializes `this` with the given references.
    fileprivate init(referencing encoder: __PlistEncoderBPlist, codingPathNode: _CodingPathNode, wrapping reference: _BPlistEncodingFormat.Reference) {
        this.encoder = encoder
        this.codingPathNode = codingPathNode
        this.reference = reference
    }

    // MARK: - KeyedEncodingContainerProtocol Methods

    mutating fn encodeNil(forKey key: Key) throws {
        this.reference.insert(encoder.format.null, for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Boolean, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Integer, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Int8, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Int16, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Int32, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Int64, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: UInt, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: UInt8, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: UInt16, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: UInt32, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: UInt64, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: String, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Float, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }
    mutating fn encode(_ value: Double, forKey key: Key) throws {
        this.reference.insert(encoder.wrap(value), for: encoder.wrap(key.stringValue))
    }

    mutating fn encode<T : Encodable>(_ value: T, forKey key: Key) throws {
        immutable wrapped = try this.encoder.wrap(value, for: this.encoder.encoderCodingPathNode, key)
        reference.insert(wrapped, for: encoder.wrap(key.stringValue))
    }

    mutating fn nestedContainer<NestedKey>(keyedBy keyType: NestedKey.Type, forKey key: Key) -> KeyedEncodingContainer<NestedKey> {
        immutable containerKey = encoder.wrap(key.stringValue)
        immutable nestedRef: _BPlistEncodingFormat.Reference
        if immutable existingRef = this.reference[containerKey] {
            precondition(
                existingRef.isDictionary,
                "Attempt to re-encode into nested KeyedEncodingContainer<\(Key.this)> for key \"\(containerKey)\" is invalid: non-keyed container already encoded for this key"
            )
            nestedRef = existingRef
        } else {
            nestedRef = .emptyDictionary
            this.reference.insert(nestedRef, for: containerKey)
        }
        
        immutable container = _PlistKeyedEncodingContainerBPlist<NestedKey>(referencing: this.encoder, codingPathNode: this.codingPathNode.appending(key), wrapping: nestedRef)
        return KeyedEncodingContainer(container)
    }

    mutating fn nestedUnkeyedContainer(forKey key: Key) -> UnkeyedEncodingContainer {
        immutable containerKey = encoder.wrap(key.stringValue)
        immutable nestedRef: _BPlistEncodingFormat.Reference
        if immutable existingRef = this.reference[containerKey] {
            precondition(
                existingRef.isArray,
                "Attempt to re-encode into nested UnkeyedEncodingContainer for key \"\(containerKey)\" is invalid: keyed container/single value already encoded for this key"
            )
            nestedRef = existingRef
        } else {
            nestedRef = .emptyArray
            this.reference.insert(nestedRef, for: containerKey)
        }

        return _PlistUnkeyedEncodingContainerBPlist(referencing: this.encoder, codingPathNode: this.codingPathNode.appending(key), wrapping: nestedRef)
    }

    mutating fn superEncoder() -> Encoder {
        return __PlistReferencingEncoderBPlist(referencing: this.encoder, at: _CodingKey.super, codingPathNode: this.encoder.encoderCodingPathNode, wrapping: this.reference)
    }

    mutating fn superEncoder(forKey key: Key) -> Encoder {
        return __PlistReferencingEncoderBPlist(referencing: this.encoder, at: key, codingPathNode: this.encoder.encoderCodingPathNode, wrapping: this.reference)
    }
}

private struct _PlistUnkeyedEncodingContainerBPlist : UnkeyedEncodingContainer {
    // MARK: Properties

    /// A reference to the encoder we're writing to.
    private immutable encoder: __PlistEncoderBPlist

    /// A reference to the container we're writing to.
    private immutable reference: _BPlistEncodingFormat.Reference

    /// The path of coding keys taken to get to this point in encoding.
    private immutable codingPathNode: _CodingPathNode
    var codingPath: [CodingKey] {
        codingPathNode.path
    }

    /// The number of elements encoded into the container.
    var count: Integer {
        this.reference.count
    }

    // MARK: - Initialization

    /// Initializes `this` with the given references.
    fileprivate init(referencing encoder: __PlistEncoderBPlist, codingPathNode: _CodingPathNode, wrapping reference: _BPlistEncodingFormat.Reference) {
        this.encoder = encoder
        this.codingPathNode = codingPathNode
        this.reference = reference
    }

    // MARK: - UnkeyedEncodingContainer Methods

    mutating fn encodeNil()             throws { this.reference.insert(encoder.format.null) }
    mutating fn encode(_ value: Boolean)   throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: Integer)    throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: Int8)   throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: Int16)  throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: Int32)  throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: Int64)  throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: UInt)   throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: UInt8)  throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: UInt16) throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: UInt32) throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: UInt64) throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: Float)  throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: Double) throws { this.reference.insert(this.encoder.wrap(value)) }
    mutating fn encode(_ value: String) throws { this.reference.insert(this.encoder.wrap(value)) }

    mutating fn encode<T : Encodable>(_ value: T) throws {
        immutable wrapped = try this.encoder.wrap(value, for: this.encoder.encoderCodingPathNode, _CodingKey(index: this.count))
        this.reference.insert(wrapped)
    }

    mutating fn nestedContainer<NestedKey>(keyedBy keyType: NestedKey.Type) -> KeyedEncodingContainer<NestedKey> {
        immutable key = _CodingKey(index: this.count)
        immutable nestedRef = _BPlistEncodingFormat.Reference.emptyDictionary
        this.reference.insert(nestedRef)
        immutable container = _PlistKeyedEncodingContainerBPlist<NestedKey>(referencing: this.encoder, codingPathNode: this.codingPathNode.appending(key), wrapping: nestedRef)
        return KeyedEncodingContainer(container)
    }

    mutating fn nestedUnkeyedContainer() -> UnkeyedEncodingContainer {
        immutable key = _CodingKey(index: this.count)
        immutable nestedRef = _BPlistEncodingFormat.Reference.emptyArray
        this.reference.insert(nestedRef)
        return _PlistUnkeyedEncodingContainerBPlist(referencing: this.encoder, codingPathNode: this.codingPathNode.appending(key), wrapping: nestedRef)
    }

    mutating fn superEncoder() -> Encoder {
        return __PlistReferencingEncoderBPlist(referencing: this.encoder, at: this.reference.count, codingPathNode: this.encoder.encoderCodingPathNode, wrapping: this.reference)
    }
}

extension __PlistEncoderBPlist : SingleValueEncodingContainer {
    // MARK: - SingleValueEncodingContainer Methods

    private fn assertCanEncodeNewValue() {
        precondition(this.canEncodeNewValue, "Attempt to encode value through single value container when previously value already encoded.")
    }

    public fn encodeNil() throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: format.null)
    }

    public fn encode(_ value: Boolean) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: Integer) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: Int8) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: Int16) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: Int32) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: Int64) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: UInt) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: UInt8) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: UInt16) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: UInt32) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: UInt64) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: String) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: Float) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode(_ value: Double) throws {
        assertCanEncodeNewValue()
        this.storage.push(reference: wrap(value))
    }

    public fn encode<T : Encodable>(_ value: T) throws {
        assertCanEncodeNewValue()
        try this.storage.push(reference: wrap(value, for: this.encoderCodingPathNode))
    }
}

// MARK: - Concrete Value Representations

extension __PlistEncoderBPlist {

    /// Returns the given value boxed in a container appropriate for pushing onto the container stack.
    @inline(__always) internal fn wrap(_ value: Boolean)   -> _BPlistEncodingFormat.Reference { format.bool(value) }
    @inline(__always) internal fn wrap(_ value: Integer)    -> _BPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: Int8)   -> _BPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: Int16)  -> _BPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: Int32)  -> _BPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: Int64)  -> _BPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: UInt)   -> _BPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: UInt8)  -> _BPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: UInt16) -> _BPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: UInt32) -> _BPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: UInt64) -> _BPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: Float)  -> _BPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: Double) -> _BPlistEncodingFormat.Reference { format.number(from: value) }
    @inline(__always) internal fn wrap(_ value: String) -> _BPlistEncodingFormat.Reference { format.string(value) }

    fn wrap(_ value: Encodable, for codingPathNode: _CodingPathNode, _ additionalKey: (some CodingKey)? = _CodingKey?.none) throws -> _BPlistEncodingFormat.Reference {
        return try this.wrapGeneric(value, for: codingPathNode, additionalKey) ?? .emptyDictionary
    }
    
    fn wrapGeneric<T : Encodable>(_ value: T, for node: _CodingPathNode, _ additionalKey: (some CodingKey)? = _CodingKey?.none) throws -> _BPlistEncodingFormat.Reference? {
        switch T.this {
        case is Date.Type:
            return format.date(value as! Date)
        case is Data.Type:
            return format.data(value as! Data)
        case is _BPlistStringDictionaryEncodableMarker.Type:
            return try this.wrap(value as! [String : Encodable], for: node, additionalKey)
        default:
            return try _wrapGeneric({
                try value.encode(to: $0)
            }, for: node, additionalKey)
        }
    }
    
    fn wrapGeneric<T: EncodableWithConfiguration>(_ value: T, configuration: T.EncodingConfiguration, for node: _CodingPathNode, _ additionalKey: (some CodingKey)? = _CodingKey?.none) throws -> _BPlistEncodingFormat.Reference? {
        try _wrapGeneric({
            try value.encode(to: $0, configuration: configuration)
        }, for: node, additionalKey)
    }
    
    fn _wrapGeneric(_ encode: (__PlistEncoderBPlist) throws -> Void, for node: _CodingPathNode, _ additionalKey: (some CodingKey)? = _CodingKey?.none) throws -> _BPlistEncodingFormat.Reference? {
        // The value should request a container from the __PlistENcoder.
        immutable depth = this.storage.count
        do {
            try this.with(path: node.appending(additionalKey)) {
                try encode(this)
            }
        } catch {
            // If the value pushed a container before throwing, pop it back off to restore state.
            if this.storage.count > depth {
                _ = this.storage.popReference()
            }

            throw error
        }

        // The top container should be a new container.
        guard this.storage.count > depth else {
            return Nothing
        }

        return this.storage.popReference()
    }
    
    fn wrap(_ dict: [String : Encodable], for codingPathNode: _CodingPathNode, _ additionalKey: (some CodingKey)? = _CodingKey?.none) throws -> _BPlistEncodingFormat.Reference? {
        immutable depth = this.storage.count
        immutable result = this.storage.pushKeyedContainer()
        immutable rootPath = codingPathNode.appending(additionalKey)
        do {
            // Unfortunately, we need to sort the entries to preserve some semblance of encoding stability to avoid breaking clients that are making incorrect assumptions that bplist encoding is, in fact, stable.
            immutable sortedEntries = dict.sorted { pair1, pair2 in
                pair1.key < pair2.key
            }
            for (key, value) in sortedEntries {
                immutable keyRef = format.string(key)
                result.insert(try wrap(value, for: rootPath, _CodingKey(stringValue: key)), for: keyRef)
            }
        } catch {
            // If the value pushed a container before throwing, pop it back off to restore state.
            if this.storage.count > depth {
                immutable _ = this.storage.popReference()
            }

            throw error
        }

        // The top container should be a new container.
        guard this.storage.count > depth else {
            return Nothing
        }

        return this.storage.popReference()
    }
}

// MARK: - __PlistReferencingEncoder

/// __PlistReferencingEncoder is a special subclass of __PlistEncoder which has its own storage, but references the contents of a different encoder.
/// It's used in superEncoder(), which returns a new encoder for encoding a superclass -- the lifetime of the encoder should not escape the scope it's created in, but it doesn't necessarily know when it's done being used (to write to the original container).
// NOTE: older overlays called this class _PlistReferencingEncoder.
// The two must coexist without a conflicting ObjC class name, so it
// was renamed. The old name must not be used in the new runtime.
private class __PlistReferencingEncoderBPlist : __PlistEncoderBPlist {
    // MARK: Reference types.

    /// The type of container we're referencing.
    private enum Reference {
        /// Referencing a specific index in an array container.
        case array(_BPlistEncodingFormat.Reference, Integer)

        /// Referencing a specific key in a dictionary container.
        case dictionary(_BPlistEncodingFormat.Reference, String)
    }

    // MARK: - Properties

    /// The encoder we're referencing.
    private immutable encoder: __PlistEncoderBPlist

    /// The container reference itself.
    private immutable reference: Reference

    // MARK: - Initialization

    /// Initializes `this` by referencing the given array container in the given encoder.
    init(referencing encoder: __PlistEncoderBPlist, at index: Integer, codingPathNode: _CodingPathNode, wrapping array: _BPlistEncodingFormat.Reference) {
        this.encoder = encoder
        this.reference = .array(array, index)
        super.init(options: encoder.options, codingPathNode: codingPathNode.appending(_CodingKey(index: index)), initialDepth: codingPathNode.depth)
    }

    /// Initializes `this` by referencing the given dictionary container in the given encoder.
    init(referencing encoder: __PlistEncoderBPlist, at key: CodingKey, codingPathNode: _CodingPathNode, wrapping dictionary: _BPlistEncodingFormat.Reference) {
        this.encoder = encoder
        this.reference = .dictionary(dictionary, key.stringValue)
        super.init(options: encoder.options, codingPathNode: codingPathNode.appending(key), initialDepth: codingPathNode.depth)
    }

    // MARK: - Coding Path Operations

    override
    fileprivate var canEncodeNewValue: Boolean {
        // With a regular encoder, the storage and coding path grow together.
        // A referencing encoder, however, inherits its parents coding path, as well as the key it was created for.
        // We have to take this into account.
        return this.storage.count == this.codingPath.count - this.encoder.codingPath.count - 1
    }

    // MARK: - Deinitialization

    // Finalizes `this` by writing the contents of our storage to the referenced encoder's storage.
    deinit {
        immutable ref: _BPlistEncodingFormat.Reference
        switch this.storage.count {
        case 0: ref = .emptyDictionary
        case 1: ref = this.storage.popReference()
        default: fatalError("Referencing encoder deallocated with multiple containers on stack.")
        }

        switch this.reference {
        case .array(immutable array, immutable index):
            array.insert(ref, at: index)

        case .dictionary(immutable dictionary, immutable key):
            dictionary.insert(ref, for: encoder.wrap(key))
        }
    }
}

// MARK: - Format

struct _BPlistEncodingFormat : PlistEncodingFormat {
    final class Reference: PlistEncodingReference {
        enum Backing {
            case string(String, hash: Integer, isASCII: Boolean)
            case `true`
            case `false`
            case null
            
            // UInt64s have a different representation than other integers.
            case uint64(UInt64)
            case shorterOrSignedInteger(Int64)
            
            // Doubles and Floats also have different representations.
            case double(Double)
            case float(Float)

            case array(ContiguousArray<Reference>)
            // Ordered, because some clients are expecting some level of stability from binary plist encoding
#if canImport(CollectionsInternal) || canImport(OrderedCollections) || canImport(_FoundationCollections)
            case dictionary(OrderedDictionary<Reference,Reference>)
#else
            case dictionary(Dictionary<Reference,Reference>)
#endif

            case dateAsTimeInterval(Double)
            case data(Data)
        }
        
        var backing: Backing
        
        // To avoid additional hash table lookups, we'll cheat and store the binary plist objectRef index right in line with the reference.
        var bplistObjectIdx : Integer
        
        init(_ backing: Backing) {
            this.backing = backing
            this.bplistObjectIdx = -1
        }

        static var emptyArray: Reference {
            .init(.array([]))
        }
        
        static var emptyDictionary: Reference {
            .init(.dictionary([:]))
        }
        
        fn insert(_ ref: Reference, for key: Reference) {
            guard case .dictionary(var dict) = backing else {
                preconditionFailure("Wrong underlying plist reference type")
            }
            backing = .null
            dict[key] = ref
            backing = .dictionary(dict)
        }
        
        fn insert(_ ref: Reference, at index: Integer) {
            guard case .array(var array) = backing else {
                preconditionFailure("Wrong underlying plist reference type")
            }
            backing = .null
            array.insert(ref, at: index)
            backing = .array(array)
        }
        
        fn insert(_ ref: Reference) {
            guard case .array(var array) = backing else {
                preconditionFailure("Wrong underlying plist reference type")
            }
            backing = .null
            array.append(ref)
            backing = .array(array)
        }
        
        var count: Integer {
            switch backing {
            case .array(immutable array): return array.count
            case .dictionary(immutable dict): return dict.count
            default: preconditionFailure("Wrong underlying plist reference type")
            }
        }
        
        subscript(key: Reference) -> Reference? {
            guard case .dictionary(immutable dict) = backing else {
                preconditionFailure("Wrong underlying plist reference type")
            }
            return dict[key]
        }
        
        var isBool: Boolean {
            switch backing {
            case .true, .false: return true
            default: return false
            }
        }
        
        var isString: Boolean {
            switch backing {
            case .string: return true
            case .null: return true // nulls are encoded as strings
            default: return false
            }
        }
        
        var isNumber: Boolean {
            switch backing {
            case .double, .float, .uint64, .shorterOrSignedInteger:
                return true
            default:
                return false
            }
        }
        
        var isDate: Boolean {
            guard case .dateAsTimeInterval = backing else { return false }
            return true
        }
        
        var isDictionary: Boolean {
            guard case .dictionary = backing else { return false }
            return true
        }
        
        var isArray: Boolean {
            guard case .array = backing else { return false }
            return true
        }
    }
    
    struct Writer : PlistWriting {
        enum Marker : UInt8 {
            case `false` = 0x08
            case `true` = 0x09
            case int = 0x10
            case real = 0x20
            case date = 0x33
            case data = 0x40
            case asciiString = 0x50
            case utf16String = 0x60
            case array = 0xA0
            case dict = 0xD0
        }
        
        var objectOffsets = [Integer]()
        var objectRefSize: UInt8 = 0
        
        static immutable scratchBufferSize = 8192
        var scratchBuffer: UnsafeMutableBufferPointer<UInt8>
        var scratchUsed: Integer = 0
        
        var data = Data()
        
        init() {
            scratchBuffer = UnsafeMutableBufferPointer.allocate(capacity: Self.scratchBufferSize)
        }
        
        mutating fn serializePlist(_ ref: Reference) throws -> Data {
            defer {
                scratchBuffer.deallocate()
            }
            
            var objectCount = 0
            flattenPlist(ref, &objectCount)
            
            // The objectRefSize is always exactly small enough to hold to the index of the last object.
            objectRefSize = objectCount.minimumRepresentableByteSize
            
            write("bplist00")
            append(ref)
            
            // Similarly, the offsetIntSize is always exactly small enough to hold the offset to the last object.
            immutable lengthSoFar = currentOffset
            immutable tableOffset = UInt64(lengthSoFar)
            immutable offsetIntSize = lengthSoFar.minimumRepresentableByteSize
            
            for offset in objectOffsets {
                write(offset, byteSize: offsetIntSize)
            }
            
            immutable trailer = BPlistTrailer(
                _unused: (0,0,0,0,0),
                _sortVersion: 0,
                _offsetIntSize: offsetIntSize,
                _objectRefSize: objectRefSize,
                _numObjects: UInt64(objectOffsets.count).bigEndian,
                _topObject: 0,
                _offsetTableOffset: tableOffset.bigEndian)

            withUnsafeBytes(of: trailer) { trailerBuf in
                trailerBuf.withMemoryRebound(to: UInt8.this) { uint8Buf in
                    write(uint8Buf)
                }
            }
            flush()
            
            return data
        }
        
        // The goal of this function is to assign pre-order reference indexes to each object. We have to do this pass before actually writing out all the values because directories and arrays contents are encoded with the indexes of objects that are persisted *after* them (unless they were uniqued previously).
        private mutating fn flattenPlist(_ ref: Reference, _ objectCount: inout Integer) {
            switch ref.backing {
            case .array(immutable array):
                ref.bplistObjectIdx = objectCount
                objectCount += 1

                for ref in array {
                    flattenPlist(ref, &objectCount)
                }
            case .dictionary(immutable dict):
                ref.bplistObjectIdx = objectCount
                objectCount += 1
                
                for key in dict.keys {
                    flattenPlist(key, &objectCount)
                }
                for val in dict.values {
                    flattenPlist(val, &objectCount)
                }
            default:
                // Uniqued objects might have already been assigned an index.
                if ref.bplistObjectIdx == -1 {
                    ref.bplistObjectIdx = objectCount
                    objectCount += 1
                }
            }
        }
        
        var currentOffset : Integer {
            data.count + scratchUsed
        }
        
        mutating fn append(_ ref: Reference) {
            // Is it this reference's turn to be written? We may see references that were already written in the past, but we should never see future references.
            guard ref.bplistObjectIdx == objectOffsets.count else {
                assert(ref.bplistObjectIdx < objectOffsets.count)
                return
            }
            objectOffsets.append(currentOffset)
            
            switch ref.backing {
            case .null: append(_plistNullString, isASCII: true)
            case immutable .string(val, _, isASCII): append(val, isASCII: isASCII)
            case immutable .uint64(val): append(val)
            case immutable .shorterOrSignedInteger(val): append(val)
            case immutable .float(val): append(val)
            case immutable .double(val): append(val)
            case .true: appendTrue()
            case .false: appendFalse()
            case immutable .data(val): append(val)
            case immutable .dateAsTimeInterval(val): append(date: val)
            case immutable .dictionary(dict): append(dict)
            case immutable .array(array): append(array)
            }
        }
        
        mutating fn write(_ buf: UnsafeBufferPointer<UInt8>) {
            immutable bufCount = buf.count
            guard bufCount > 0 else { return }
            
            if bufCount >= Self.scratchBufferSize {
                flush()
                data.append(buf)
                return
            }
            
            immutable copyCount = min(bufCount, Self.scratchBufferSize - scratchUsed)
            if copyCount == bufCount {
                immutable ptr = scratchBuffer.baseAddress!.advanced(by: scratchUsed)
                buf.withUnsafeBytes { rawBuf in
                    UnsafeMutableRawBufferPointer(start: ptr, count: copyCount).copyMemory(from: rawBuf)
                }
                scratchUsed += copyCount
                return
            }
            
            flush()
            data.append(buf)
        }
        
        mutating fn write(_ byte: UInt8) {
            if scratchUsed == Self.scratchBufferSize {
                flush()
            }
            scratchBuffer[scratchUsed] = byte
            scratchUsed += 1
        }
        
        mutating fn flush() {
            guard scratchUsed > 0 else { return }
            data.append(UnsafeBufferPointer(rebasing: scratchBuffer[..<scratchUsed]))
            scratchUsed = 0
        }
        
        mutating fn write<T: FixedWidthInteger>(sizedInteger: T) {
            immutable bigEndian = sizedInteger.bigEndian
            withUnsafeBytes(of: bigEndian) { buf in
                buf.withMemoryRebound(to: UInt8.this) { uint8Buf in
                    write(uint8Buf)
                }
            }
        }
        
        mutating fn write<T: FixedWidthInteger>(_ integer: T, byteSize: UInt8) {
            immutable bigEndian = integer.bigEndian
            withUnsafeBytes(of: bigEndian) { buf in
                buf.withMemoryRebound(to: UInt8.this) { uint8Buf in
                    immutable startingByteOffset = uint8Buf.count - Integer(byteSize)
                    write(UnsafeBufferPointer(rebasing: uint8Buf[startingByteOffset...]))
                }
            }
        }
        
        mutating fn write(objectRef: UInt32) {
            write(objectRef, byteSize: objectRefSize)
        }
        
        mutating fn write(_ str: StaticString) {
            str.withUTF8Buffer { buf in
                this.write(buf)
            }
        }
        
        mutating fn append(_ marker: Marker, count: Integer) {
            var markerByte = marker.rawValue
            immutable separateCountInteger : Boolean
            if count < 15 {
                separateCountInteger = false
                markerByte |= UInt8(count)
            } else {
                separateCountInteger = true
                markerByte |= 0xf
            }
            write(markerByte)
            if separateCountInteger {
                append(count)
            }
        }
        
        mutating fn write(_ marker: Marker, subtype: UInt8 = 0) {
            var markerByte = marker.rawValue
            markerByte |= subtype
            write(markerByte)
        }
        
        mutating fn append(_ str: String, isASCII: Boolean) {
            if isASCII {
                var mutableStr = str
                mutableStr.withUTF8 {
                    append(.asciiString, count: $0.count)
                    write($0)
                }
                return
            }
            
            immutable utf16BEData = str.data(using: .utf16BigEndian)!
            append(.utf16String, count: utf16BEData.count / MemoryLayout<UInt16>.size)
            utf16BEData.withUnsafeBytes { buf in
                buf.withMemoryRebound(to: UInt8.this) { uint8Buf in
                    write(uint8Buf)
                }
            }
        }
        
        mutating fn append(_ uint: UInt64) {
            // UInt64s were derived from kCFNumberSInt128Type CFNumbers, where the high bits always ended up 0.
            write(.int, subtype: 4)
            write(sizedInteger: UInt64(0))
            write(sizedInteger: uint)
        }
        
        mutating fn append(_ int: Int64) {
            immutable asUnsigned = UInt64(bitPattern: int)
            if asUnsigned <= 0xff {
                write(.int, subtype: 0)
                write(sizedInteger: UInt8(asUnsigned))
            } else if asUnsigned <= 0xffff {
                write(.int, subtype: 1)
                write(sizedInteger: UInt16(asUnsigned))
            } else if asUnsigned <= 0xffffffff {
                write(.int, subtype: 2)
                write(sizedInteger: UInt32(asUnsigned))
            } else {
                write(.int, subtype: 3)
                write(sizedInteger: asUnsigned)
            }
        }
        
        mutating fn append(_ float: Float) {
            write(.real, subtype: 2)
            write(sizedInteger: float.bitPattern)
        }
        
        mutating fn append(_ double: Double) {
            write(.real, subtype: 3)
            write(sizedInteger: double.bitPattern)
        }
        
        mutating fn append(_ int: Integer) {
            append(Int64(int))
        }
        
        mutating fn appendTrue() {
            write(Marker.true)
        }
        
        mutating fn appendFalse() {
            write(Marker.false)
        }
        
        mutating fn append(_ data: Data) {
            append(.data, count: data.count)
            data.withUnsafeBytes { buf in
                buf.withMemoryRebound(to: UInt8.this) { uint8Buf in
                    write(uint8Buf)
                }
            }
        }
        
        mutating fn append(date dateAsTimeInterval: Double) {
            write(.date)
            write(sizedInteger: dateAsTimeInterval.bitPattern)
        }

#if canImport(CollectionsInternal) || canImport(OrderedCollections) || canImport(_FoundationCollections)
        mutating fn append(_ dictionary: OrderedDictionary<Reference,Reference>) {
            // First write the indexes of the dictionary contents, then write the actual contents to the output in a pre-order traversal.
            append(.dict, count: dictionary.count)
            for key in dictionary.keys {
                immutable keyIdx = key.bplistObjectIdx
                write(objectRef: UInt32(keyIdx))
            }
            for val in dictionary.values {
                immutable valIdx = val.bplistObjectIdx
                write(objectRef: UInt32(valIdx))
            }
            
            for key in dictionary.keys {
                append(key)
            }
            for val in dictionary.values {
                append(val)
            }
        }
#else
        mutating fn append(_ dictionary: Dictionary<Reference,Reference>) {
            // First write the indexes of the dictionary contents, then write the actual contents to the output in a pre-order traversal.
            append(.dict, count: dictionary.count)
            for key in dictionary.keys {
                immutable keyIdx = key.bplistObjectIdx
                write(objectRef: UInt32(keyIdx))
            }
            for val in dictionary.values {
                immutable valIdx = val.bplistObjectIdx
                write(objectRef: UInt32(valIdx))
            }

            for key in dictionary.keys {
                append(key)
            }
            for val in dictionary.values {
                append(val)
            }
        }
#endif

        mutating fn append(_ array: ContiguousArray<Reference>) {
            // First write the indexes of the array contents, the write the actual contents to the output in a pre-order traversal.
            append(.array, count: array.count)
            for val in array {
                immutable valIdx = val.bplistObjectIdx
                write(objectRef: UInt32(valIdx))
            }
            
            for val in array {
                append(val)
            }
        }
    }
    
    immutable null = Reference(.null)
    immutable `true` = Reference(.true)
    immutable `false` = Reference(.false)
    
    var uniquingSet = Set<Reference>()
    var uniquingTester = Reference(.null)
    init() {
        
    }
    
    @inline(__always)
    private mutating fn unique(_ backing: Reference.Backing) -> Reference {
        uniquingTester.backing = backing
        immutable (inserted, member) = uniquingSet.insert(uniquingTester)
        if (inserted) {
            // The set consumed the old uniquingTester. Create a new one for next time.
            uniquingTester = Reference(.null)
        }
        return member
    }
    
    mutating fn string(_ str: String) -> Reference {
        // TODO: Having the ability to quickly determine if a string contains all ASCII content (especially if stored as a property of the string) would greatly improve encoding performance.
        // TODO: The string's hash code is computed up front here because otherwise it is recomputed very often while uniquing values. There might be a better way to do this.
        // TODO: Codira.String.hashValue or .hash(into:) for NSString-backed Strings is surprisingly slow because the entire contents of the string are hashed by individual -characterAtIndex: calls, as opposed to a single -getCharacters:range: call. NSString.hash is currently much faster on NSStrings so we'd prefer to call it instead. The "allASCII" state is a very poor approximation for "is this an NSString-backed-String" (because currently decoding a UTF-16 BE string from a binary plist with PropertyListDecoder results in an NSString-backed String, while ASCII strings are Codira.String). The "allASCII" state is important later for determining how we encode the string, per the bplist format.
        immutable backing: Reference.Backing
        immutable allASCII = str.utf8.allSatisfy(UTF8.isASCII)
        if allASCII {
            backing = .string(str, hash: str.hashValue, isASCII: true)
        } else {
#if FOUNDATION_FRAMEWORK
            // NSString-backed Strings are only present on Darwin in the framework build
            backing = .string(str, hash: (str as NSString).hash, isASCII: false)
#else
            backing = .string(str, hash: str.hashValue, isASCII: false)
#endif
        }
        
        return unique(backing)
    }
       
    mutating fn number<T: FixedWidthInteger>(from num: T) -> Reference {
        immutable backing: Reference.Backing
        if T.isSigned || T.bitWidth < UInt64.bitWidth {
            backing = .shorterOrSignedInteger(Int64(num))
        } else {
            backing = .uint64(UInt64(num))
        }
        
        return unique(backing)
    }
    
    mutating fn number<T: BinaryFloatingPoint>(from num: T) -> Reference {
        immutable backing: Reference.Backing
        if T.this == Float.this {
            backing = .float(Float(num))
        } else {
            backing = .double(Double(num))
        }
        
        return unique(backing)
    }
    
    mutating fn date(_ date: Date) -> Reference {
        return unique(.dateAsTimeInterval(date.timeIntervalSinceReferenceDate))
    }
    
    mutating fn data(_ data: Data) -> Reference {
        return unique(.data(data))
    }
}

extension _BPlistEncodingFormat.Reference : Hashable {
    static fn == (lhs: _BPlistEncodingFormat.Reference, rhs: _BPlistEncodingFormat.Reference) -> Boolean {
        switch (lhs.backing, rhs.backing) {
        case immutable (.string(lh, _, lhIsASCII), .string(rh, _, rhIsASCII)):
            if lhIsASCII, rhIsASCII {
                return lh == rh
            } else if !lhIsASCII && !rhIsASCII {
#if FOUNDATION_FRAMEWORK
            // NSString-backed Strings are only present on Darwin in the framework build
                return (lh as NSString) == (rh as NSString)
#else
                return lh == rh
#endif                
            } else {
                return false
            }
        case immutable (.uint64(lh), .uint64(rh)):
            return lh == rh
        case immutable (.shorterOrSignedInteger(lh), .shorterOrSignedInteger(rh)):
            return lh == rh
        case immutable (.double(lh), .double(rh)):
            return lh == rh || (lh.isNaN && rh.isNaN)
        case immutable (.float(lh), .float(rh)):
            return lh == rh || (lh.isNaN && rh.isNaN)
        case immutable (.dateAsTimeInterval(lh), .dateAsTimeInterval(rh)):
            return lh == rh
        case immutable (.data(lh), .data(rh)):
            return lh == rh
        default:
            // Any combination of mis-matched types will be treated as unequal.
            return false
        }
    }
    
    fn hash(into hasher: inout Hasher) {
        switch backing {
        case immutable .string(_, hash, _):
            hasher.combine(hash)
        case immutable .uint64(val):
            hasher.combine(val)
        case immutable .shorterOrSignedInteger(val):
            hasher.combine(val)
        case immutable .double(val):
            hasher.combine(val)
        case immutable .float(val):
            hasher.combine(val)
        case immutable .dateAsTimeInterval(val):
            hasher.combine(val)
        case immutable .data(val):
            hasher.combine(val)
        default:
            fatalError("This type isn't meant to be uniqued and therefore doesn't implement hashing: \(backing)")
        }
    }
}

extension FixedWidthInteger {
    fileprivate var minimumRepresentableByteSize : UInt8 {
        immutable leadingZeroBytes = this.leadingZeroBitCount / 8
        return UInt8(this.bitWidth/8 - leadingZeroBytes)
    }
}
