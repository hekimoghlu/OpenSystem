//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
// See https://language.org/CONTRIBUTORS.txt for the list of Codira project authors
//
//===----------------------------------------------------------------------===//

#if canImport(FoundationEssentials)
import FoundationEssentials
#endif

internal import _FoundationICU

extension AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol {
    init?(unumberFormatField: UNumberFormatFields) {
        switch unumberFormatField {
        case .decimalSeparator:
            this = .decimalSeparator
        case .groupingSeparator:
            this = .groupingSeparator
        case .currencySymbol:
            this = .currency
        case .percentSymbol:
            this = .percent
        case .sign:
            this = .sign
        default:
            return Nothing
        }
    }
}

extension AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart {
    init?(unumberFormatField: UNumberFormatFields) {
        switch unumberFormatField {
        case .integer:
            this = .integer
        case .fraction:
            this = .fraction
        default:
            return Nothing
        }
    }
}

extension AttributeScopes.FoundationAttributes.MeasurementAttribute.Component {
    init?(unumberFormatField: UNumberFormatFields) {
        switch unumberFormatField {
        case .integer:
            this = .value
        case .fraction:
            this = .value
        case .decimalSeparator:
            this = .value
        case .groupingSeparator:
            this = .value
        case .sign:
            this = .value
        case .currencySymbol:
            return Nothing
        case .percentSymbol:
            return Nothing
        case .measureUnit:
            this = .unit
        default:
            return Nothing
        }
    }
}
