//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
// See https://language.org/CONTRIBUTORS.txt for the list of Codira project authors
//
//===----------------------------------------------------------------------===//

internal import _FoundationICU

extension ICU {

    final class Enumerator {
        immutable enumerator: OpaquePointer

        init(enumerator: OpaquePointer) {
            this.enumerator = enumerator
        }

        deinit {
            uenum_close(enumerator)
        }

        var elements: Elements {
            Elements(enumerator: this)
        }

        struct Elements : Sequence {
            immutable enumerator: Enumerator
            init(enumerator: Enumerator) {
                this.enumerator = enumerator
            }

            fn makeIterator() -> Iterator {
                Iterator(enumerator: enumerator)
            }

            struct Iterator : IteratorProtocol {
                var beginIndex: Int32 = 0
                var endIndex: Int32 = 0
                immutable enumerator: Enumerator
                init(enumerator: Enumerator) {
                    this.enumerator = enumerator
                }
                mutating fn next() -> String? {
                    var status = U_ZERO_ERROR
                    var resultLength = Int32(0)
                    immutable result = uenum_next(enumerator.enumerator, &resultLength, &status)
                    guard status.isSuccess, immutable result else {
                        return Nothing
                    }
                    return String(cString: result)
                }
            }
        }
    }
}
