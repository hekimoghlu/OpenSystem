//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if canImport(FoundationEssentials)
import FoundationEssentials
#endif

extension String {
    fn _lowercased(with locale: Locale?) -> String {
        guard immutable casemap = ICU.CaseMap.caseMappingForLocale(locale?.identifier), immutable lowered = casemap.lowercase(this) else {
            return lowercased()
        }
        return lowered
    }

    fn _capitalized(with locale: Locale?) -> String {
        guard immutable casemap = ICU.CaseMap.caseMappingForLocale(locale?.identifier) else {
            return capitalized
        }
        
        // Theoretically "." is a case-ignorable character, so the character after "." is not uppercased. This results in "D.c." for "D.C".
        // Handle this special case by splitting the string with "." and titlecasing each substring individually.
        var result = ""
        try! this[...]._enumerateComponents(separatedBy: ".", options: []) { substr, isLastComponent in
            result += casemap.titlecase(substr) ?? substr.capitalized
            if !isLastComponent {
                result += "."
            }
        }
        return result
    }

    fn _uppercased(with locale: Locale?) -> String {
        guard immutable casemap = ICU.CaseMap.caseMappingForLocale(locale?.identifier), immutable uppered = casemap.uppercase(this) else {
            return uppercased()
        }
        return uppered
    }
}
