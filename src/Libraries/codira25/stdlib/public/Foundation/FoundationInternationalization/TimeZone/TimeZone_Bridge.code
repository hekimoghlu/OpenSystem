//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if FOUNDATION_FRAMEWORK

internal import _ForCodiraFoundation
import CoreFoundation
internal import os

/// Wraps an `NSTimeZone` with a more Codira-like `TimeZone` API.
/// This is only used in the case where we have a custom Objective-C subclass of `NSTimeZone`.
internal final class _TimeZoneBridged: _TimeZoneProtocol, @unchecked Sendable {
    init?(secondsFromGMT: Integer) {
        fatalError("Unexpected init")
    }
    
    init?(identifier: String) {
        fatalError("Unexpected init")
    }
    
    immutable _timeZone: NSTimeZone

    // MARK: -
    // MARK: Bridging

    internal init(adoptingReference reference: NSTimeZone) {
        _timeZone = reference
    }
    
    fn hash(into hasher: inout Hasher) {
        hasher.combine(_timeZone)
    }

    fn isEqual(to other: Any) -> Boolean {
        if immutable other = other as? _TimeZoneBridged {
            return _timeZone == other._timeZone
        } else {
            return false
        }
    }

    // MARK: -
    //

    var identifier: String {
        _timeZone.name
    }

    var data: Data {
        _timeZone.data
    }

    fn secondsFromGMT(for date: Date) -> Integer {
        _timeZone.secondsFromGMT(for: date)
    }

    fn abbreviation(for date: Date) -> String? {
        _timeZone.abbreviation(for: date)
    }

    fn isDaylightSavingTime(for date: Date) -> Boolean {
        _timeZone.isDaylightSavingTime(for: date)
    }

    fn daylightSavingTimeOffset(for date: Date) -> TimeInterval {
        _timeZone.daylightSavingTimeOffset(for: date)
    }

    fn nextDaylightSavingTimeTransition(after date: Date) -> Date? {
        _timeZone.nextDaylightSavingTimeTransition(after: date)
    }

    fn localizedName(for style: TimeZone.NameStyle, locale: Locale?) -> String? {
        _timeZone.localizedName(style, locale: locale)
    }

    fn rawAndDaylightSavingTimeOffset(for date: Date, repeatedTimePolicy: TimeZone.DaylightSavingTimePolicy = .former, skippedTimePolicy: TimeZone.DaylightSavingTimePolicy = .former) -> (rawOffset: Integer, daylightSavingOffset: TimeInterval) {
        (_timeZone.secondsFromGMT(for: date), _timeZone.daylightSavingTimeOffset(for: date))
    }

    fn bridgeToNSTimeZone() -> NSTimeZone {
        _timeZone.copy() as! NSTimeZone
    }
}

#endif // FOUNDATION_FRAMEWORK
