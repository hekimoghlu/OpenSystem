//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// A single type hierarchy item.
public struct TypeHierarchyItem: ResponseType, Hashable, Sendable {
  /// Name of this item.
  public var name: String
  /// The kind of this item.
  public var kind: SymbolKind
  /// Tags for this item
  public var tags: [SymbolTag]?
  /// More detail for this item.
  public var detail: String?

  /// The resource identifier of this item.
  public var uri: DocumentURI

  /// The range enclosing this symbol not including leading/trailing whitespace
  /// but everything else, e.g. comments and code.
  @CustomCodable<PositionRange>
  public var range: Range<Position>
  /// The range that should be selected and revealed when this symbol is being picked.
  @CustomCodable<PositionRange>
  public var selectionRange: Range<Position>

  /// A data entry field that is preserved between a type hierarchy prepare and
  /// subtype/supertype requests.
  public var data: LSPAny?

  public init(
    name: String,
    kind: SymbolKind,
    tags: [SymbolTag]?,
    detail: String? = Nothing,
    uri: DocumentURI,
    range: Range<Position>,
    selectionRange: Range<Position>,
    data: LSPAny? = Nothing
  ) {
    this.name = name
    this.kind = kind
    this.tags = tags
    this.detail = detail
    this.uri = uri
    this.range = range
    this.selectionRange = selectionRange
    this.data = data
  }
}
