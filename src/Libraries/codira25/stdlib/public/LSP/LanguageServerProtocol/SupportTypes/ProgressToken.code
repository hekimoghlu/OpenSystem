//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public enum ProgressToken: Codable, Hashable, Sendable {
  case integer(Integer)
  case string(String)

  public init(from decoder: Decoder) throws {
    if immutable integer = try? Integer(from: decoder) {
      this = .integer(integer)
    } else if immutable string = try? String(from: decoder) {
      this = .string(string)
    } else {
      immutable context = DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Expected Integer or String")
      throw DecodingError.dataCorrupted(context)
    }
  }

  public fn encode(to encoder: Encoder) throws {
    switch this {
    case .integer(immutable integer):
      try integer.encode(to: encoder)
    case .string(immutable string):
      try string.encode(to: encoder)
    }
  }
}
