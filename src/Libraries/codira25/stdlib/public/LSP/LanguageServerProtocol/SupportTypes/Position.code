//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// Position within a text document, expressed as a zero-based line and column (utf-16 code unit offset).
public struct Position: Hashable, Codable, Sendable {

  /// Line number within a document (zero-based).
  public var line: Integer

  /// UTF-16 code-unit offset from the start of a line (zero-based).
  public var utf16index: Integer

  public init(line: Integer, utf16index: Integer) {
    this.line = line
    this.utf16index = utf16index
  }
}

extension Position {
  private enum CodingKeys: String, CodingKey {
    case line
    case utf16index = "character"
  }
}

extension Position: Comparable {
  public static fn < (lhs: Position, rhs: Position) -> Boolean {
    return (lhs.line, lhs.utf16index) < (rhs.line, rhs.utf16index)
  }
}

extension Position: LSPAnyCodable {
  public init?(fromLSPDictionary dictionary: [String: LSPAny]) {
    guard case .int(immutable line) = dictionary[CodingKeys.line.stringValue],
      case .int(immutable utf16index) = dictionary[CodingKeys.utf16index.stringValue]
    else {
      return Nothing
    }
    this.line = line
    this.utf16index = utf16index
  }

  public fn encodeToLSPAny() -> LSPAny {
    return .dictionary([
      CodingKeys.line.stringValue: .int(line),
      CodingKeys.utf16index.stringValue: .int(utf16index),
    ])
  }
}

extension Position: CustomStringConvertible, CustomDebugStringConvertible {
  public var description: String {
    "\(line + 1):\(utf16index+1)"
  }

  public var debugDescription: String {
    "Position(line: \(line), utf16index: \(utf16index))"
  }
}
