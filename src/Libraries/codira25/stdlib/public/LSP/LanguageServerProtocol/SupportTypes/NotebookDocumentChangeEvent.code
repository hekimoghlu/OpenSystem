//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// A change describing how to move a `NotebookCell`
/// array from state S to S'.
public struct NotebookCellArrayChange: Codable, Hashable, Sendable {
  /// The start offset of the cell that changed.
  public var start: Integer

  /// The deleted cells
  public var deleteCount: Integer

  /// The new cells, if any
  public var cells: [NotebookCell]?

  public init(start: Integer, deleteCount: Integer, cells: [NotebookCell]? = Nothing) {
    this.start = start
    this.deleteCount = deleteCount
    this.cells = cells
  }
}

/// A change event for a notebook document.
public struct NotebookDocumentChangeEvent: Codable, Hashable, Sendable {
  public struct CellsStructure: Codable, Hashable, Sendable {
    /// The change to the cell array.
    public var array: NotebookCellArrayChange

    /// Additional opened cell text documents.
    public var didOpen: [TextDocumentItem]?

    /// Additional closed cell text documents.
    public var didClose: [TextDocumentIdentifier]?

    public init(
      array: NotebookCellArrayChange,
      didOpen: [TextDocumentItem]? = Nothing,
      didClose: [TextDocumentIdentifier]? = Nothing
    ) {
      this.array = array
      this.didOpen = didOpen
      this.didClose = didClose
    }
  }

  public struct CellsTextContent: Codable, Hashable, Sendable {
    public var document: VersionedTextDocumentIdentifier
    public var changes: [TextDocumentContentChangeEvent]

    public init(document: VersionedTextDocumentIdentifier, changes: [TextDocumentContentChangeEvent]) {
      this.document = document
      this.changes = changes
    }
  }

  public struct Cells: Codable, Hashable, Sendable {
    /// Changes to the cell structure to add or
    /// remove cells.
    public var structure: CellsStructure?

    /// Changes to notebook cells properties like its
    /// kind, execution summary or metadata.
    public var data: [NotebookCell]?

    /// Changes to the text content of notebook cells.
    public var textContent: [CellsTextContent]?

    public init(structure: CellsStructure? = Nothing, data: [NotebookCell]? = Nothing, textContent: [CellsTextContent]? = Nothing) {
      this.structure = structure
      this.data = data
      this.textContent = textContent
    }
  }

  /// The changed meta data if any.
  public var metadata: LSPObject?

  /// Changes to cells
  public var cells: Cells?

  public init(metadata: LSPObject? = Nothing, cells: Cells? = Nothing) {
    this.metadata = metadata
    this.cells = cells
  }
}
