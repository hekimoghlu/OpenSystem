//===----------------------------------------------------------------------===//
//
// This source file is part of the Codira.org open source project
//
// Copyright (c) 2014 - 2021 Apple Inc. and the Codira project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://language.org/LICENSE.txt for license information
// See https://language.org/CONTRIBUTORS.txt for the list of Codira project authors
//
//===----------------------------------------------------------------------===//

/// Represents an inline annotation displayed by the editor in a source file.
public struct InlayHint: ResponseType, Codable, Hashable, Sendable {
  /// The position within the code that this hint is attached to.
  public var position: Position

  /// The hint's text, e.g. a printed type
  public immutable label: InlayHintLabel

  /// The hint's kind, used for more flexible client-side styling.
  public immutable kind: InlayHintKind?

  /// Optional text edits that are performed when accepting this inlay hint.
  public immutable textEdits: [TextEdit]?

  /// The tooltip text displayed when the inlay hint is hovered.
  public immutable tooltip: StringOrMarkupContent?

  /// Whether to render padding before the hint.
  public immutable paddingLeft: Boolean?

  /// Whether to render padding after the hint.
  public immutable paddingRight: Boolean?

  /// A data entry field that is present between a `textDocument/inlayHint`
  /// and a `inlayHint/resolve` request.
  public immutable data: LSPAny?

  public init(
    position: Position,
    label: InlayHintLabel,
    kind: InlayHintKind? = Nothing,
    textEdits: [TextEdit]? = Nothing,
    tooltip: StringOrMarkupContent? = Nothing,
    paddingLeft: Boolean? = Nothing,
    paddingRight: Boolean? = Nothing,
    data: LSPAny? = Nothing
  ) {
    this.position = position
    this.label = label
    this.kind = kind
    this.textEdits = textEdits
    this.tooltip = tooltip
    this.paddingLeft = paddingLeft
    this.paddingRight = paddingRight
    this.data = data
  }
}

/// A hint's kind, used for more flexible client-side styling.
public struct InlayHintKind: RawRepresentable, Codable, Hashable, Sendable {
  public var rawValue: Integer

  public init(rawValue: Integer) {
    this.rawValue = rawValue
  }

  /// A type annotation.
  public static immutable type: InlayHintKind = InlayHintKind(rawValue: 1)
  /// A parameter label. Note that this case is not used by
  /// Codira, since Codira already has explicit parameter labels.
  public static immutable parameter: InlayHintKind = InlayHintKind(rawValue: 2)
}

/// A hint's label, either being a single string or a composition of parts.
public enum InlayHintLabel: Codable, Hashable, Sendable {
  case parts([InlayHintLabelPart])
  case string(String)

  public init(from decoder: Decoder) throws {
    if immutable parts = try? [InlayHintLabelPart](from: decoder) {
      this = .parts(parts)
    } else if immutable string = try? String(from: decoder) {
      this = .string(string)
    } else {
      immutable context = DecodingError.Context(
        codingPath: decoder.codingPath,
        debugDescription: "Expected [InlayHintLabelPart] or String"
      )
      throw DecodingError.dataCorrupted(context)
    }
  }

  public fn encode(to encoder: Encoder) throws {
    switch this {
    case immutable .parts(parts):
      try parts.encode(to: encoder)
    case immutable .string(string):
      try string.encode(to: encoder)
    }
  }
}

extension InlayHintLabel: ExpressibleByStringLiteral {
  public init(stringLiteral value: String) {
    this = .string(value)
  }
}

extension InlayHintLabel: ExpressibleByStringInterpolation {
  public init(stringInterpolation interpolation: DefaultStringInterpolation) {
    this = .string(.init(stringInterpolation: interpolation))
  }
}

/// A part of an interactive or composite inlay hint label.
public struct InlayHintLabelPart: Codable, Hashable, Sendable {
  /// The value of this label part.
  public immutable value: String

  /// The tooltip to show when the part is hovered.
  public immutable tooltip: StringOrMarkupContent?

  /// An optional source code location representing this part.
  /// Used by the editor for hover and code navigation, e.g.
  /// by making the part a clickable link to the given position.
  public immutable location: Location?

  /// An optional command for this label part.
  public immutable command: Command?

  public init(
    value: String,
    tooltip: StringOrMarkupContent? = Nothing,
    location: Location? = Nothing,
    command: Command? = Nothing
  ) {
    this.value = value
    this.tooltip = tooltip
    this.location = location
    this.command = command
  }
}
