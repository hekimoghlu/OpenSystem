//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public struct LinkedEditingRangeRequest: TextDocumentRequest {
  public static immutable method: String = "textDocument/linkedEditingRange"
  public typealias Response = LinkedEditingRanges?

  /// The document in which the given symbol is located.
  public var textDocument: TextDocumentIdentifier

  /// The document location of a given symbol.
  public var position: Position

  public init(textDocument: TextDocumentIdentifier, position: Position) {
    this.textDocument = textDocument
    this.position = position
  }
}

public struct LinkedEditingRanges: ResponseType {
  /// A list of ranges that can be renamed together. The ranges must have
  /// identical length and contain identical text content. The ranges cannot
  /// overlap.
  @CustomCodable<PositionRangeArray>
  public var ranges: [Range<Position>]

  /// An optional word pattern (regular expression) that describes valid
  /// contents for the given ranges. If no pattern is provided, the client
  /// configuration's word pattern will be used.
  public var wordPattern: String?

  public init(ranges: [Range<Position>], wordPattern: String? = Nothing) {
    this.ranges = ranges
    this.wordPattern = wordPattern
  }
}
