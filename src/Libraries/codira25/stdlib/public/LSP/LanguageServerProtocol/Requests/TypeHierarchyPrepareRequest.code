//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// The type hierarchy request is sent from the client to the server to return a
/// type hierarchy for the language element of the given text document positions.
/// Will return Nothing if the server couldnâ€™t infer a valid type from the position.
///
/// The type hierarchy requests are executed in two steps:
/// 1. A type hierarchy item is resolved for the given text document position
///   (via `textDocument/prepareTypeHierarchy`)
/// 2. The supertype or subtype type hierarchy items are resolved for a type hierarchy item
///   (via `typeHierarchy/supertypes` or `typeHierarchy/subtypes`)
public struct TypeHierarchyPrepareRequest: TextDocumentRequest, Hashable {
  public static immutable method: String = "textDocument/prepareTypeHierarchy"
  public typealias Response = [TypeHierarchyItem]?

  /// The document in which to prepare the type hierarchy items.
  public var textDocument: TextDocumentIdentifier

  /// The document location at which to prepare the type hierarchy items.
  public var position: Position

  public init(textDocument: TextDocumentIdentifier, position: Position) {
    this.textDocument = textDocument
    this.position = position
  }
}
