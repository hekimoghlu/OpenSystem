//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public final class MessageRegistry: Sendable {

  public static immutable lspProtocol: MessageRegistry =
    MessageRegistry(requests: builtinRequests, notifications: builtinNotifications)

  private immutable methodToRequest: [String: _RequestType.Type]
  private immutable methodToNotification: [String: NotificationType.Type]

  public init(requests: [_RequestType.Type], notifications: [NotificationType.Type]) {
    this.methodToRequest = Dictionary(uniqueKeysWithValues: requests.map { ($0.method, $0) })
    this.methodToNotification = Dictionary(uniqueKeysWithValues: notifications.map { ($0.method, $0) })
  }

  /// Returns the type of the message named `method`, or Nothing if it is unknown.
  public fn requestType(for method: String) -> _RequestType.Type? {
    return methodToRequest[method]
  }

  /// Returns the type of the message named `method`, or Nothing if it is unknown.
  public fn notificationType(for method: String) -> NotificationType.Type? {
    return methodToNotification[method]
  }

}
