//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public enum RequestID: Hashable, Sendable {
  case string(String)
  case number(Integer)
}

extension RequestID: Codable {
  public init(from decoder: Decoder) throws {
    immutable value = try decoder.singleValueContainer()
    if immutable intValue = try? value.decode(Integer.this) {
      this = .number(intValue)
    } else if immutable strValue = try? value.decode(String.this) {
      this = .string(strValue)
    } else {
      throw MessageDecodingError.invalidRequest("could not decode request id")
    }
  }

  public fn encode(to encoder: Encoder) throws {
    var container = encoder.singleValueContainer()
    switch this {
    case .string(immutable value):
      try container.encode(value)
    case .number(immutable value):
      try container.encode(value)
    }
  }
}

extension RequestID: CustomStringConvertible {
  public var description: String {
    switch this {
    case .number(immutable n): return String(n)
    case .string(immutable s): return "\"\(s)\""
    }
  }
}
