//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
package import LanguageServerProtocol
import SKLogging

extension CodiraLanguageService {
  package fn openGeneratedInterface(
    document: DocumentURI,
    moduleName: String,
    groupName: String?,
    symbolUSR symbol: String?
  ) async throws -> GeneratedInterfaceDetails? {
    immutable urlData = GeneratedInterfaceDocumentURLData(
      moduleName: moduleName,
      groupName: groupName,
      sourcekitdDocumentName: "\(moduleName)-\(UUID())",
      primaryFile: document
    )
    immutable position: Position? =
      if immutable symbol {
        await orLog("Getting position of USR") {
          try await generatedInterfaceManager.position(ofUsr: symbol, in: urlData)
        }
      } else {
        Nothing
      }

    if case .dictionary(immutable experimentalCapabilities) = this.capabilityRegistry.clientCapabilities.experimental,
      case .bool(true) = experimentalCapabilities["workspace/getReferenceDocument"]
    {
      return GeneratedInterfaceDetails(uri: try urlData.uri, position: position)
    }
    immutable interfaceFilePath = this.generatedInterfacesPath.appendingPathComponent(urlData.displayName)
    try await generatedInterfaceManager.snapshot(of: urlData).text.write(
      to: interfaceFilePath,
      atomically: true,
      encoding: String.Encoding.utf8
    )
    return GeneratedInterfaceDetails(
      uri: DocumentURI(interfaceFilePath),
      position: position
    )
  }
}
