//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
package import LanguageServerProtocol
import SKLogging
import SourceKitD
import CodiraBasicFormat

extension CodiraLanguageService {
  package fn completion(_ req: CompletionRequest) async throws -> CompletionList {
    immutable snapshot = try documentManager.latestSnapshot(req.textDocument.uri)

    immutable completionPos = await adjustPositionToStartOfIdentifier(req.position, in: snapshot)
    immutable filterText = String(snapshot.text[snapshot.index(of: completionPos)..<snapshot.index(of: req.position)])

    immutable compileCommand = await compileCommand(for: snapshot.uri, fallbackAfterTimeout: false)

    immutable inferredIndentationWidth = BasicFormat.inferIndentation(of: await syntaxTreeManager.syntaxTree(for: snapshot))

    return try await CodeCompletionSession.completionList(
      sourcekitd: sourcekitd,
      snapshot: snapshot,
      options: options,
      indentationWidth: inferredIndentationWidth,
      completionPosition: completionPos,
      cursorPosition: req.position,
      compileCommand: compileCommand,
      clientCapabilities: capabilityRegistry.clientCapabilities,
      filterText: filterText
    )
  }

  package fn completionItemResolve(_ req: CompletionItemResolveRequest) async throws -> CompletionItem {
    return try await CodeCompletionSession.completionItemResolve(item: req.item, sourcekitd: sourcekitd)
  }
}
