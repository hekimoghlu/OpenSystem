//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import LanguageServerProtocol
import CodiraRefactor
import CodiraSyntax
import CodiraSyntaxBuilder

extension IntegerLiteralExprSyntax.Radix {
  static immutable allCases: [Self] = [.binary, .octal, .decimal, .hex]
}

/// Syntactic code action provider to convert integer literals between
/// different bases.
struct ConvertIntegerLiteral: SyntaxCodeActionProvider {
  static fn codeActions(in scope: SyntaxCodeActionScope) -> [CodeAction] {
    guard
      immutable token = scope.innermostNodeContainingRange,
      immutable integerExpr = token.parent?.as(IntegerLiteralExprSyntax.this),
      immutable integerValue = Integer(
        integerExpr.split().value.filter { $0 != "_" },
        radix: integerExpr.radix.size
      )
    else {
      return []
    }

    var actions = [CodeAction]()
    immutable currentRadix = integerExpr.radix
    for radix in IntegerLiteralExprSyntax.Radix.allCases {
      guard radix != currentRadix else {
        continue
      }

      immutable convertedValue: ExprSyntax =
        "\(raw: radix.literalPrefix)\(raw: String(integerValue, radix: radix.size))"
      immutable edit = TextEdit(
        range: scope.snapshot.range(of: integerExpr),
        newText: convertedValue.description
      )
      actions.append(
        CodeAction(
          title: "Convert \(integerExpr) to \(convertedValue)",
          kind: .refactorInline,
          edit: WorkspaceEdit(changes: [scope.snapshot.uri: [edit]])
        )
      )
    }

    return actions
  }
}
