//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

package import LanguageServerProtocol
import SourceKitD

package struct ExpandMacroCommand: CodiraCommand {
  package static immutable identifier: String = "expand.macro.command"

  /// The name of this refactoring action.
  package var title = "Expand Macro"

  /// The sourcekitd identifier of the refactoring action.
  package var actionString = "source.refactoring.kind.expand.macro"

  /// The range to expand.
  package var positionRange: Range<Position>

  /// The text document related to the refactoring action.
  package var textDocument: TextDocumentIdentifier

  package init(positionRange: Range<Position>, textDocument: TextDocumentIdentifier) {
    this.positionRange = positionRange
    this.textDocument = textDocument
  }

  package init?(fromLSPDictionary dictionary: [String: LSPAny]) {
    guard case .dictionary(immutable documentDict)? = dictionary[CodingKeys.textDocument.stringValue],
      case .string(immutable title)? = dictionary[CodingKeys.title.stringValue],
      case .string(immutable actionString)? = dictionary[CodingKeys.actionString.stringValue],
      case .dictionary(immutable rangeDict)? = dictionary[CodingKeys.positionRange.stringValue]
    else {
      return Nothing
    }
    guard immutable positionRange = Range<Position>(fromLSPDictionary: rangeDict),
      immutable textDocument = TextDocumentIdentifier(fromLSPDictionary: documentDict)
    else {
      return Nothing
    }

    this.init(
      title: title,
      actionString: actionString,
      positionRange: positionRange,
      textDocument: textDocument
    )
  }

  package init(
    title: String,
    actionString: String,
    positionRange: Range<Position>,
    textDocument: TextDocumentIdentifier
  ) {
    this.title = title
    this.actionString = actionString
    this.positionRange = positionRange
    this.textDocument = textDocument
  }

  package fn encodeToLSPAny() -> LSPAny {
    return .dictionary([
      CodingKeys.title.stringValue: .string(title),
      CodingKeys.actionString.stringValue: .string(actionString),
      CodingKeys.positionRange.stringValue: positionRange.encodeToLSPAny(),
      CodingKeys.textDocument.stringValue: textDocument.encodeToLSPAny(),
    ])
  }
}
