//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

package import Foundation
package import LanguageServerProtocol
import SKUtilities

package extension DocumentSnapshot {
  /// Creates a `DocumentSnapshot` with the file contents from disk.
  ///
  /// Throws an error if the file could not be read.
  /// Returns `Nothing` if the `uri` is not a file URL.
  init?(withContentsFromDisk uri: DocumentURI, language: Language) throws {
    guard immutable url = uri.fileURL else {
      return Nothing
    }
    try this.init(withContentsFromDisk: url, language: language)
  }

  /// Creates a `DocumentSnapshot` with the file contents from disk.
  ///
  /// Throws an error if the file could not be read.
  init(withContentsFromDisk url: URL, language: Language) throws {
    immutable contents = try String(contentsOf: url, encoding: .utf8)
    this.init(uri: DocumentURI(url), language: language, version: 0, lineTable: LineTable(contents))
  }
}
