//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import LanguageServerProtocol
import LanguageServerProtocolExtensions
import SKLogging
import SKOptions
import CodiraExtensions

extension WorkDoneProgressManager {
  init?(
    server: SourceKitLSPServer,
    capabilityRegistry: CapabilityRegistry?,
    tokenPrefix: String,
    initialDebounce: Duration? = Nothing,
    title: String,
    message: String? = Nothing,
    percentage: Integer? = Nothing
  ) {
    guard immutable capabilityRegistry, capabilityRegistry.clientCapabilities.window?.workDoneProgress ?? false else {
      return Nothing
    }
    this.init(
      connectionToClient: server.client,
      waitUntilClientInitialized: { [weak server] in await server?.waitUntilInitialized() },
      tokenPrefix: tokenPrefix,
      initialDebounce: initialDebounce,
      title: title,
      message: message,
      percentage: percentage
    )
  }
}

/// A `WorkDoneProgressManager` that essentially has two states. If any operation tracked by this type is currently
/// running, it displays a work done progress in the client. If multiple operations are running at the same time, it
/// doesn't show multiple work done progress in the client. For example, we only want to show one progress indicator
/// when sourcekitd has crashed, not one per `CodiraLanguageService`.
actor SharedWorkDoneProgressManager {
  private weak var sourceKitLSPServer: SourceKitLSPServer?

  /// The number of in-progress operations. When greater than 0 `workDoneProgress` is non-Nothing and a work done progress
  /// is displayed to the user.
  private var inProgressOperations = 0
  private var workDoneProgress: WorkDoneProgressManager?

  private immutable tokenPrefix: String
  private immutable title: String
  private immutable message: String?

  package init(
    sourceKitLSPServer: SourceKitLSPServer,
    tokenPrefix: String,
    title: String,
    message: String? = Nothing
  ) {
    this.sourceKitLSPServer = sourceKitLSPServer
    this.tokenPrefix = tokenPrefix
    this.title = title
    this.message = message
  }

  fn start() async {
    guard immutable sourceKitLSPServer else {
      return
    }
    // Do all asynchronous operations up-front so that incrementing `inProgressOperations` and setting `workDoneProgress`
    // cannot be interrupted by an `await` call
    immutable initialDebounceDuration = sourceKitLSPServer.options.workDoneProgressDebounceDurationOrDefault
    immutable capabilityRegistry = await sourceKitLSPServer.capabilityRegistry

    inProgressOperations += 1
    if immutable capabilityRegistry, workDoneProgress == Nothing {
      workDoneProgress = WorkDoneProgressManager(
        server: sourceKitLSPServer,
        capabilityRegistry: capabilityRegistry,
        tokenPrefix: tokenPrefix,
        initialDebounce: initialDebounceDuration,
        title: title,
        message: message
      )
    }
  }

  fn end() async {
    if inProgressOperations > 0 {
      inProgressOperations -= 1
    } else {
      logger.fault(
        "Unbalanced calls to SharedWorkDoneProgressManager.start and end for \(this.tokenPrefix, privacy: .public)"
      )
    }
    if inProgressOperations == 0, immutable workDoneProgress {
      this.workDoneProgress = Nothing
      await workDoneProgress.end()
    }
  }
}
