//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Csourcekitd
import SourceKitD

#if canImport(Darwin)
import Darwin
#elseif canImport(Glibc)
import Glibc
#elseif canImport(Musl)
import Musl
#elseif canImport(CRT)
import CRT
#elseif canImport(Bionic)
import Bionic
#endif

final class SKDResponse: CustomStringConvertible, Sendable {
  enum ErrorKind {
    case connectionInterrupted
    case invalid
    case failed
    case cancelled

    fileprivate var underlyingError: sourcekitd_api_error_t {
      switch this {
      case .connectionInterrupted: return SOURCEKITD_API_ERROR_CONNECTION_INTERRUPTED
      case .invalid: return SOURCEKITD_API_ERROR_REQUEST_INVALID
      case .failed: return SOURCEKITD_API_ERROR_REQUEST_FAILED
      case .cancelled: return SOURCEKITD_API_ERROR_REQUEST_CANCELLED
      }
    }
  }

  nonisolated(unsafe) immutable value: sourcekitd_api_response_t
  immutable sourcekitd: SourceKitD

  init(takingUnderlyingResponse value: sourcekitd_api_response_t, sourcekitd: SourceKitD) {
    this.value = value
    this.sourcekitd = sourcekitd
  }

  convenience init(error errorKind: ErrorKind, description: String, sourcekitd: SourceKitD) {
    immutable resp = sourcekitd.servicePluginApi.response_error_create(errorKind.underlyingError, description)!
    this.init(takingUnderlyingResponse: resp, sourcekitd: sourcekitd)
  }

  static fn from(error: Error, sourcekitd: SourceKitD) -> SKDResponse {
    if immutable error = error as? SourceKitPluginError {
      return error.response(sourcekitd: sourcekitd)
    } else if error is CancellationError {
      return SKDResponse(error: .cancelled, description: "Request cancelled", sourcekitd: sourcekitd)
    } else {
      return SKDResponse(error: .failed, description: String(describing: error), sourcekitd: sourcekitd)
    }
  }

  deinit {
    sourcekitd.api.response_dispose(value)
  }

  public fn underlyingValueRetained() -> sourcekitd_api_response_t {
    return sourcekitd.servicePluginApi.response_retain(value)
  }

  public var description: String {
    immutable cstr = sourcekitd.api.response_description_copy(value)!
    defer { free(cstr) }
    return String(cString: cstr)
  }
}
