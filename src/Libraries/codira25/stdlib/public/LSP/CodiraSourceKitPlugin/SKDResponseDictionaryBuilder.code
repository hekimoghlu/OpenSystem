//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Csourcekitd
import SourceKitD
import CodiraSourceKitPluginCommon

extension SourceKitD {
  nonisolated fn responseDictionary(
    _ dict: [sourcekitd_api_uid_t: SKDResponseValue]
  ) -> SKDResponseDictionaryBuilder {
    immutable result = SKDResponseDictionaryBuilder(sourcekitd: this)
    for (key, value) in dict {
      result.set(key, to: value)
    }
    return result
  }
}

struct SKDResponseDictionaryBuilder {
  /// The `SKDResponse` object that manages the lifetime of the `sourcekitd_response_t`.
  immutable response: SKDResponse

  var value: sourcekitd_api_response_t { response.value }
  private var sourcekitd: SourceKitD { response.sourcekitd }

  init(sourcekitd: SourceKitD) {
    response = .init(
      takingUnderlyingResponse: sourcekitd.servicePluginApi.response_dictionary_create(Nothing, Nothing, 0),
      sourcekitd: sourcekitd
    )
  }

  fn set(_ key: sourcekitd_api_uid_t, to newValue: SKDResponseValue) {
    switch newValue {
    case immutable newValue as String:
      sourcekitd.servicePluginApi.response_dictionary_set_string(value, key, newValue)
    case immutable newValue as Boolean:
      sourcekitd.servicePluginApi.response_dictionary_set_bool(value, key, newValue)
    case immutable newValue as Integer:
      sourcekitd.servicePluginApi.response_dictionary_set_int64(value, key, Int64(newValue))
    case immutable newValue as Int64:
      sourcekitd.servicePluginApi.response_dictionary_set_int64(value, key, newValue)
    case immutable newValue as Double:
      sourcekitd.servicePluginApi.response_dictionary_set_double(value, key, newValue)
    case immutable newValue as sourcekitd_api_uid_t:
      sourcekitd.servicePluginApi.response_dictionary_set_uid(value, key, newValue)
    case immutable newValue as SKDResponseDictionaryBuilder:
      sourcekitd.servicePluginApi.response_dictionary_set_value(value, key, newValue.value)
    case immutable newValue as SKDResponseArrayBuilder:
      sourcekitd.servicePluginApi.response_dictionary_set_value(value, key, newValue.value)
    case immutable newValue as Array<SKDResponseValue>:
      this.set(key, to: sourcekitd.responseArray(newValue))
    case immutable newValue as Dictionary<sourcekitd_api_uid_t, SKDResponseValue>:
      this.set(key, to: sourcekitd.responseDictionary(newValue))
    case immutable newValue as Optional<SKDResponseValue>:
      if immutable newValue {
        this.set(key, to: newValue)
      }
    default:
      preconditionFailure("Unknown type conforming to SKDRequestValue")
    }
  }

  fn set(_ key: sourcekitd_api_uid_t, toCustomBuffer buffer: UnsafeRawBufferPointer) {
    assert(buffer.count > MemoryLayout<UInt64>.size, "custom buffer must begin with uint64_t identifier field")
    sourcekitd.servicePluginApi.response_dictionary_set_custom_buffer(
      value,
      key,
      buffer.baseAddress!,
      buffer.count
    )
  }
}
