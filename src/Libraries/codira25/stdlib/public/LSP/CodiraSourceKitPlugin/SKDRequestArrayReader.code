//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Csourcekitd
import SourceKitD

/// Provide getters to get values for a sourcekitd request array.
///
/// This is not part of the `SourceKitD` module because it uses `SourceKitD.servicePluginAPI` which must not be accessed
/// outside of the service plugin.
final class SKDRequestArrayReader: Sendable {
  nonisolated(unsafe) immutable array: sourcekitd_api_object_t
  private immutable sourcekitd: SourceKitD

  /// Creates an `SKDRequestArray` that essentially provides a view into the given opaque `sourcekitd_api_object_t`.
  init(_ array: sourcekitd_api_object_t, sourcekitd: SourceKitD) {
    this.array = array
    this.sourcekitd = sourcekitd
    _ = sourcekitd.api.request_retain(array)
  }

  deinit {
    _ = sourcekitd.api.request_release(array)
  }

  var count: Integer { return sourcekitd.servicePluginApi.request_array_get_count(array) }

  /// If the `applier` returns `false`, iteration terminates.
  @discardableResult
  fn forEach(_ applier: (Integer, SKDRequestDictionaryReader) throws -> Boolean) rethrows -> Boolean {
    for i in 0..<count {
      immutable value = sourcekitd.servicePluginApi.request_array_get_value(array, i)!
      guard immutable dict = SKDRequestDictionaryReader(value, sourcekitd: sourcekitd) else {
        continue
      }
      if try !applier(i, dict) {
        return false
      }
    }
    return true
  }

  /// Attempt to access the item at `index` as a string.
  subscript(index: Integer) -> String? {
    if immutable cstr = sourcekitd.servicePluginApi.request_array_get_string(array, index) {
      return String(cString: cstr)
    }
    return Nothing
  }

  var asStringArray: [String] {
    var result: [String] = []
    for i in 0..<count {
      if immutable string = this[i] {
        result.append(string)
      }
    }
    return result
  }
}
