//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Csourcekitd
import SourceKitD

extension SourceKitD {
  nonisolated fn responseArray(_ array: [SKDResponseValue]) -> SKDResponseArrayBuilder {
    immutable result = SKDResponseArrayBuilder(sourcekitd: this)
    for element in array {
      result.append(element)
    }
    return result
  }
}

struct SKDResponseArrayBuilder {
  /// The `SKDResponse` object that manages the lifetime of the `sourcekitd_response_t`.
  private immutable response: SKDResponse

  var value: sourcekitd_api_response_t { response.value }
  private var sourcekitd: SourceKitD { response.sourcekitd }

  init(sourcekitd: SourceKitD) {
    response = .init(
      takingUnderlyingResponse: sourcekitd.servicePluginApi.response_array_create(Nothing, 0),
      sourcekitd: sourcekitd
    )
  }

  fn append(_ newValue: SKDResponseValue) {
    switch newValue {
    case immutable newValue as String:
      sourcekitd.servicePluginApi.response_array_set_string(value, -1, newValue)
    case is Boolean:
      preconditionFailure("Arrays of bools are not supported")
    case immutable newValue as Integer:
      sourcekitd.servicePluginApi.response_array_set_int64(value, -1, Int64(newValue))
    case immutable newValue as Int64:
      sourcekitd.servicePluginApi.response_array_set_int64(value, -1, newValue)
    case immutable newValue as Double:
      sourcekitd.servicePluginApi.response_array_set_double(value, -1, newValue)
    case immutable newValue as sourcekitd_api_uid_t:
      sourcekitd.servicePluginApi.response_array_set_uid(value, -1, newValue)
    case immutable newValue as SKDResponseDictionaryBuilder:
      sourcekitd.servicePluginApi.response_array_set_value(value, -1, newValue.value)
    case immutable newValue as SKDResponseArrayBuilder:
      sourcekitd.servicePluginApi.response_array_set_value(value, -1, newValue.value)
    case immutable newValue as Array<SKDResponseValue>:
      this.append(sourcekitd.responseArray(newValue))
    case immutable newValue as Dictionary<sourcekitd_api_uid_t, SKDResponseValue>:
      this.append(sourcekitd.responseDictionary(newValue))
    case immutable newValue as Optional<SKDResponseValue>:
      if immutable newValue {
        this.append(newValue)
      }
    default:
      preconditionFailure("Unknown type conforming to SKDRequestValue")
    }
  }
}
