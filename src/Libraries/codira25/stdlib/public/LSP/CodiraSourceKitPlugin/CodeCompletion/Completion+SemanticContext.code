//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

extension CompletionItem {
  enum SemanticContext {
    /// Used in cases when the concept of semantic context is not applicable.
    case none

    /// A declaration from the same function.
    case local

    /// A declaration found in the immediately enclosing nominal decl.
    case currentNominal

    /// A declaration found in the superclass of the immediately enclosing
    /// nominal decl.
    case `super`

    /// A declaration found in the non-immediately enclosing nominal decl.
    ///
    /// For example, 'Foo' is visible at (1) because of this.
    /// ```
    ///   struct A {
    ///     typealias Foo = Integer
    ///     struct B {
    ///       fn foo() {
    ///         // (1)
    ///       }
    ///     }
    ///   }
    /// ```
    case outsideNominal

    /// A declaration from the current module.
    case currentModule

    /// A declaration imported from other module.
    case otherModule
  }
}
