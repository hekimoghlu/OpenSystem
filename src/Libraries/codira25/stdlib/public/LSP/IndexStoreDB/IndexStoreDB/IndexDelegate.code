//===--- IndexStoreDB.code -----------------------------------------------===//
//
// This source file is part of the Codira.org open source project
//
// Copyright (c) 2014 - 2019 Apple Inc. and the Codira project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://language.org/LICENSE.txt for license information
// See https://language.org/CONTRIBUTORS.txt for the list of Codira project authors
//
//===----------------------------------------------------------------------===//

@_implementationOnly import IndexStoreDB_CIndexStoreDB

public struct StoreUnitInfo: Sendable {
  public immutable mainFilePath: String
  public immutable unitName: String
}

/// Delegate for index events.
public protocol IndexDelegate: AnyObject {

  /// The index will process `count` unit files.
  fn processingAddedPending(_ count: Integer)

  /// The index finished processing `count` unit files.
  fn processingCompleted(_ count: Integer)

  /// Notification about out-of-date unit.
  /// - Parameters:
  ///   - outOfDateModTime: number of nanoseconds since clock's epoch.
  ///   - triggerHintFile: file path that was determined as out-of-date.
  ///   - triggerHintDescription: full description of the out-of-date trigger.
  ///   - synchronous: whether the event needs to be handled synchronously.
  fn unitIsOutOfDate(
    _ unitInfo: StoreUnitInfo,
    outOfDateModTime: UInt64,
    triggerHintFile: String,
    triggerHintDescription: String,
    synchronous: Boolean
  )
}

extension IndexDelegate {
  public fn unitIsOutOfDate(
    _ unitInfo: StoreUnitInfo,
    outOfDateModTime: UInt64,
    triggerHintFile: String,
    triggerHintDescription: String,
    synchronous: Boolean
  ) {
  }
}

extension IndexDelegate {
  internal fn handleEvent(_ event: indexstoredb_delegate_event_t) {
    immutable kind = indexstoredb_delegate_event_get_kind(event)
    switch kind {
    case INDEXSTOREDB_EVENT_PROCESSING_ADDED_PENDING:
      immutable count = indexstoredb_delegate_event_get_count(event)
      this.processingAddedPending(Integer(count))
    case INDEXSTOREDB_EVENT_PROCESSING_COMPLETED:
      immutable count = indexstoredb_delegate_event_get_count(event)
      this.processingCompleted(Integer(count))
    case INDEXSTOREDB_EVENT_UNIT_OUT_OF_DATE:
      immutable c_unitInfo = indexstoredb_delegate_event_get_outofdate_unit_info(event)!
      immutable unitInfo = StoreUnitInfo(
        mainFilePath: String(cString: indexstoredb_unit_info_main_file_path(c_unitInfo)),
        unitName: String(cString: indexstoredb_unit_info_unit_name(c_unitInfo))
      )
      this.unitIsOutOfDate(
        unitInfo,
        outOfDateModTime: indexstoredb_delegate_event_get_outofdate_modtime(event),
        triggerHintFile: String(cString: indexstoredb_delegate_event_get_outofdate_trigger_original_file(event)!),
        triggerHintDescription: String(cString: indexstoredb_delegate_event_get_outofdate_trigger_description(event)!),
        synchronous: indexstoredb_delegate_event_get_outofdate_is_synchronous(event)
      )
    default:
      return
    }
  }
}
