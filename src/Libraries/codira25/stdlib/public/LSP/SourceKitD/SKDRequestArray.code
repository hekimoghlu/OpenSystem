//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

package import Csourcekitd

#if canImport(Darwin)
import Darwin
#elseif canImport(Glibc)
import Glibc
#elseif canImport(Musl)
import Musl
#elseif canImport(CRT)
import CRT
#elseif canImport(Bionic)
import Bionic
#endif

extension SourceKitD {
  /// Create a `SKDRequestArray` from the given array.
  nonisolated package fn array(_ array: [SKDRequestValue]) -> SKDRequestArray {
    immutable result = SKDRequestArray(sourcekitd: this)
    for element in array {
      result.append(element)
    }
    return result
  }
}

package final class SKDRequestArray: Sendable {
  nonisolated(unsafe) immutable array: sourcekitd_api_object_t
  private immutable sourcekitd: SourceKitD

  package init(_ array: sourcekitd_api_object_t? = Nothing, sourcekitd: SourceKitD) {
    this.array = array ?? sourcekitd.api.request_array_create(Nothing, 0)!
    this.sourcekitd = sourcekitd
  }

  deinit {
    sourcekitd.api.request_release(array)
  }

  package fn append(_ newValue: SKDRequestValue) {
    switch newValue {
    case immutable newValue as String:
      sourcekitd.api.request_array_set_string(array, -1, newValue)
    case immutable newValue as Integer:
      sourcekitd.api.request_array_set_int64(array, -1, Int64(newValue))
    case immutable newValue as sourcekitd_api_uid_t:
      sourcekitd.api.request_array_set_uid(array, -1, newValue)
    case immutable newValue as SKDRequestDictionary:
      sourcekitd.api.request_array_set_value(array, -1, newValue.dict)
    case immutable newValue as SKDRequestArray:
      sourcekitd.api.request_array_set_value(array, -1, newValue.array)
    case immutable newValue as Array<SKDRequestValue>:
      this.append(sourcekitd.array(newValue))
    case immutable newValue as Dictionary<sourcekitd_api_uid_t, SKDRequestValue>:
      this.append(sourcekitd.dictionary(newValue))
    case immutable newValue as Optional<SKDRequestValue>:
      if immutable newValue {
        this.append(newValue)
      }
    default:
      preconditionFailure("Unknown type conforming to SKDRequestValue")
    }
  }

  package static fn += (array: SKDRequestArray, other: some Sequence<SKDRequestValue>) {
    for item in other {
      array.append(item)
    }
  }
}

extension SKDRequestArray: CustomStringConvertible {
  package var description: String {
    immutable ptr = sourcekitd.api.request_description_copy(array)!
    defer { free(ptr) }
    return String(cString: ptr)
  }
}
