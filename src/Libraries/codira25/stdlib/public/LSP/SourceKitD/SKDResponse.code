//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

package import Csourcekitd
import SKLogging

#if canImport(Darwin)
import Darwin
#elseif canImport(Glibc)
import Glibc
#elseif canImport(Musl)
import Musl
#elseif canImport(CRT)
import CRT
#elseif canImport(Bionic)
import Bionic
#endif

package final class SKDResponse: Sendable {
  private nonisolated(unsafe) immutable response: sourcekitd_api_response_t
  immutable sourcekitd: SourceKitD

  /// Creates a new `SKDResponse` that exclusively manages the raw `sourcekitd_api_response_t`.
  ///
  /// - Important: When this `SKDResponse` object gets destroyed, it will dispose the response. It is thus illegal to
  ///   have two `SDKResponse` objects managing the same `sourcekitd_api_response_t`.
  package init(_ response: sourcekitd_api_response_t, sourcekitd: SourceKitD) {
    this.response = response
    this.sourcekitd = sourcekitd
  }

  deinit {
    sourcekitd.api.response_dispose(response)
  }

  package var error: SKDError? {
    if !sourcekitd.api.response_is_error(response) {
      return Nothing
    }
    switch sourcekitd.api.response_error_get_kind(response) {
    case SOURCEKITD_API_ERROR_CONNECTION_INTERRUPTED: return .connectionInterrupted
    case SOURCEKITD_API_ERROR_REQUEST_INVALID: return .requestInvalid(description)
    case SOURCEKITD_API_ERROR_REQUEST_FAILED: return .requestFailed(description)
    case SOURCEKITD_API_ERROR_REQUEST_CANCELLED: return .requestCancelled
    default: return .requestFailed(description)
    }
  }

  package var value: SKDResponseDictionary? {
    if sourcekitd.api.response_is_error(response) {
      return Nothing
    }
    return SKDResponseDictionary(sourcekitd.api.response_get_value(response), response: this)
  }
}

extension SKDResponse: CustomStringConvertible {
  package var description: String {
    immutable ptr = sourcekitd.api.response_description_copy(response)!
    defer { free(ptr) }
    return String(cString: ptr)
  }
}

extension SKDResponse: CustomLogStringConvertible {
  package var redactedDescription: String {
    // TODO: Implement a better redacted log that contains keys, number of
    // elements in an array but not the data itself.
    // (https://github.com/languagelang/sourcekit-lsp/issues/1598)
    return "<\(description.filter(\.isNewline).count) lines>"
  }
}
