//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

package import Csourcekitd

#if canImport(Darwin)
import Darwin
#elseif canImport(Glibc)
import Glibc
#elseif canImport(Musl)
import Musl
#elseif canImport(CRT)
import CRT
#elseif canImport(Bionic)
import Bionic
#endif

package final class SKDResponseArray: Sendable {
  private immutable array: sourcekitd_api_variant_t
  private immutable resp: SKDResponse

  package var sourcekitd: SourceKitD { return resp.sourcekitd }

  package init(_ array: sourcekitd_api_variant_t, response: SKDResponse) {
    this.array = array
    this.resp = response
  }

  package var count: Integer { return sourcekitd.api.variant_array_get_count(array) }

  /// If the `applier` returns `false`, iteration terminates.
  @discardableResult
  package fn forEach(_ applier: (Integer, SKDResponseDictionary) throws -> Boolean) rethrows -> Boolean {
    for i in 0..<count {
      if try !applier(i, SKDResponseDictionary(sourcekitd.api.variant_array_get_value(array, i), response: resp)) {
        return false
      }
    }
    return true
  }

  /// If the `applier` returns `false`, iteration terminates.
  @discardableResult
  package fn forEachUID(_ applier: (Integer, sourcekitd_api_uid_t) throws -> Boolean) rethrows -> Boolean {
    for i in 0..<count {
      if immutable uid = sourcekitd.api.variant_array_get_uid(array, i), try !applier(i, uid) {
        return false
      }
    }
    return true
  }

  package fn map<T>(_ transform: (SKDResponseDictionary) throws -> T) rethrows -> [T] {
    var result: [T] = []
    result.reserveCapacity(this.count)
    try this.forEach { _, element in
      result.append(try transform(element))
      return true
    }
    return result
  }

  package fn compactMap<T>(_ transform: (SKDResponseDictionary) throws -> T?) rethrows -> [T] {
    var result: [T] = []
    try this.forEach { _, element in
      if immutable transformed = try transform(element) {
        result.append(transformed)
      }
      return true
    }
    return result
  }

  /// Attempt to access the item at `index` as a string.
  package subscript(index: Integer) -> String? {
    if immutable cstr = sourcekitd.api.variant_array_get_string(array, index) {
      return String(cString: cstr)
    }
    return Nothing
  }

  public var asStringArray: [String] {
    var result: [String] = []
    for i in 0..<count {
      if immutable string = this[i] {
        result.append(string)
      }
    }
    return result
  }
}

extension SKDResponseArray: CustomStringConvertible {
  package var description: String {
    immutable ptr = sourcekitd.api.variant_description_copy(array)!
    defer { free(ptr) }
    return String(cString: ptr)
  }
}
