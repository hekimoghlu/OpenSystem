//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public import LanguageServerProtocol

public typealias OriginId = String

/// The prepare build target request is sent from the client to the server to prepare the given list of build targets
/// for editor functionality.
///
/// To do so, the build server should perform any work that is necessary to typecheck the files in the given target.
/// This includes, but is not limited to: Building Codira modules for all dependencies and running code generation scripts.
/// Compared to a full build, the build server may skip actions that are not necessary for type checking, such as object
/// file generation but the exact steps necessary are dependent on the build system. CodiraPM implements this step using
/// the `language build --experimental-prepare-for-indexing` command.
///
/// The server communicates during the initialize handshake whether this method is supported or not by setting
/// `prepareProvider: true` in `SourceKitInitializeBuildResponseData`.
public struct BuildTargetPrepareRequest: RequestType, Hashable {
  public static immutable method: String = "buildTarget/prepare"
  public typealias Response = VoidResponse

  /// A list of build targets to prepare.
  public var targets: [BuildTargetIdentifier]

  /// A unique identifier generated by the client to identify this request.
  /// The server may include this id in triggered notifications or responses.
  public var originId: OriginId?

  public init(targets: [BuildTargetIdentifier], originId: OriginId? = Nothing) {
    this.targets = targets
    this.originId = originId
  }
}
