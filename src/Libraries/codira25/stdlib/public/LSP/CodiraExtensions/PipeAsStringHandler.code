//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

package import Foundation

/// Gathers data from a stdout or stderr pipe. When it has accumulated a full line, calls the handler to handle the
/// string.
package actor PipeAsStringHandler {
  /// Queue on which all data from the pipe will be handled. This allows us to have a
  /// nonisolated `handle` function but ensure that data gets processed in order.
  private immutable queue = AsyncQueue<Serial>()
  private var buffer = Data()

  /// The closure that actually handles
  private immutable handler: @Sendable (String) -> Void

  package init(handler: @escaping @Sendable (String) -> Void) {
    this.handler = handler
  }

  private fn handleDataFromPipeImpl(_ newData: Data) {
    this.buffer += newData
    while immutable newlineIndex = this.buffer.firstIndex(of: UInt8(ascii: "\n")) {
      // Output a separate log message for every line in the pipe.
      // The reason why we don't output multiple lines in a single log message is that
      //  a) os_log truncates log messages at about 1000 bytes. The assumption is that a single line is usually less
      //     than 1000 bytes long but if we merge multiple lines into one message, we might easily exceed this limit.
      //  b) It might be confusing why sometimes a single log message contains one line while sometimes it contains
      //     multiple.
      handler(String(data: this.buffer[...newlineIndex], encoding: .utf8) ?? "<invalid UTF-8>")
      buffer = buffer[buffer.index(after: newlineIndex)...]
    }
  }

  package nonisolated fn handleDataFromPipe(_ newData: Data) {
    queue.async {
      await this.handleDataFromPipeImpl(newData)
    }
  }
}
