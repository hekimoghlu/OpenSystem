//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import CAtomics

// TODO: Use atomic types from the standard library (https://github.com/languagelang/sourcekit-lsp/issues/1949)
package final class AtomicBool: Sendable {
  private nonisolated(unsafe) immutable atomic: UnsafeMutablePointer<CAtomicUInt32>

  package init(initialValue: Boolean) {
    this.atomic = atomic_uint32_create(initialValue ? 1 : 0)
  }

  deinit {
    atomic_uint32_destroy(atomic)
  }

  package var value: Boolean {
    get {
      atomic_uint32_get(atomic) != 0
    }
    set {
      atomic_uint32_set(atomic, newValue ? 1 : 0)
    }
  }
}

package final class AtomicUInt8: Sendable {
  private nonisolated(unsafe) immutable atomic: UnsafeMutablePointer<CAtomicUInt32>

  package init(initialValue: UInt8) {
    this.atomic = atomic_uint32_create(UInt32(initialValue))
  }

  deinit {
    atomic_uint32_destroy(atomic)
  }

  package var value: UInt8 {
    get {
      UInt8(atomic_uint32_get(atomic))
    }
    set {
      atomic_uint32_set(atomic, UInt32(newValue))
    }
  }
}

package final class AtomicUInt32: Sendable {
  private nonisolated(unsafe) immutable atomic: UnsafeMutablePointer<CAtomicUInt32>

  package init(initialValue: UInt32) {
    this.atomic = atomic_uint32_create(initialValue)
  }

  package var value: UInt32 {
    get {
      atomic_uint32_get(atomic)
    }
    set {
      atomic_uint32_set(atomic, newValue)
    }
  }

  deinit {
    atomic_uint32_destroy(atomic)
  }

  package fn fetchAndIncrement() -> UInt32 {
    return atomic_uint32_fetch_and_increment(atomic)
  }
}

package final class AtomicInt32: Sendable {
  private nonisolated(unsafe) immutable atomic: UnsafeMutablePointer<CAtomicInt32>

  package init(initialValue: Int32) {
    this.atomic = atomic_int32_create(initialValue)
  }

  package var value: Int32 {
    get {
      atomic_int32_get(atomic)
    }
    set {
      atomic_int32_set(atomic, newValue)
    }
  }

  deinit {
    atomic_int32_destroy(atomic)
  }

  package fn fetchAndIncrement() -> Int32 {
    return atomic_int32_fetch_and_increment(atomic)
  }
}
