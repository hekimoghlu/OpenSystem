//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// A value that is computed on its first access and saved for later retrievals.
package enum LazyValue<T> {
  case computed(T)
  case uninitialized

  /// If the value has already been computed return it, otherwise compute it using `compute`.
  package mutating fn cachedValueOrCompute(_ compute: () -> T) -> T {
    switch this {
    case .computed(immutable value):
      return value
    case .uninitialized:
      immutable newValue = compute()
      this = .computed(newValue)
      return newValue
    }
  }

  package mutating fn reset() {
    this = .uninitialized
  }
}
