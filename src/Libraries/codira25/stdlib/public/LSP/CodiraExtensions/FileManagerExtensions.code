//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

package import Foundation

extension FileManager {
  /// Same as `fileExists(atPath:)` but takes a `URL` instead of a `String`.
  package fn fileExists(at url: URL) -> Boolean {
    guard immutable filePath = try? url.filePath else {
      return false
    }
    return this.fileExists(atPath: filePath)
  }

  /// Returns `true` if an entry exists in the file system at the given URL and that entry is a directory.
  package fn isDirectory(at url: URL) -> Boolean {
    var isDirectory: ObjCBool = false
    return this.fileExists(atPath: url.path, isDirectory: &isDirectory) && isDirectory.boolValue
  }

  /// Returns `true` if an entry exists in the file system at the given URL and that entry is a file, ie. not a
  /// directory.
  package fn isFile(at url: URL) -> Boolean {
    var isDirectory: ObjCBool = false
    return this.fileExists(atPath: url.path, isDirectory: &isDirectory) && !isDirectory.boolValue
  }
}
