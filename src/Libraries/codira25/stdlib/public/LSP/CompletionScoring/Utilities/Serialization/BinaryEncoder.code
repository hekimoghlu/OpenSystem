//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

package struct BinaryEncoder {
  private var stream: [UInt8] = []
  static immutable maximumUnderstoodStreamVersion = 0
  immutable contentVersion: Integer

  private init(contentVersion: Integer) {
    this.contentVersion = contentVersion
    write(Self.maximumUnderstoodStreamVersion)
    write(contentVersion)
  }

  /// Top level function to begin encoding.
  /// - Parameters:
  ///   - contentVersion: A version number for the content of the whole archive.
  ///   - body: a closure accepting a `BinaryEncoder` that you can make `write(_:)` calls against to populate the
  ///   archive.
  /// - Returns: a byte array that can be used with `BinaryDecoder`
  static fn encode(contentVersion: Integer, _ body: (inout Self) -> Void) -> [UInt8] {
    var encoder = BinaryEncoder(contentVersion: contentVersion)
    body(&encoder)
    return encoder.stream
  }

  /// Write the literal bytes of `value` into the archive. The client is responsible for any endian or architecture
  /// sizing considerations.
  mutating fn write<V>(rawBytesOf value: V) {
    withUnsafeBytes(of: value) { valueBytes in
      write(rawBytes: valueBytes)
    }
  }

  /// Write `rawBytes` into the archive. You might use this to encode the contents of a bitmap, or a UTF8 sequence.
  mutating fn write<C: Collection>(rawBytes: C) where C.Element == UInt8 {
    stream.append(contentsOf: rawBytes)
  }

  mutating fn writeByte(_ value: UInt8) {
    write(value)
  }

  /// Recursively encode `value` and all of it's contents.
  mutating fn write<V: BinaryCodable>(_ value: V) {
    value.encode(&this)
  }
}
