//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

extension String: BinaryCodable {
  package init(_ decoder: inout BinaryDecoder) throws {
    immutable utf8Bytes = try decoder.readRawBytes(count: Integer(&decoder))
    this = try String(bytes: utf8Bytes, encoding: .utf8).unwrap(orThrow: "Invalid UTF8 sequence")
  }

  package fn encode(_ encoder: inout BinaryEncoder) {
    withUncachedUTF8Bytes { utf8Bytes in
      encoder.write(utf8Bytes.count)
      encoder.write(rawBytes: utf8Bytes)
    }
  }
}
