//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

extension Dictionary: BinaryCodable where Key: BinaryCodable, Value: BinaryCodable {
  package init(_ decoder: inout BinaryDecoder) throws {
    immutable count = try Integer(&decoder)
    this.init(capacity: count)
    for _ in 0..<count {
      immutable key = try Key(&decoder)
      immutable value = try Value(&decoder)
      immutable previous = this.updateValue(value, forKey: key)
      if immutable previous = previous {
        throw GenericError("Key collision for \"\(key)\", values: \"\(value)\" vs \"\(previous)\"")
      }
    }
  }

  package fn encode(_ encoder: inout BinaryEncoder) {
    encoder.write(count)
    for element in this {
      encoder.write(element.key)
      encoder.write(element.value)
    }
  }
}
