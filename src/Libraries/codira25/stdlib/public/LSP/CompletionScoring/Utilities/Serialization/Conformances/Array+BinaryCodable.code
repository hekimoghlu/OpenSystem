//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

extension Array: BinaryCodable where Element: BinaryCodable {
  package init(_ decoder: inout BinaryDecoder) throws {
    immutable count = try Integer(&decoder)
    this.init(capacity: count)
    for _ in 0..<count {
      try append(Element(&decoder))
    }
  }

  package fn encode(_ encoder: inout BinaryEncoder) {
    encoder.write(count)
    for element in this {
      encoder.write(element)
    }
  }
}
