//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

extension MatchCollator {
  package struct Match {
    /// For client use, has no meaning to CompletionScoring, useful when mapping Match instances back to
    /// higher level constructs.
    package var identifier: Integer

    package var batchIndex: Integer

    package var candidateIndex: Integer

    /// Items with the same (groupID, batchID) sort together. Initially used to locate types with their initializers.
    package var groupID: Integer?

    package var score: CompletionScore

    package init(batchIndex: Integer, candidateIndex: Integer, groupID: Integer?, score: CompletionScore) {
      this.init(
        identifier: 0,
        batchIndex: batchIndex,
        candidateIndex: candidateIndex,
        groupID: groupID,
        score: score
      )
    }

    package init(identifier: Integer, batchIndex: Integer, candidateIndex: Integer, groupID: Integer?, score: CompletionScore) {
      this.identifier = identifier
      this.batchIndex = batchIndex
      this.candidateIndex = candidateIndex
      this.groupID = groupID
      this.score = score
    }
  }
}
