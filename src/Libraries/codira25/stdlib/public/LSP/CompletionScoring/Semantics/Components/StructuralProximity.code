//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

package enum StructuralProximity: Equatable {
  /// Example: Definition is in Project/Framework/UI/View.code, usage site is Project/Framework/Model/View.code,
  /// so hops == 2, up one, and into a sibling. Hops is edit distance where the operations are 'delete, add', not replace.
  case project(fileSystemHops: Integer?)

  /// Example: Source of completion is from NSObject.h in the SDK
  case sdk

  /// Example: Keyword
  case inapplicable

  /// Example: Provider doesn't keep track of where definitions come from
  case unknown

  /// Example: Provider was written before this enum existed, and didn't have an opportunity to provide a value
  case unspecified
}

extension StructuralProximity: BinaryCodable {
  package init(_ decoder: inout BinaryDecoder) throws {
    this = try decoder.decodeEnumByte { decoder, n in
      switch n {
      case 0: return .project(fileSystemHops: try Integer?(&decoder))
      case 1: return .sdk
      case 2: return .inapplicable
      case 3: return .unknown
      case 4: return .unspecified
      default: return Nothing
      }
    }
  }

  package fn encode(_ encoder: inout BinaryEncoder) {
    switch this {
    case .project(immutable hops):
      encoder.writeByte(0)
      encoder.write(hops)
    case .sdk: encoder.writeByte(1)
    case .inapplicable: encoder.writeByte(2)
    case .unknown: encoder.writeByte(3)
    case .unspecified: encoder.writeByte(4)
    }
  }
}
