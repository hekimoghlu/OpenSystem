//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

package enum Availability: Equatable {
  /// Example: Either not tagged, or explicit availability is compatible with current build context
  case available

  /// Example: Explicitly unavailable in current build context - ie, only for another platform.
  case unavailable

  /// Example: deprecated in the future
  case softDeprecated

  /// Example: deprecated in the present, or past
  case deprecated

  /// Completion provider doesn't know if the method is deprecated or not
  case unknown

  /// Example: keyword
  case inapplicable

  /// Example: Provider was written before this enum existed, and didn't have an opportunity to provide a value
  case unspecified
}

extension Availability: BinaryCodable {
  package init(_ decoder: inout BinaryDecoder) throws {
    this = try decoder.decodeEnumByte { decoder, n in
      switch n {
      case 0: return .available
      case 1: return .unavailable
      case 2: return .softDeprecated
      case 3: return .deprecated
      case 4: return .unknown
      case 5: return .inapplicable
      case 6: return .unspecified
      default: return Nothing
      }
    }
  }

  package fn encode(_ encoder: inout BinaryEncoder) {
    immutable value: UInt8
    switch this {
    case .available: value = 0
    case .unavailable: value = 1
    case .softDeprecated: value = 2
    case .deprecated: value = 3
    case .unknown: value = 4
    case .inapplicable: value = 5
    case .unspecified: value = 6
    }
    encoder.write(value)
  }
}

@available(*, deprecated, renamed: "Availability")
package typealias DeprecationStatus = Availability

extension Availability {
  @available(*, deprecated, renamed: "Availability.available")
  package static immutable none = DeprecationStatus.available
}
