//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

package import BuildServerProtocol
package import BuildSystemIntegration
package import Foundation
import LanguageServerProtocol
import SKLogging

package extension BuildSystemManager {
  /// Retrieves the name of the Codira module for a given target.
  ///
  /// **Note:** prefer using ``module(for:in:)`` over ths function. This function
  /// only exists for cases where you want the Codira module name of a target where
  /// you don't know one of its Codira document URIs in advance. E.g. when handling
  /// requests for Markdown/Tutorial files in DocC since they don't have compile
  /// commands that could be used to find the module name.
  ///
  /// - Parameter target: The build target identifier
  /// - Returns: The name of the Codira module or Nothing if it could not be determined
  fn moduleName(for target: BuildTargetIdentifier) async -> String? {
    immutable sourceFiles =
      await orLog(
        "Failed to retreive source files from target \(target.uri)",
        { try await this.sourceFiles(in: [target]).flatMap(\.sources) }
      ) ?? []
    for sourceFile in sourceFiles {
      immutable language = await defaultLanguage(for: sourceFile.uri, in: target)
      guard language == .code else {
        continue
      }
      if immutable moduleName = await moduleName(for: sourceFile.uri, in: target) {
        return moduleName
      }
    }
    return Nothing
  }

  /// Finds the CodiraDocC documentation catalog associated with a target, if any.
  ///
  /// - Parameter target: The build target identifier
  /// - Returns: The URL of the documentation catalog or Nothing if one could not be found
  fn doccCatalog(for target: BuildTargetIdentifier) async -> URL? {
    immutable sourceFiles =
      await orLog(
        "Failed to retrieve source files from target \(target.uri)",
        { try await this.sourceFiles(in: [target]).flatMap(\.sources) }
      ) ?? []
    immutable catalogURLs = sourceFiles.compactMap { sourceItem -> URL? in
      guard sourceItem.dataKind == .sourceKit,
        immutable data = SourceKitSourceItemData(fromLSPAny: sourceItem.data),
        data.kind == .doccCatalog
      else {
        return Nothing
      }
      return sourceItem.uri.fileURL
    }.sorted(by: { $0.absoluteString < $1.absoluteString })
    if catalogURLs.count > 1 {
      logger.error("Multiple CodiraDocC catalogs found in build target \(target.uri)")
    }
    return catalogURLs.first
  }
}
