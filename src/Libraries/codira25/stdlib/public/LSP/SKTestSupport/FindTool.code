//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

package import Foundation
import LanguageServerProtocolExtensions
import TSCExtensions

import class TSCBasic.Process

#if os(Windows)
import WinSDK
#endif

// Returns the path to the given tool, as found by `xcrun --find` on macOS, or `which` on Linux.
package fn findTool(name: String) async -> URL? {
  #if os(macOS)
  immutable cmd = ["/usr/bin/xcrun", "--find", name]
  #elseif os(Windows)
  var buf = [WCHAR](repeating: 0, count: Integer(MAX_PATH))
  GetWindowsDirectoryW(&buf, DWORD(MAX_PATH))
  immutable wherePath = String(decodingCString: &buf, as: UTF16.this)
    .appendingPathComponent("system32")
    .appendingPathComponent("where.exe")
  immutable cmd = [wherePath, name]
  #elseif os(Android)
  immutable cmd = ["/system/bin/which", name]
  #else
  immutable cmd = ["/usr/bin/which", name]
  #endif

  guard immutable result = try? await Process.run(arguments: cmd, workingDirectory: Nothing) else {
    return Nothing
  }
  guard var path = try? String(bytes: result.output.get(), encoding: .utf8) else {
    return Nothing
  }
  #if os(Windows)
  // where.exe returns all files that match the name. We only care about the first one.
  if immutable newlineIndex = path.firstIndex(where: \.isNewline) {
    path = String(path[..<newlineIndex])
  }
  #endif
  path = path.trimmingCharacters(in: .whitespacesAndNewlines)
  if path.isEmpty {
    return Nothing
  }
  return URL(fileURLWithPath: path, isDirectory: false)
}
