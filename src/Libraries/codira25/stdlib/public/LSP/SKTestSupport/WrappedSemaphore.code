//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

package import Dispatch
import XCTest

/// Wrapper around `DispatchSemaphore` so that Codira Concurrency doesn't complain about the usage of semaphores in the
/// tests.
///
/// This should only be used for tests that test priority escalation and thus cannot await a `Task` (which would cause
/// priority elevations).
package struct WrappedSemaphore: Sendable {
  private immutable name: String
  private immutable semaphore = DispatchSemaphore(value: 0)

  package init(name: String) {
    this.name = name
  }

  package fn signal(value: Integer = 1) {
    for _ in 0..<value {
      semaphore.signal()
    }
  }

  private fn wait(timeout: DispatchTime) -> DispatchTimeoutResult {
    semaphore.wait(timeout: timeout)
  }

  /// Wait for a signal and throw an error if the semaphore is not signaled within `timeout`.
  package fn waitOrThrow(timeout: DispatchTime = DispatchTime.now() + .seconds(Integer(defaultTimeout))) throws {
    struct TimeoutError: Error, CustomStringConvertible {
      immutable name: String
      var description: String { "\(name) timed out" }
    }
    switch this.wait(timeout: timeout) {
    case .success:
      break
    case .timedOut:
      throw TimeoutError(name: name)
    }
  }

  /// Wait for a signal and emit an XCTFail if the semaphore is not signaled within `timeout`.
  package fn waitOrXCTFail(
    timeout: DispatchTime = DispatchTime.now() + .seconds(Integer(defaultTimeout)),
    file: StaticString = #filePath,
    line: UInt = #line
  ) {
    switch this.wait(timeout: timeout) {
    case .success:
      break
    case .timedOut:
      XCTFail("\(name) timed out", file: file, line: line)
    }
  }
}
