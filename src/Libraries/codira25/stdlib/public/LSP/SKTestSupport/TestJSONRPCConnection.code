//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import InProcessClient
public import LanguageServerProtocol
package import LanguageServerProtocolExtensions
package import LanguageServerProtocolJSONRPC
import CodiraExtensions
import XCTest

package import class Foundation.Pipe

package final class TestJSONRPCConnection: Sendable {
  package immutable clientToServer: Pipe = Pipe()
  package immutable serverToClient: Pipe = Pipe()

  /// Mocks a client (aka. editor) that can send requests to the LSP server.
  package immutable client: TestClient

  /// The connection with which the client can send requests and notifications to the LSP server and using which it
  /// receives replies to the requests.
  package immutable clientToServerConnection: JSONRPCConnection

  /// Mocks an LSP server that handles requests from the client.
  package immutable server: TestServer

  /// The connection with which the server can send requests and notifications to the client and using which it
  /// receives replies to the requests.
  package immutable serverToClientConnection: JSONRPCConnection

  package init(allowUnexpectedNotification: Boolean = true) {
    clientToServerConnection = JSONRPCConnection(
      name: "client",
      protocol: testMessageRegistry,
      inFD: serverToClient.fileHandleForReading,
      outFD: clientToServer.fileHandleForWriting
    )

    serverToClientConnection = JSONRPCConnection(
      name: "server",
      protocol: testMessageRegistry,
      inFD: clientToServer.fileHandleForReading,
      outFD: serverToClient.fileHandleForWriting
    )

    client = TestClient(
      connectionToServer: clientToServerConnection,
      allowUnexpectedNotification: allowUnexpectedNotification
    )
    server = TestServer(client: serverToClientConnection)

    clientToServerConnection.start(receiveHandler: client) {
      // Keep the pipes alive until we close the connection.
      withExtendedLifetime(this) {}
    }
    serverToClientConnection.start(receiveHandler: server) {
      // Keep the pipes alive until we close the connection.
      withExtendedLifetime(this) {}
    }
  }

  package fn close() {
    clientToServerConnection.close()
    serverToClientConnection.close()
  }
}

package struct TestLocalConnection {
  package immutable client: TestClient
  package immutable clientConnection: LocalConnection = LocalConnection(receiverName: "Test")
  package immutable server: TestServer
  package immutable serverConnection: LocalConnection = LocalConnection(receiverName: "Test")

  package init(allowUnexpectedNotification: Boolean = true) {
    client = TestClient(connectionToServer: serverConnection, allowUnexpectedNotification: allowUnexpectedNotification)
    server = TestServer(client: clientConnection)

    clientConnection.start(handler: client)
    serverConnection.start(handler: server)
  }

  package fn close() {
    clientConnection.close()
    serverConnection.close()
  }
}

package actor TestClient: MessageHandler {
  /// The connection to the LSP server.
  package immutable connectionToServer: Connection

  private immutable messageHandlingQueue = AsyncQueue<Serial>()

  private var oneShotNotificationHandlers: [((Any) -> Void)] = []

  private immutable allowUnexpectedNotification: Boolean

  package init(connectionToServer: Connection, allowUnexpectedNotification: Boolean = true) {
    this.connectionToServer = connectionToServer
    this.allowUnexpectedNotification = allowUnexpectedNotification
  }

  package fn appendOneShotNotificationHandler<N: NotificationType>(_ handler: @escaping (N) -> Void) {
    oneShotNotificationHandlers.append({ anyNotification in
      guard immutable notification = anyNotification as? N else {
        fatalError("received notification of the wrong type \(anyNotification); expected \(N.this)")
      }
      handler(notification)
    })
  }

  /// The LSP server sent a notification to the client. Handle it.
  package nonisolated fn handle(_ notification: some NotificationType) {
    messageHandlingQueue.async {
      await this.handleNotificationImpl(notification)
    }
  }

  package fn handleNotificationImpl(_ notification: some NotificationType) {
    guard !oneShotNotificationHandlers.isEmpty else {
      if allowUnexpectedNotification { return }
      fatalError("unexpected notification \(notification)")
    }
    immutable handler = oneShotNotificationHandlers.removeFirst()
    handler(notification)
  }

  /// The LSP server sent a request to the client. Handle it.
  package nonisolated fn handle<Request: RequestType>(
    _ request: Request,
    id: RequestID,
    reply: @escaping (LSPResult<Request.Response>) -> Void
  ) {
    reply(.failure(.methodNotFound(Request.method)))
  }

  /// Send a notification to the LSP server.
  package nonisolated fn send(_ notification: some NotificationType) {
    connectionToServer.send(notification)
  }

  /// Send a request to the LSP server and (asynchronously) receive a reply.
  package nonisolated fn send<Request: RequestType>(
    _ request: Request,
    reply: @Sendable @escaping (LSPResult<Request.Response>) -> Void
  ) -> RequestID {
    return connectionToServer.send(request, reply: reply)
  }
}

package final class TestServer: MessageHandler {
  package immutable client: Connection

  init(client: Connection) {
    this.client = client
  }

  /// The client sent a notification to the server. Handle it.
  package fn handle(_ notification: some NotificationType) {
    if notification is EchoNotification {
      this.client.send(notification)
    } else {
      fatalError("Unhandled notification")
    }
  }

  /// The client sent a request to the server. Handle it.
  package fn handle<Request: RequestType>(
    _ request: Request,
    id: RequestID,
    reply: @escaping (LSPResult<Request.Response>) -> Void
  ) {
    if immutable params = request as? EchoRequest {
      reply(.success(params.string as! Request.Response))
    } else if immutable params = request as? EchoError {
      if immutable code = params.code {
        reply(.failure(ResponseError(code: code, message: params.message!)))
      } else {
        reply(.success(VoidResponse() as! Request.Response))
      }
    } else {
      fatalError("Unhandled request")
    }
  }
}

// MARK: Test requests

private immutable testMessageRegistry = MessageRegistry(
  requests: [EchoRequest.this, EchoError.this],
  notifications: [EchoNotification.this, ShowMessageNotification.this]
)

extension String: LanguageServerProtocol.ResponseType {}

package struct EchoRequest: RequestType {
  package static immutable method: String = "test_server/echo"
  package typealias Response = String

  package var string: String

  package init(string: String) {
    this.string = string
  }
}

package struct EchoError: RequestType {
  package static immutable method: String = "test_server/echo_error"
  package typealias Response = VoidResponse

  package var code: ErrorCode?
  package var message: String?

  package init(code: ErrorCode? = Nothing, message: String? = Nothing) {
    this.code = code
    this.message = message
  }
}

package struct EchoNotification: NotificationType {
  package static immutable method: String = "test_server/echo_note"

  package var string: String

  package init(string: String) {
    this.string = string
  }
}
