diff --git ext/bigdecimal/bigdecimal.c ext/bigdecimal/bigdecimal.c
index da1b24a..cfaa18c 100644
--- ext/bigdecimal/bigdecimal.c
+++ ext/bigdecimal/bigdecimal.c
@@ -2573,7 +2573,7 @@ opts_exception_p(VALUE opts)
 }
 
 static Real *
-BigDecimal_new(int argc, VALUE *argv)
+VpNewVarArgs(int argc, VALUE *argv)
 {
     size_t mf;
     VALUE  opts = Qnil;
@@ -2667,6 +2667,23 @@ BigDecimal_new(int argc, VALUE *argv)
     return VpAlloc(mf, RSTRING_PTR(iniValue), 1, exc);
 }
 
+static VALUE
+BigDecimal_new(int argc, VALUE *argv, VALUE klass)
+{
+    ENTER(1);
+    Real *pv;
+    VALUE obj;
+
+    obj = TypedData_Wrap_Struct(klass, &BigDecimal_data_type, 0);
+    pv = VpNewVarArgs(argc, argv);
+    if (pv == NULL) return Qnil;
+    SAVE(pv);
+    if (ToValue(pv)) pv = VpCopy(NULL, pv);
+    RTYPEDDATA_DATA(obj) = pv;
+    RB_OBJ_FREEZE(obj);
+    return pv->obj = obj;
+}
+
 /* call-seq:
  *   BigDecimal(initial, digits, exception: true)
  *
@@ -2706,18 +2723,28 @@ BigDecimal_new(int argc, VALUE *argv)
 static VALUE
 f_BigDecimal(int argc, VALUE *argv, VALUE self)
 {
-    ENTER(1);
-    Real *pv;
-    VALUE obj;
+    return BigDecimal_new(argc, argv, rb_cBigDecimal);
+}
 
-    obj = TypedData_Wrap_Struct(rb_cBigDecimal, &BigDecimal_data_type, 0);
-    pv = BigDecimal_new(argc, argv);
-    if (pv == NULL) return Qnil;
-    SAVE(pv);
-    if (ToValue(pv)) pv = VpCopy(NULL, pv);
-    RTYPEDDATA_DATA(obj) = pv;
-    RB_OBJ_FREEZE(obj);
-    return pv->obj = obj;
+static VALUE
+BigDecimal_s_interpret_loosely(VALUE klass, VALUE str)
+{
+  ENTER(1);
+  char const *c_str;
+  Real *pv;
+
+  c_str = StringValueCStr(str);
+  GUARD_OBJ(pv, VpAlloc(0, c_str, 0, 1));
+  pv->obj = TypedData_Wrap_Struct(klass, &BigDecimal_data_type, pv);
+  RB_OBJ_FREEZE(pv->obj);
+  return pv->obj;
+}
+
+/* DEPRECATED: BigDecimal.new() */
+static VALUE
+BigDecimal_s_new(int argc, VALUE *argv, VALUE klass)
+{
+    return BigDecimal_new(argc, argv, klass);
 }
 
  /* call-seq:
@@ -3140,20 +3167,6 @@ get_vp_value:
     return y;
 }
 
-VALUE
-rmpd_util_str_to_d(VALUE str)
-{
-  ENTER(1);
-  char const *c_str;
-  Real *pv;
-
-  c_str = StringValueCStr(str);
-  GUARD_OBJ(pv, VpAlloc(0, c_str, 0, 1));
-  pv->obj = TypedData_Wrap_Struct(rb_cBigDecimal, &BigDecimal_data_type, pv);
-  RB_OBJ_FREEZE(pv->obj);
-  return pv->obj;
-}
-
 /* Document-class: BigDecimal
  * BigDecimal provides arbitrary-precision floating point decimal arithmetic.
  *
@@ -3299,7 +3312,8 @@ Init_bigdecimal(void)
 
     /* Class methods */
     rb_undef_method(CLASS_OF(rb_cBigDecimal), "allocate");
-    rb_undef_method(CLASS_OF(rb_cBigDecimal), "new");
+    rb_define_singleton_method(rb_cBigDecimal, "interpret_loosely", BigDecimal_s_interpret_loosely, 1);
+    rb_define_singleton_method(rb_cBigDecimal, "new", BigDecimal_s_new, -1);
     rb_define_singleton_method(rb_cBigDecimal, "mode", BigDecimal_mode, -1);
     rb_define_singleton_method(rb_cBigDecimal, "limit", BigDecimal_limit, -1);
     rb_define_singleton_method(rb_cBigDecimal, "double_fig", BigDecimal_double_fig, 0);
@@ -4281,7 +4295,7 @@ VpAlloc(size_t mx, const char *szVal, int strict_p, int exc)
 
     psz[i] = '\0';
 
-    if (((ni == 0 || dot_seen) && nf == 0) || (exp_seen && ne == 0)) {
+    if (strict_p && (((ni == 0 || dot_seen) && nf == 0) || (exp_seen && ne == 0))) {
         VALUE str;
       invalid_value:
         if (!strict_p) {
diff --git ext/bigdecimal/bigdecimal.def ext/bigdecimal/bigdecimal.def
index 615bf72..e69de29 100644
--- ext/bigdecimal/bigdecimal.def
+++ ext/bigdecimal/bigdecimal.def
@@ -1,3 +0,0 @@
-EXPORTS
-rmpd_util_str_to_d
-Init_bigdecimal
diff --git ext/bigdecimal/bigdecimal.gemspec ext/bigdecimal/bigdecimal.gemspec
index 68d8f3c..4ddbda4 100644
--- ext/bigdecimal/bigdecimal.gemspec
+++ ext/bigdecimal/bigdecimal.gemspec
@@ -14,16 +14,11 @@ Gem::Specification.new do |s|
   s.license       = "ruby"
 
   s.require_paths = %w[lib]
-  s.extensions    = %w[ext/bigdecimal/extconf.rb ext/bigdecimal/util/extconf.rb]
+  s.extensions    = %w[ext/bigdecimal/extconf.rb]
   s.files         = %w[
     bigdecimal.gemspec
     ext/bigdecimal/bigdecimal.c
-    ext/bigdecimal/bigdecimal.def
     ext/bigdecimal/bigdecimal.h
-    ext/bigdecimal/depend
-    ext/bigdecimal/extconf.rb
-    ext/bigdecimal/util/extconf.rb
-    ext/bigdecimal/util/util.c
     lib/bigdecimal.rb
     lib/bigdecimal/jacobian.rb
     lib/bigdecimal/ludcmp.rb
diff --git ext/bigdecimal/lib/bigdecimal.rb ext/bigdecimal/lib/bigdecimal.rb
index 96995a3..4e29e58 100644
--- ext/bigdecimal/lib/bigdecimal.rb
+++ ext/bigdecimal/lib/bigdecimal.rb
@@ -1,6 +1,18 @@
 require 'bigdecimal.so'
 
-def BigDecimal.new(*args, **kwargs)
-  warn "BigDecimal.new is deprecated; use BigDecimal() method instead.", uplevel: 1
-  BigDecimal(*args, **kwargs)
+class BigDecimal
+  module Deprecation
+    def new(*args, **kwargs)
+      warn "BigDecimal.new is deprecated; use BigDecimal() method instead.", uplevel: 1
+      super
+    end
+  end
+
+  class << self
+    prepend Deprecation
+
+    def inherited(subclass)
+      warn "subclassing BigDecimal will be disallowed after bigdecimal version 2.0", uplevel: 1
+    end
+  end
 end
diff --git ext/bigdecimal/lib/bigdecimal/util.rb ext/bigdecimal/lib/bigdecimal/util.rb
index 88f490c..4ece834 100644
--- ext/bigdecimal/lib/bigdecimal/util.rb
+++ ext/bigdecimal/lib/bigdecimal/util.rb
@@ -6,7 +6,6 @@
 #++
 
 require 'bigdecimal'
-require 'bigdecimal/util.so'
 
 class Integer < Numeric
   # call-seq:
@@ -66,6 +65,9 @@ class String
   #
   # See also BigDecimal::new.
   #
+  def to_d
+    BigDecimal.interpret_loosely(self)
+  end
 end
 
 
diff --git ext/bigdecimal/util/extconf.rb ext/bigdecimal/util/extconf.rb
deleted file mode 100644
index 8750db1..0000000
--- ext/bigdecimal/util/extconf.rb
+++ /dev/null
@@ -1,24 +0,0 @@
-# frozen_string_literal: false
-require 'mkmf'
-
-checking_for(checking_message("Windows")) do
-  case RUBY_PLATFORM
-  when /cygwin|mingw/
-    if defined?($extlist)
-      build_dir = "$(TARGET_SO_DIR)../"
-    else
-      base_dir = File.expand_path('../../../..', __FILE__)
-      build_dir = File.join(base_dir, "tmp", RUBY_PLATFORM, "bigdecimal", RUBY_VERSION, "")
-    end
-    $libs << " #{build_dir}bigdecimal.so"
-    true
-  when /mswin/
-    $DLDFLAGS << " -libpath:.."
-    $libs << " bigdecimal-$(arch).lib"
-    true
-  else
-    false
-  end
-end
-
-create_makefile('bigdecimal/util')
diff --git ext/bigdecimal/util/util.c ext/bigdecimal/util/util.c
deleted file mode 100644
index 8d38d87..0000000
--- ext/bigdecimal/util/util.c
+++ /dev/null
@@ -1,9 +0,0 @@
-#include "ruby.h"
-
-RUBY_EXTERN VALUE rmpd_util_str_to_d(VALUE str);
-
-void
-Init_util(void)
-{
-  rb_define_method(rb_cString, "to_d", rmpd_util_str_to_d, 0);
-}
diff --git test/bigdecimal/test_bigdecimal.rb test/bigdecimal/test_bigdecimal.rb
index e4f1444..af32e53 100644
--- test/bigdecimal/test_bigdecimal.rb
+++ test/bigdecimal/test_bigdecimal.rb
@@ -229,6 +229,29 @@ class TestBigDecimal < Test::Unit::TestCase
     $VERBOSE = verbose
   end
 
+  def test_s_interpret_loosely
+    assert_equal(BigDecimal('1'), BigDecimal.interpret_loosely("1__1_1"))
+    assert_equal(BigDecimal('2.5'), BigDecimal.interpret_loosely("2.5"))
+    assert_equal(BigDecimal('2.5'), BigDecimal.interpret_loosely("2.5 degrees"))
+    assert_equal(BigDecimal('2.5e1'), BigDecimal.interpret_loosely("2.5e1 degrees"))
+    assert_equal(BigDecimal('0'), BigDecimal.interpret_loosely("degrees 100.0"))
+    assert_equal(BigDecimal('0.125'), BigDecimal.interpret_loosely("0.1_2_5"))
+    assert_equal(BigDecimal('0.125'), BigDecimal.interpret_loosely("0.1_2_5__"))
+    assert_equal(BigDecimal('1'), BigDecimal.interpret_loosely("1_.125"))
+    assert_equal(BigDecimal('1'), BigDecimal.interpret_loosely("1._125"))
+    assert_equal(BigDecimal('0.1'), BigDecimal.interpret_loosely("0.1__2_5"))
+    assert_equal(BigDecimal('0.1'), BigDecimal.interpret_loosely("0.1_e10"))
+    assert_equal(BigDecimal('0.1'), BigDecimal.interpret_loosely("0.1e_10"))
+    assert_equal(BigDecimal('1'), BigDecimal.interpret_loosely("0.1e1__0"))
+    assert_equal(BigDecimal('1.2'), BigDecimal.interpret_loosely("1.2.3"))
+    assert_equal(BigDecimal('1'), BigDecimal.interpret_loosely("1."))
+    assert_equal(BigDecimal('1'), BigDecimal.interpret_loosely("1e"))
+
+    assert_equal(BigDecimal('0.0'), BigDecimal.interpret_loosely("invalid"))
+
+    assert(BigDecimal.interpret_loosely("2.5").frozen?)
+  end
+
   def _test_mode(type)
     BigDecimal.mode(type, true)
     assert_raise(FloatDomainError) { yield }
@@ -1828,12 +1851,17 @@ class TestBigDecimal < Test::Unit::TestCase
     end
   end
 
-  def test_dup_subclass
-    c = Class.new(BigDecimal)
-    # TODO: BigDecimal.new will be removed on 1.5
-    # assert_raise_with_message(NoMethodError, /undefined method `new'/) { c.new(1) }
+  def test_define_subclass
+    assert_warning(/subclassing BigDecimal will be disallowed/) do
+      Class.new(BigDecimal)
+    end
+  end
+
+  def test_subclass_behavior
     verbose, $VERBOSE = $VERBOSE, nil
+    c = Class.new(BigDecimal)
     assert_equal(BigDecimal(1), c.new(1))
+    assert_kind_of(c, c.new(1))
     assert_raise(ArgumentError) { c.new(',', exception: true) }
     assert_nothing_raised { assert_equal(nil, c.new(',', exception: false)) }
     assert_raise(TypeError) { c.new(nil, exception: true) }
diff --git test/bigdecimal/test_bigdecimal_util.rb test/bigdecimal/test_bigdecimal_util.rb
index bb9ed83..b963fcd 100644
--- test/bigdecimal/test_bigdecimal_util.rb
+++ test/bigdecimal/test_bigdecimal_util.rb
@@ -75,6 +75,8 @@ class TestBigDecimalUtil < Test::Unit::TestCase
     assert_equal(BigDecimal('0.1'), "0.1e_10".to_d)
     assert_equal(BigDecimal('1'), "0.1e1__0".to_d)
     assert_equal(BigDecimal('1.2'), "1.2.3".to_d)
+    assert_equal(BigDecimal('1'), "1.".to_d)
+    assert_equal(BigDecimal('1'), "1e".to_d)
 
     assert("2.5".to_d.frozen?)
   end
