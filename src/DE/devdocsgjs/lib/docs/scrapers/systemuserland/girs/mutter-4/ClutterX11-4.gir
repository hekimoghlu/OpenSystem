<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Clutter" version="4"/>
  <include name="Cogl" version="4"/>
  <include name="CoglPango" version="4"/>
  <include name="xlib" version="2.0"/>
  <package name="mutter-clutter-x11-4"/>
  <namespace name="ClutterX11"
             version="4"
             shared-library="libmutter-clutter-4.so.0"
             c:identifier-prefixes="ClutterX11"
             c:symbol-prefixes="clutter_x11">
    <callback name="FilterFunc" c:type="ClutterX11FilterFunc" version="0.6">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-x11.h"
           line="75">Filter function for X11 native events.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="87"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-x11.h"
             line="83">the result of the filtering</doc>
        <type name="FilterReturn" c:type="ClutterX11FilterReturn"/>
      </return-value>
      <parameters>
        <parameter name="xev" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-x11.h"
               line="77">Native X11 event structure</doc>
          <type name="xlib.XEvent" c:type="XEvent*"/>
        </parameter>
        <parameter name="cev" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-x11.h"
               line="78">Clutter event structure</doc>
          <type name="Clutter.Event" c:type="ClutterEvent*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-x11.h"
               line="79">user data passed to the filter function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="FilterReturn"
                 version="0.6"
                 glib:type-name="ClutterX11FilterReturn"
                 glib:get-type="clutter_x11_filter_return_get_type"
                 c:type="ClutterX11FilterReturn">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-x11.h"
           line="48">Return values for the #ClutterX11FilterFunc function.</doc>
      <member name="continue"
              value="0"
              c:identifier="CLUTTER_X11_FILTER_CONTINUE"
              glib:nick="continue">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-x11.h"
             line="50">The event was not handled, continues the
  processing</doc>
      </member>
      <member name="translate"
              value="1"
              c:identifier="CLUTTER_X11_FILTER_TRANSLATE"
              glib:nick="translate">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-x11.h"
             line="52">Native event translated into a Clutter
  event, stops the processing</doc>
      </member>
      <member name="remove"
              value="2"
              c:identifier="CLUTTER_X11_FILTER_REMOVE"
              glib:nick="remove">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-x11.h"
             line="54">Remove the event, stops the processing</doc>
      </member>
    </enumeration>
    <record name="XInputDevice" c:type="ClutterX11XInputDevice" disguised="1">
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="73"/>
    </record>
    <function name="add_filter"
              c:identifier="clutter_x11_add_filter"
              version="0.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="1072">Adds an event filter function.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="114"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="func" transfer-ownership="none" closure="1">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-backend-x11.c"
               line="1074">a filter function</doc>
          <type name="FilterFunc" c:type="ClutterX11FilterFunc"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-backend-x11.c"
               line="1075">user data to be passed to the filter function, or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="disable_event_retrieval"
              c:identifier="clutter_x11_disable_event_retrieval"
              version="0.8">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="962">Disables the internal polling of X11 events in the main loop.

Libraries or applications calling this function will be responsible of
polling all X11 events.

You also must call clutter_x11_handle_event() to let Clutter process
events and maintain its internal state.

This function can only be called before calling clutter_init().

Even with event handling disabled, Clutter will still select
all the events required to maintain its internal state on the stage
Window; compositors using Clutter and input regions to pass events
through to application windows should not rely on an empty input
region, and should instead clear it themselves explicitly using the
XFixes extension.

This function should not be normally used by applications.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="124"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="event_get_key_group"
              c:identifier="clutter_x11_event_get_key_group"
              version="1.4">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-event-x11.c"
           line="342">Retrieves the group for the modifiers set in @event</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="151"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-event-x11.c"
             line="348">the group id</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-event-x11.c"
               line="344">a #ClutterEvent of type %CLUTTER_KEY_PRESS or %CLUTTER_KEY_RELEASE</doc>
          <type name="Clutter.Event" c:type="const ClutterEvent*"/>
        </parameter>
      </parameters>
    </function>
    <function name="event_sequence_get_touch_detail"
              c:identifier="clutter_x11_event_sequence_get_touch_detail"
              version="1.12">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-event-x11.c"
           line="368">Retrieves the touch detail froma #ClutterEventSequence.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="154"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-event-x11.c"
             line="374">the touch detail</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="sequence" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-event-x11.c"
               line="370">a #ClutterEventSequence</doc>
          <type name="Clutter.EventSequence"
                c:type="const ClutterEventSequence*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_current_event_time"
              c:identifier="clutter_x11_get_current_event_time"
              version="1.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-event-x11.c"
           line="322">Retrieves the timestamp of the last X11 event processed by
Clutter. This might be different from the timestamp returned
by clutter_get_current_event_time(), as Clutter may synthesize
or throttle events.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="148"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-event-x11.c"
             line="330">a timestamp, in milliseconds</doc>
        <type name="xlib.Time" c:type="Time"/>
      </return-value>
    </function>
    <function name="get_default_display"
              c:identifier="clutter_x11_get_default_display"
              version="0.6">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="905">Retrieves the pointer to the default display.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="97"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-backend-x11.c"
             line="910">the default display</doc>
        <type name="xlib.Display" c:type="Display*"/>
      </return-value>
    </function>
    <function name="get_default_screen"
              c:identifier="clutter_x11_get_default_screen"
              version="0.6">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="1014">Gets the number of the default X Screen object.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="99"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-backend-x11.c"
             line="1019">the number of the default screen</doc>
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="get_root_window"
              c:identifier="clutter_x11_get_root_window"
              version="0.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="1043">Retrieves the root window.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="101"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-backend-x11.c"
             line="1048">the id of the root window</doc>
        <type name="xlib.Window" c:type="Window"/>
      </return-value>
    </function>
    <function name="get_stage_from_window"
              c:identifier="clutter_x11_get_stage_from_window"
              version="0.8">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-stage-x11.c"
           line="1371">Gets the stage for a particular X window.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="129"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-stage-x11.c"
             line="1377">A #ClutterStage, or% NULL if a stage
  does not exist for the window</doc>
        <type name="Clutter.Stage" c:type="ClutterStage*"/>
      </return-value>
      <parameters>
        <parameter name="win" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-stage-x11.c"
               line="1373">an X Window ID</doc>
          <type name="xlib.Window" c:type="Window"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_stage_window"
              c:identifier="clutter_x11_get_stage_window"
              version="0.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-stage-x11.c"
           line="1338">Gets the stages X Window.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="108"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-stage-x11.c"
             line="1344">An XID for the stage window.</doc>
        <type name="xlib.Window" c:type="Window"/>
      </return-value>
      <parameters>
        <parameter name="stage" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-stage-x11.c"
               line="1340">a #ClutterStage</doc>
          <type name="Clutter.Stage" c:type="ClutterStage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_use_argb_visual"
              c:identifier="clutter_x11_get_use_argb_visual"
              version="1.2">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="1278">Retrieves whether the Clutter X11 backend is using ARGB visuals by default</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="140"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-backend-x11.c"
             line="1283">%TRUE if ARGB visuals are queried by default</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="get_use_stereo_stage"
              c:identifier="clutter_x11_get_use_stereo_stage"
              version="1.22">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="1331">Retrieves whether the Clutter X11 backend will create stereo
stages if possible.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="145"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-backend-x11.c"
             line="1337">%TRUE if stereo stages are used if possible</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="get_visual_info"
              c:identifier="clutter_x11_get_visual_info"
              version="1.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="1353">Retrieves the `XVisualInfo` used by the Clutter X11 backend.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="103"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-backend-x11.c"
             line="1358">a `XVisualInfo`, or `None`.
  The returned value should be freed using `XFree()` when done</doc>
        <type name="xlib.XVisualInfo" c:type="XVisualInfo*"/>
      </return-value>
    </function>
    <function name="handle_event"
              c:identifier="clutter_x11_handle_event"
              version="0.8">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-event-x11.c"
           line="142">This function processes a single X event; it can be used to hook
into external X11 event processing (for example, a GDK filter
function).

If clutter_x11_disable_event_retrieval() has been called, you must
let this function process events to update Clutter's internal state.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="121"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-event-x11.c"
             line="153">#ClutterX11FilterReturn. %CLUTTER_X11_FILTER_REMOVE
 indicates that Clutter has internally handled the event and the
 caller should do no further processing. %CLUTTER_X11_FILTER_CONTINUE
 indicates that Clutter is either not interested in the event,
 or has used the event to update internal state without taking
 any exclusive action. %CLUTTER_X11_FILTER_TRANSLATE will not
 occur.</doc>
        <type name="FilterReturn" c:type="ClutterX11FilterReturn"/>
      </return-value>
      <parameters>
        <parameter name="xevent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-event-x11.c"
               line="144">pointer to XEvent structure</doc>
          <type name="xlib.XEvent" c:type="XEvent*"/>
        </parameter>
      </parameters>
    </function>
    <function name="has_composite_extension"
              c:identifier="clutter_x11_has_composite_extension">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="1200">Retrieves whether Clutter is running on an X11 server with the
XComposite extension</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="135"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-backend-x11.c"
             line="1206">%TRUE if the XComposite extension is available</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="has_event_retrieval"
              c:identifier="clutter_x11_has_event_retrieval"
              version="0.8">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="999">Queries the X11 backend to check if event collection has been disabled.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="126"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-backend-x11.c"
             line="1004">TRUE if event retrival has been disabled. FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="has_xinput"
              c:identifier="clutter_x11_has_xinput"
              version="0.8">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="1170">Gets whether Clutter has XInput support.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="132"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-backend-x11.c"
             line="1175">%TRUE if Clutter was compiled with XInput support
  and XInput support is available at run time.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="remove_filter"
              c:identifier="clutter_x11_remove_filter"
              version="0.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="1115">Removes the given filter function.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="117"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="func" transfer-ownership="none" closure="1">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-backend-x11.c"
               line="1117">a filter function</doc>
          <type name="FilterFunc" c:type="ClutterX11FilterFunc"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-backend-x11.c"
               line="1118">user data to be passed to the filter function, or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_display"
              c:identifier="clutter_x11_set_display"
              version="0.8">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="934">Sets the display connection Clutter should use; must be called
before clutter_init(), clutter_init_with_args() or other functions
pertaining Clutter's initialization process.

If you are parsing the command line arguments by retrieving Clutter's
#GOptionGroup with clutter_get_option_group() and calling
g_option_context_parse() yourself, you should also call
clutter_x11_set_display() before g_option_context_parse().</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="105"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xdpy" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-backend-x11.c"
               line="936">pointer to a X display connection.</doc>
          <type name="xlib.Display" c:type="Display*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_stage_foreign"
              c:identifier="clutter_x11_set_stage_foreign"
              version="0.4">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-stage-x11.c"
           line="1436">Target the #ClutterStage to use an existing external X Window</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="110"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-stage-x11.c"
             line="1443">%TRUE if foreign window is valid</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="stage" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-stage-x11.c"
               line="1438">a #ClutterStage</doc>
          <type name="Clutter.Stage" c:type="ClutterStage*"/>
        </parameter>
        <parameter name="xwindow" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-stage-x11.c"
               line="1439">an existing X Window id</doc>
          <type name="xlib.Window" c:type="Window"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_use_argb_visual"
              c:identifier="clutter_x11_set_use_argb_visual"
              version="1.2">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="1243">Sets whether the Clutter X11 backend should request ARGB visuals by default
or not.

By default, Clutter requests RGB visuals.

If no ARGB visuals are found, the X11 backend will fall back to
requesting a RGB visual instead.

ARGB visuals are required for the #ClutterStage:use-alpha property to work.

This function can only be called once, and before clutter_init() is
called.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="138"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="use_argb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-backend-x11.c"
               line="1245">%TRUE if ARGB visuals should be requested by default</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_use_stereo_stage"
              c:identifier="clutter_x11_set_use_stereo_stage"
              version="1.22">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="1293">Sets whether the backend object for Clutter stages, will,
if possible, be created with the ability to support stereo drawing
(drawing separate images for the left and right eyes).

This function must be called before clutter_init() is called.
During paint callbacks, cogl_framebuffer_is_stereo() can be called
on the framebuffer retrieved by cogl_get_draw_framebuffer() to
determine if stereo support was successfully enabled, and
cogl_framebuffer_set_stereo_mode() to determine which buffers
will be drawn to.

Note that this function *does not* cause the stage to be drawn
multiple times with different perspective transformations and thus
appear in 3D, it simply enables individual ClutterActors to paint
different images for the left and and right eye.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="143"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="use_stereo" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../clutter/clutter/x11/clutter-backend-x11.c"
               line="1295">%TRUE if the stereo stages should be used if possible.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="trap_x_errors"
              c:identifier="clutter_x11_trap_x_errors"
              version="0.6">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="874">Traps every X error until clutter_x11_untrap_x_errors() is called.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="92"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="untrap_x_errors"
              c:identifier="clutter_x11_untrap_x_errors"
              version="0.4">
      <doc xml:space="preserve"
           filename="../clutter/clutter/x11/clutter-backend-x11.c"
           line="888">Removes the X error trap and returns the current status.</doc>
      <source-position filename="../clutter/clutter/x11/clutter-x11.h"
                       line="94"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../clutter/clutter/x11/clutter-backend-x11.c"
             line="893">the trapped error code, or 0 for success</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
    </function>
  </namespace>
</repository>
