#!/usr/bin/perl -w
# -----------------------------------------------------------------------------

use strict;
$| = 1;

sub distribution;

my %funcs = ();
my %argoverride = ();
my %defaults;

{
    my $of = "of the distribution";
    my @common = ('give_log' =>
		  "if true, log of the result will be returned instead",

		  'lower_tail' =>
		  "if true (the default), the lower tail of the distribution is considered",

		  'log_p' => 'if true, the natural logarithm of the probability is given or returned; defaults to false',

		  'x' => 'observation',
		  'p' => 'probability or natural logarithm of the probability',

		  'shape' => "the shape parameter $of",
		  'scale' => "the scale parameter $of",
		  );

    $funcs{'dnorm'} = $funcs{'pnorm'} = $funcs{'qnorm'} =
	[\&distribution,
	 'normal',
	 ({ 'mu' => "mean $of",
	    'sigma' => "standard deviation $of",
	    @common }),
	 [ { 'x' => 1, 'mu' => 0, 'sigma' => 1 },
	   { 'x' => 2, 'mu' => 0, 'sigma' => 1 },
	   { 'x' => 3, 'mu' => 0, 'sigma' => 1 } ],
	];

    $funcs{'dlnorm'} = $funcs{'plnorm'} = $funcs{'qlnorm'} =
	[\&distribution,
	 'log-normal',
	 ({ 'logmean' => "mean of the underlying normal distribution",
	    'logsd' => "standard deviation of the underlying normal distribution",
	    @common }),
	 [ { 'x' => 2.5, 'logmean' => 1, 'logsd' => 2 } ],
	];

    $funcs{'dgamma'} = $funcs{'pgamma'} = $funcs{'qgamma'} =
	[\&distribution,
	 'gamma',
	 ({ @common }),
	 [ { 'x' => 3, 'shape' => 5, 'scale' => 1 } ],
	];

    $funcs{'dbeta'} = $funcs{'pbeta'} = $funcs{'qbeta'} =
	[\&distribution,
	 'beta',
	 ({ 'a' => "the first shape parameter $of",
	    'b' => "the second scale parameter $of",
	    @common }),
	 [ { 'x' => 0.4, 'a' => 1, 'b' => 4 } ],
	];

    $funcs{'dt'} = $funcs{'pt'} = $funcs{'qt'} =
	[\&distribution,
	 'Student t',
	 ({ 'n' => "the number of degrees of freedom $of",
	    @common }),
	 [ { 'x' => 1.5, 'n' => 5 } ],
	];

    $funcs{'df'} = $funcs{'pf'} = $funcs{'qf'} =
	[\&distribution,
	 'F',
	 ({ 'n1' => "the first number of degrees of freedom $of",
	    'n2' => "the second number of degrees of freedom $of",
	    @common }),
	 [ { 'x' => 1.5, 'n1' => 2, 'n2' => 3 } ],
	 ];

    $funcs{'dchisq'} = $funcs{'pchisq'} = $funcs{'qchisq'} =
	[\&distribution,
	 'chi-square',
	 ({ 'df' => "the number of degrees of freedom $of",
	    @common }),
	 [ { 'x' => 2.5, 'df' => 4 } ],
	];

    $funcs{'dweibull'} = $funcs{'pweibull'} = $funcs{'qweibull'} =
	[\&distribution,
	 'Weibull',
	 ({ @common }),
	 [ { 'x' => 2.1, 'shape' => 1.5, 'scale' => 1 } ],
	];

    $funcs{'dpois'} = $funcs{'ppois'} = $funcs{'qpois'} =
	[\&distribution,
	 'Poisson',
	 ({ 'lambda' => "the mean $of",
	    @common }),
	 [ { 'x' => 4, 'lambda' => 4 } ],
	];

    $funcs{'dexp'} = $funcs{'pexp'} = $funcs{'qexp'} =
	[\&distribution,
	 'exponential',
	 ({ @common }),
	 [ { 'x' => 1.5, 'scale' => 4 } ],
	];

    $funcs{'dbinom'} = $funcs{'pbinom'} = $funcs{'qbinom'} =
	[\&distribution,
	 'binomial',
	 ({ 'n' => 'the number of trials',
	    'psuc' => "the probability of success in each trial",
	    @common }),
	 [ { 'x' => 4, 'n' => 10, 'psuc' => 0.4 } ],
	];

    $funcs{'dnbinom'} = $funcs{'pnbinom'} = $funcs{'qnbinom'} =
	[\&distribution,
	 'negative binomial',
	 ({ 'n' => 'required number of successes',
	    'psuc' => "the probability of success in each trial",
	    @common,
	    'x' => 'observation (number of failures)' }),
	 [ { 'x' => 8, 'n' => 10, 'psuc' => 0.45 } ],
	];

    $funcs{'dhyper'} = $funcs{'phyper'} = $funcs{'qhyper'} =
	[\&distribution,
	 'hypergeometric',
	 ({ 'r' => "the number of red balls",
	    'b' => "the number of black balls",
	    'n' => "the number of balls drawn",
	    @common }),
	 [ { 'x' => 12, 'r' => 50, 'b' => 450, 'n' => 100 } ],
	];

    $funcs{'dcauchy'} = $funcs{'pcauchy'} = $funcs{'qcauchy'} =
	[\&distribution,
	 'Cauchy',
	 ({ 'location' => "the center $of",
	    @common }),
	 [ { 'x' => 1.5, 'location' => 1, 'scale' => 4 } ],
	];

    $funcs{'dgeom'} = $funcs{'pgeom'} = $funcs{'qgeom'} =
	[\&distribution,
	 'geometric',
	 ({ 'psuc' => "the probability of success in each trial",
	    @common }),
	 [ { 'x' => 3, 'psuc' => 0.2 } ],
	];

    $funcs{'dsnorm'} =  $funcs{'psnorm'} =  $funcs{'qsnorm'} =
	[\&distribution,
	 'skew-normal',
	 ({ 'location' => "the location parameter $of",
	    @common }),
	 [ { 'x' => 3, 'shape' => 2, 'location' => 0, 'scale' => 1 } ],
	];

    $funcs{'dst'} = $funcs{'pst'} = $funcs{'qst'} =
	[\&distribution,
	 'skew-t',
	 ({ 'n' => "the number of degrees of freedom $of",
	    @common }),
	 [ { 'x' => 2, 'n' => 5, 'shape' => 2 } ],
	];

    $funcs{'ptukey'} = $funcs{'qtukey'} =
	[\&distribution,
	 'Studentized range',
	 ({ 'nranges' => "the number of ranges; default is 1",
	    'nmeans' => "the number of means",
	    'df' => "the number of degrees of freedom $of",
	    @common }),
	];
    $defaults{'ptukey:nranges'} = $defaults{'qtukey:nranges'} = 1;

    $funcs{'dgumbel'} = $funcs{'pgumbel'} = $funcs{'qgumbel'} =
	[\&distribution,
	 'Gumbel',
	 ({ 'mu' => "the location parameter of freedom $of",
	    'beta' => "the scale parameter of freedom $of",
	    @common }),
	 [ { 'x' => 2.5, 'mu' => 2, 'beta' => 1 } ],
	];

    $funcs{'drayleigh'} = $funcs{'prayleigh'} = $funcs{'qrayleigh'} =
	[\&distribution,
	 'Rayleigh',
	 ({ @common }),
	 [ { 'x' => 2, 'scale' => 1 } ],
	];
}


my %odf_note =
    ('qchisq' => 'A two argument invocation R.QCHISQ(@{p},@{df}) is exported to OpenFormula as CHISQINV(@{p},@{df}).',
     'pchisq' => 'A two argument invocation R.PCHISQ(@{x},@{df}) is exported to OpenFormula as CHISQDIST(@{x},@{df}).',
     'dchisq' => 'A two argument invocation R.DCHISQ(@{x},@{df}) is exported to OpenFormula as CHISQDIST(@{x},@{df},FALSE()).',
    );

my %test_status = ();
my @burkardt_tests =
    ('pbeta', 'pbinom', 'pcauchy', 'pchisq', 'pexp',
     'pf', 'pgamma', 'pgeom', 'phyper', 'dhyper', 'plnorm',
     'pnbinom', 'pnorm', 'ppois', 'pt', 'pweibull', );
my @amath_tests =
    ('dbeta', 'dbinom', 'dcauchy', 'dchisq', 'dexp', 'df', 'dgamma',
     'dhyper', 'dlnorm', 'dnbinom', 'dnorm', 'dpois', 'dt',
     'dweibull', 'pbeta', 'pbinom', 'pcauchy', 'pchisq', 'pexp', 'pf',
     'pgamma', 'phyper', 'plnorm', 'pnbinom', 'pnorm', 'ppois', 'pt',
     'pweibull', 'qbeta', 'qcauchy', 'qchisq', 'qexp', 'qf', 'qgamma',
     'qlnorm', 'qnorm', 'qt', 'qweibull');
foreach (@burkardt_tests, @amath_tests) {
    $test_status{$_} = 'EXHAUSTIVE';
}

my %type_getter =
    ('gnm_float' => 'value_get_as_float',
     'gboolean' => 'value_get_as_checked_bool',
     );

my %type_spec =
    ('gnm_float' => 'f',
     'gboolean' => 'b',
     );

my %type_setter =
    ('gnm_float' => 'value_new_float',
     'int' => 'value_new_int',
     'gboolean' => 'value_new_bool',
     );

# -----------------------------------------------------------------------------

my $mathfunch = $0;
$mathfunch =~ s|[^/]+$|../../src/mathfunc.h|;

my $dpqh = $0;
$dpqh =~ s|[^/]+$|../../src/sf-dpq.h|;


my $funcdefs = "";
my %functions;

my $emitted = "";

&emit ("/* This code was generated by $0.  Do not edit. */\n\n" .
       "#include <gnumeric-config.h>\n" .
       "#include <gnumeric.h>\n" .
       "#include <goffice/goffice.h>\n" .
       "#include <gnm-plugin.h>\n" .
       "#include <func.h>\n" .
       "#include <gnm-i18n.h>\n" .
       "#include <value.h>\n" .
       "#include <mathfunc.h>\n" .
       "#include <sf-dpq.h>\n" .
       "#include \"extra.h\"\n\n" .
       "GNM_PLUGIN_MODULE_HEADER;\n\n");

foreach my $header ($mathfunch, $dpqh, "extra.h") {
    local (*HEADER);
    open (HEADER, "<$header") or die "$0: Cannot read $header: $!\n";
    while (<HEADER>) {
	chomp;

	if (/^(gnm_float)\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*\(.*\)/) {
	    my $restype = $1;
	    my $func = $2;
	    next unless exists $funcs{$func};
	    $functions{$func} = [$restype,$_];
	}
    }
    close (HEADER);
}

foreach my $func (sort { &cfileorder($a,$b) } keys %functions) {
    my ($restype,$proto) = @{$functions{$func}};
    my ($handler,@args) = @{ $funcs{$func} };
    &$handler ($func, $restype, $proto, @args);
}


&emit_line ();

&emit ("G_MODULE_EXPORT void\n" .
       "go_plugin_init (GOPlugin *plugin, GOCmdContext *cc)\n" .
       "{\n" .
       "}\n\n");

&emit ("G_MODULE_EXPORT void\n" .
       "go_plugin_shutdown (GOPlugin *plugin, GOCmdContext *cc)\n" .
       "{\n" .
       "}\n\n");

&emit_line ();

&emit ("GnmFuncDescriptor const rstat_functions[] = {\n" .
       $funcdefs .
       "\t{ NULL }\n" .
       "};\n");
&emit_dump ("functions.c");

&create_plugin_xml_in (keys %functions);

# -----------------------------------------------------------------------------

sub cfileorder {
    my ($a,$b) = @_;
    return ((substr($a,1) cmp substr($b,1)) ||
	    (substr($a,0,1) cmp substr($b,0,1)));
}

# -----------------------------------------------------------------------------

sub distribution {
    my ($func,$restype,$proto,$distname,$argdescs,$psamples) = @_;

    my $args = $proto;
    $args =~ s/^.*\((.*)\)\s*;$/$1/;

    my @args = ();
    foreach (split (/\s*,\s*/, $args)) {
	my ($type,$name) = split (' ');
	$name = $argoverride{"$func:$name"} || $argoverride{$name} || $name;
	push @args, [$type,$name];
    }

    # ----------------------------------------
    # Output help description.

    &emit_line ();
    &emit ("static GnmFuncHelp const help_r_$func\[\] = {\n");

    my $short_what = ($func =~ /^d/
		      ? "probability density function"
		      : ($func =~ /^p/
			 ? "cumulative distribution function"
			 : "probability quantile function")) .
			 " of the $distname distribution";
    &emit ("\t{ GNM_FUNC_HELP_NAME, F_(\"" . uc ("r.$func") . ":$short_what\") },\n");

    foreach (@args) {
	my ($type,$name) = @{ $_ };

	my $desc = $argdescs->{$name};
	if (!defined $desc) {
	    $desc = "";
	    warn "$0: Argument $name of r.$func has no description\n";
	}
	&emit ("\t{ GNM_FUNC_HELP_ARG, F_(\"$name:$desc\") },\n");
    }

    my $what = "This function returns the " .
	($func =~ /^d/
	 ? "probability density function"
	 : ($func =~ /^p/
	    ? "cumulative distribution function"
	    : "probability quantile function, i.e., the inverse of the cumulative distribution function,")) .
	    " of the $distname distribution.";
    &emit ("\t{ GNM_FUNC_HELP_DESCRIPTION, F_(\"$what\") },\n");

    my $odf = $odf_note{$func};
    if ($odf) {
	&emit ("\t{ GNM_FUNC_HELP_ODF, F_(\"$odf\") },\n");
    }

    my $sdef = { 'p' => 0.3,
		 'give_log' => undef,
		 'lower_tail' => undef};

    if ($psamples) {
      SAMPLE:
	foreach my $s (@$psamples) {
	    my @sample_args = ();
	  ARG:
	    foreach (@args) {
		my ($type,$name) = @{ $_ };
		if (exists $s->{$name}) {
		    my $a = $s->{$name};
		    push @sample_args, $a;
		} elsif (exists $sdef->{$name}) {
		    my $a = $sdef->{$name};
		    last ARG unless defined $a;
		    push @sample_args, $a;
		} else {
		    next SAMPLE;
		}
	    }
	    &emit ("\t{ GNM_FUNC_HELP_EXAMPLES, \"=r.$func(" . join (",", @sample_args) . ")\" },\n");
	}
    }

    my $seealso = "";
    my $f1 = substr ($func, 1);
    my $F1 = uc ($f1);
    $seealso .= ",R.D$F1" if ($func !~ /^d/) && exists $funcs{"d$f1"};
    $seealso .= ",R.P$F1" if $func !~ /^p/ && exists $funcs{"p$f1"};
    $seealso .= ",R.Q$F1" if $func !~ /^q/ && exists $funcs{"q$f1"};
    $seealso =~ s/^,\s*//;
    if ($seealso) {
	&emit ("\t{ GNM_FUNC_HELP_SEEALSO, \"$seealso\" },\n");
    }

    &emit ("\t{ GNM_FUNC_HELP_END }\n" .
	   "};\n\n");

    # ----------------------------------------
    # Output the function body.

    &emit ("static GnmValue *\n" .
	   "gnumeric_r_$func (GnmFuncEvalInfo *ei, GnmValue const * const *args)\n" .
	   "{\n");

    my $typespec = "";
    my $n = 0;
    foreach (@args) {
	my ($type,$name) = @{ $_ };
	my $def = $defaults{"$func:$name"};
	$def = 'TRUE' if $name eq 'lower_tail';
	$def = 'FALSE' if $name eq 'give_log' || $name eq 'log_p';

	&emit ("\t$type $name = " .
	       (defined ($def) ? "args[$n] ? " : "") .
	       $type_getter{$type} . " (args[$n])" .
	       (defined ($def) ? " : $def" : "") .
	       ";\n");

	if ($typespec =~ /\|/) {
	    die "$0: argument $name for $func needs a default"
		unless defined $def;
	} elsif (defined ($def)) {
	    $typespec .= "|" ;
	}
	$typespec .= $type_spec{$type};
	$n++;
    }

    &emit ("\n" .
	   "\treturn " . $type_setter{$restype} . " (" .
	   "$func (" . join (", ", map { $_->[1] } @args) . "));\n" .
	   "}\n\n");

    my $arglist = join (",", map { $_->[1] } @args);

    my $test_status = $test_status{$func} || 'NO_TESTSUITE';

    $funcdefs .= ("\t{\n" .
		  "\t\t\"r.$func\",\n" .
		  "\t\t\"$typespec\",\n" .
		  "\t\thelp_r_$func,\n" .
		  "\t\tgnumeric_r_$func, NULL,\n" .
		  "\t\tGNM_FUNC_SIMPLE, GNM_FUNC_IMPL_STATUS_UNIQUE_TO_GNUMERIC, GNM_FUNC_TEST_STATUS_$test_status,\n" .
		  "\t},\n");
}

# -----------------------------------------------------------------------------

sub emit {
    my ($code) = @_;
    $emitted .= $code;
}

sub emit_line {
    &emit ("/* " . ('-' x 73) . " */\n\n");
}

sub emit_dump {
    my ($filename) = @_;

    my $tmpfilename = "$filename.new";
    print STDERR "Creating $filename";
    local (*FIL);
    open (FIL, ">$tmpfilename") or die "Cannot write to $tmpfilename: $!\n";
    print FIL $emitted;
    close (*FIL);

    &update_file ($filename);

    $emitted = "";
}

# -----------------------------------------------------------------------------

sub update_file {
    my ($old) = @_;
    my ($new) = "$old.new";

    if (!-r $old) {
	rename $new, $old or
	    die "$0: Cannot rename $new to $old: $!\n";
	print STDERR " -- done.\n";
    } else {
	system ("cmp '$old' '$new' >/dev/null");
	if ($? == 0) {
	    print STDERR " -- unchanged.\n";
	    unlink $new;
	} else {
	    rename $new, $old or
		die "$0: Cannot rename $new to $old: $!\n";
	    print STDERR " -- done.\n";
	}
    }
}

# -----------------------------------------------------------------------------

sub create_plugin_xml_in {
    my (@funcnames) = @_;

    &emit ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" .
	   "<plugin id=\"Gnumeric_r\">\n" .
	   "\t<information>\n" .
	   "\t\t<_name>Statistical Functions</_name>\n" .
	   "\t\t<_description>Statistical Functions with naming and calling conventions from The R Project</_description>\n" .
	   "\t</information>\n" .
	   "\t<loader type=\"Gnumeric_Builtin:module\">\n" .
	   "\t\t<attribute name=\"module_file\" value=\"rstat\"/>\n" .
	   "\t</loader>\n" .
	   "\t<services>\n" .
	   "\t\t<service type=\"function_group\" id=\"rstat\">\n" .
	   "\t\t\t<_category>Statistics</_category>\n" .
	   "\t\t\t<functions textdomain=\"gnumeric-VERSION-functions\">\n");

    foreach my $func (sort @funcnames) {
	my $rfunc = "r.$func";
	&emit ("\t\t\t\t<function name=\"$rfunc\"/>\n");
    }

    &emit ("\t\t\t</functions>\n" .
	   "\t\t</service>\n" .
	   "\t</services>\n" .
	   "</plugin>\n");

    &emit_dump ("plugin.xml.in");
}

# -----------------------------------------------------------------------------
