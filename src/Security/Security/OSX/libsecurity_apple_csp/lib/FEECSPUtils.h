/*
 *
 * Copyright (c) NeXTHub Corporation. All Rights Reserved. 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Author: Tunjay Akbarli
 * Date: Thursday, February 27, 2025.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201, 
 * Middletown, DE 19709, New Castle County, USA.
 *
 */
/*
 * FEECSPUtils.h - Misc. utility function for FEE/CryptKit CSP. 
 *
 */

#ifdef	CRYPTKIT_CSP_ENABLE
 
#ifndef	_FEE_CSP_UTILS_H_
#define _FEE_CSP_UTILS_H_

#include "AppleCSPSession.h"
#include <security_cryptkit/feeTypes.h>
#include <security_cdsa_utilities/context.h>

/*
 * Default FEE keyblob format, indicating DER-encoding.
 * FEE keys can optionally be generated by requesting 
 * CSSM_KEYBLOB_RAW_FORMAT_OCTET_STRING, indicating native FEE key blobs.
 */
#define FEE_KEYBLOB_DEFAULT_FORMAT	CSSM_KEYBLOB_RAW_FORMAT_NONE

namespace CryptKit {

/* Given a FEE error, throw appropriate CssmError */
void throwCryptKit(
	feeReturn 	frtn, 
	const char	*op);		/* optional */

/* 
 * Given a Context:
 * -- obtain CSSM key of specified CSSM_ATTRIBUTE_TYPE
 * -- validate keyClass
 * -- validate keyUsage
 * -- convert to feePubKey, allocating the feePubKey if necessary
 */
feePubKey contextToFeeKey(
	const Context 		&context,
	AppleCSPSession	 	&session,
	CSSM_ATTRIBUTE_TYPE	attrType,	  // CSSM_ATTRIBUTE_KEY, CSSM_ATTRIBUTE_PUBLIC_KEY
	CSSM_KEYCLASS		keyClass,	  // CSSM_KEYCLASS_{PUBLIC,PRIVATE}_KEY
	CSSM_KEYUSE			usage,		  // CSSM_KEYUSE_ENCRYPT, CSSM_KEYUSE_SIGN, etc.
	bool				&mallocdKey); // RETURNED

/* 
 * Convert a CssmKey to a feePubKey. May result in the creation of a new
 * feePubKey (when cssmKey is a raw key); allocdKey is true in that case
 * in which case the caller generally has to free the allocd key).
 */
feePubKey cssmKeyToFee(
	const CssmKey	&cssmKey,
	AppleCSPSession	&session,
	bool			&allocdKey);	// RETURNED

/* 
 * Convert a raw CssmKey to a newly alloc'd feePubKey.
 */
feePubKey rawCssmKeyToFee(
	const CssmKey	&cssmKey);

/*
 * Glue function which allows C code to use AppleCSPSession 
 * as an RNG. A ptr to this function gets passed down to 
 * CryptKit C functions as a feeRandFcn.
 */
feeReturn feeRandCallback(
	void 			*ref,		// actually an AppleCSPSession *
	unsigned char 	*bytes,		// must be alloc'd by caller 
	unsigned 		numBytes);

} /* namespace CryptKit */

#endif	/* _FEE_CSP_UTILS_H_ */
#endif	/* CRYPTKIT_CSP_ENABLE */
