/*
 *
 * Copyright (c) NeXTHub Corporation. All Rights Reserved. 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Author: Tunjay Akbarli
 * Date: Wednesday, September 21, 2022.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201, 
 * Middletown, DE 19709, New Castle County, USA.
 *
 */

// This file was automatically generated by protocompiler
// DO NOT EDIT!
// Compiled from SFACollection.proto

#import "SECSFAEventFilter.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled; turn on ARC, or use 'objc_use_arc' option to generate non-ARC code.
#endif

@implementation SECSFAEventFilter

- (BOOL)hasEvent
{
    return _event != nil;
}
@synthesize event = _event;
@synthesize dropRate = _dropRate;
- (void)setDropRate:(int64_t)v
{
    _has.dropRate = (uint)YES;
    _dropRate = v;
}
- (void)setHasDropRate:(BOOL)f
{
    _has.dropRate = (uint)f;
}
- (BOOL)hasDropRate
{
    return _has.dropRate != 0;
}

- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_event)
    {
        [dict setObject:self->_event forKey:@"event"];
    }
    if (self->_has.dropRate)
    {
        [dict setObject:[NSNumber numberWithLongLong:self->_dropRate] forKey:@"dropRate"];
    }
    return dict;
}

BOOL SECSFAEventFilterReadFrom(__unsafe_unretained SECSFAEventFilter *self, __unsafe_unretained PBDataReader *reader) {
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;

        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* event */:
            {
                NSString *new_event = PBReaderReadString(reader);
                self->_event = new_event;
            }
            break;
            case 2 /* dropRate */:
            {
                self->_has.dropRate = (uint)YES;
                self->_dropRate = PBReaderReadInt64(reader);
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }
    return !PBReaderHasError(reader);
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return SECSFAEventFilterReadFrom(self, reader);
}
- (void)writeTo:(PBDataWriter *)writer
{
    /* event */
    {
        if (self->_event)
        {
            PBDataWriterWriteStringField(writer, self->_event, 1);
        }
    }
    /* dropRate */
    {
        if (self->_has.dropRate)
        {
            PBDataWriterWriteInt64Field(writer, self->_dropRate, 2);
        }
    }
}

- (void)copyTo:(SECSFAEventFilter *)other
{
    if (_event)
    {
        other.event = _event;
    }
    if (self->_has.dropRate)
    {
        other->_dropRate = _dropRate;
        other->_has.dropRate = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    SECSFAEventFilter *copy = [[[self class] allocWithZone:zone] init];
    copy->_event = [_event copyWithZone:zone];
    if (self->_has.dropRate)
    {
        copy->_dropRate = _dropRate;
        copy->_has.dropRate = YES;
    }
    return copy;
}

- (BOOL)isEqual:(id)object
{
    SECSFAEventFilter *other = (SECSFAEventFilter *)object;
    return [other isMemberOfClass:[self class]]
    &&
    ((!self->_event && !other->_event) || [self->_event isEqual:other->_event])
    &&
    ((self->_has.dropRate && other->_has.dropRate && self->_dropRate == other->_dropRate) || (!self->_has.dropRate && !other->_has.dropRate))
    ;
}

- (NSUInteger)hash
{
    return 0
    ^
    [self->_event hash]
    ^
    (self->_has.dropRate ? PBHashInt((NSUInteger)self->_dropRate) : 0)
    ;
}

- (void)mergeFrom:(SECSFAEventFilter *)other
{
    if (other->_event)
    {
        [self setEvent:other->_event];
    }
    if (other->_has.dropRate)
    {
        self->_dropRate = other->_dropRate;
        self->_has.dropRate = YES;
    }
}

@end

