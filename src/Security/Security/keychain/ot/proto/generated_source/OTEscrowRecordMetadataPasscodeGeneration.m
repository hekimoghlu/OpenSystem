/*
 *
 * Copyright (c) NeXTHub Corporation. All Rights Reserved. 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Author: Tunjay Akbarli
 * Date: Tuesday, March 29, 2022.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Please contact NeXTHub Corporation, 651 N Broad St, Suite 201, 
 * Middletown, DE 19709, New Castle County, USA.
 *
 */

// This file was automatically generated by protocompiler
// DO NOT EDIT!
// Compiled from OTEscrowRecord.proto

#import "OTEscrowRecordMetadataPasscodeGeneration.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled; turn on ARC, or use 'objc_use_arc' option to generate non-ARC code.
#endif

@implementation OTEscrowRecordMetadataPasscodeGeneration

@synthesize value = _value;
- (void)setValue:(uint64_t)v
{
    _has.value = (uint)YES;
    _value = v;
}
- (void)setHasValue:(BOOL)f
{
    _has.value = (uint)f;
}
- (BOOL)hasValue
{
    return _has.value != 0;
}

- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_has.value)
    {
        [dict setObject:[NSNumber numberWithUnsignedLongLong:self->_value] forKey:@"value"];
    }
    return dict;
}

BOOL OTEscrowRecordMetadataPasscodeGenerationReadFrom(__unsafe_unretained OTEscrowRecordMetadataPasscodeGeneration *self, __unsafe_unretained PBDataReader *reader) {
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;

        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* value */:
            {
                self->_has.value = (uint)YES;
                self->_value = PBReaderReadUint64(reader);
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }
    return !PBReaderHasError(reader);
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return OTEscrowRecordMetadataPasscodeGenerationReadFrom(self, reader);
}
- (void)writeTo:(PBDataWriter *)writer
{
    /* value */
    {
        if (self->_has.value)
        {
            PBDataWriterWriteUint64Field(writer, self->_value, 1);
        }
    }
}

- (void)copyTo:(OTEscrowRecordMetadataPasscodeGeneration *)other
{
    if (self->_has.value)
    {
        other->_value = _value;
        other->_has.value = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    OTEscrowRecordMetadataPasscodeGeneration *copy = [[[self class] allocWithZone:zone] init];
    if (self->_has.value)
    {
        copy->_value = _value;
        copy->_has.value = YES;
    }
    return copy;
}

- (BOOL)isEqual:(id)object
{
    OTEscrowRecordMetadataPasscodeGeneration *other = (OTEscrowRecordMetadataPasscodeGeneration *)object;
    return [other isMemberOfClass:[self class]]
    &&
    ((self->_has.value && other->_has.value && self->_value == other->_value) || (!self->_has.value && !other->_has.value))
    ;
}

- (NSUInteger)hash
{
    return 0
    ^
    (self->_has.value ? PBHashInt((NSUInteger)self->_value) : 0)
    ;
}

- (void)mergeFrom:(OTEscrowRecordMetadataPasscodeGeneration *)other
{
    if (other->_has.value)
    {
        self->_value = other->_value;
        self->_has.value = YES;
    }
}

@end

